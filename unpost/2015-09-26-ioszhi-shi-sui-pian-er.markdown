---
layout: post
title: "关于这一周总结"
date: 2015-09-26 11:47:49 +0800
comments: true
categories: 
---
进入了一个新的创业公司，公司的人数不是很多，COO是少楠，一个我很尊敬的前产品经理，而技术全部由CEO一人完成。我是以iOS工程师的身份进去的，不过还是需要先进行将近一个月的后台编程学习，使用的语言工具是php。<br>
刚进入公司，非常地累，并不是以往的那种累，一方面是来自CEO的压力，一方面是思想层面上的。CEO也不时指出我在开发过程中一些及其不好的习惯，还有一些思想层面上的东西，收获很多，虽然刚开始有点不习惯这种直白的方式吧，但是填的坑有点多了以后，发现其实这样也挺好，至少我记得更加深刻一些。<br>
以下就是这一个星期自己每天所得：<br>
<!--more-->
1、自己在以前开发或者学习过程中没有充分实现对工具的利用（快捷键）

- 这点是在第一天去公司的还没超过一小时被指出的，因为以前做iOS，接触的大部分是Xcode上的快捷键，然后对safari的快捷键一点没有了解，而且最为致命的一点是，我在切换程序的时候习惯性地会用触控板点，没有用tab+command。其实因为我以前使用ubuntu，不敢说对快捷键很依赖，但是也算是很追求这个的吧，至少vim编辑器使用地还是相对不错的，大部分情况也会用终端开程序。不过在mac系统上还是大意了吧。

2、自己在以前不善于总结，比如Git，以为相对比较了解了，但是距离能讲出来给完全不会的人听还是有差距

- 这点是在CEO让我在一个小时内熟悉Git开发的通常流程过程中被指出的。说实在话，第一天刚开始就被震住了，脑子思考有点断片，因为自己混github也有段时间了，也用OSChina上面的Git代码托管合作过一个项目，但是对一些常规操作也说不清楚。后来CEO给我说了下，顿时醍醐灌顶。以前自己只是知道了怎么用，而不会关心到底为什么会这样，这次是吸取到教训了。当时画的图类似下面图片：![](/images/Snip20150926_1.png)。<br>

  - 可以看到主体分成了四块：Remote、Local、Cache、File。<br>
  - 而平时我们Xcode打开的就是在File里面的，如果没有add进Cache里面，就会显示一个?符号。<br>
  - 当时checkout没怎么用过，也就表述不清，其实主要就是在Local仓库里面可能存在ABC三个分支，而File终只会有一个分支的代码，所以通过checkout来切换不同分支的代码。<br>
  - 还有一点，以前对pull request理解不是很清晰，其实就是给master Remote发送一个请求，请求master Remote对fork Remote进行pull。<br>
  - 使用fetch+merge＝pull，使用前者的好处是可以多次fetch最新代码到本地，但是没有merge，也就不会有冲突产生，而使用pull就得每次都得解决冲突。<br>
  - 抽象来说，这就是4个仓库，只不过是放在了不同的地方，他们之间的数据传输可以大体总结为两个方式pull+push。

3、遇到一些问题，尽量联想并结合以前相关的知识和代码进行解决

- 这点是在php构造函数上面的一个疑问，代码如下
  - 当时问的是为什么要另外弄一个init函数，而不是直接使用构造函数__construct，后来没有得到直接的回答。只是引导性的问我构造函数什么时候执行等等问题，后来得出的结论是这些问题其实我都知道，但是就没有联想到这个问题上面，就是init可能会在其他地方被调用，如果改为构造函数的话， 那就无法进行二次调用了。这就是“伸手党”。

```php
     public function init($options) {
          $this->table = $options['table'];
          $this->columns = $options['columns'];
          $this->key = $options['key'];
          $this->reset();
      }
      
      -----------------snip----------------
      
      function __construct() {                                                                                                                                                     
         $options = array(
             'table' => 'babel_node',
             'key' => 'id',
             'pkey' => 'pid',
             'columns' => array(
                 'id' => 'node_id',
                 'pid' => 'nod_pid',
                 'name' => 'nod_title'
             ));
         parent::init($options);
     }
```
4、架构的本质是分层和抽象，代码的本质是路由

- 其实只要有一种语言工具，能提供基本的表达式和if else就能编写几乎所有业务了。

5、工作外的时间尽量用来总结，提炼本质，而不是学习新知识，去跨界的阅读

- 这点还是有些意外的，因为当时说是自己平时可能会上appcoda上面看些小demo，然后就得到了这样的一个建议，说是知识是学不完了，不总结一些本质性的东西，会离世界上最先进的技术越来越远。怎么说呢，现在还是体会不到吧。后来推荐的一些读物：[阮一峰](http://www.ruanyifeng.com/blog/) , [程序本质](http://www.cnblogs.com/weidagang2046/p/the-nature-of-meta.html)

6、看函数要看本质，理解这个函数从根本上要做什么事情，而不是更具部分调用的上下文来判定
7、如何对每个小任务按照知识点进行分块，每个分块应该如何进行学习或者设计，并且在这一步，分块的设计应该是面向接口的，而不是针对内部细节

- 这一点真的是感触很深，因为以前可能只会对一些大任务进行模块的划分，而现在是要对一个小任务进行分块。比如现在有以下任务：给界面添加一个评论输入框，点击提交的时候将评论插入到数据库，然后界面更新出现评论。给10分钟进行分块。后来我的划分是这样的：

  - 1、针对界面，可能涉及到HTML的一些语句，还有与php传递数据的问题。因为这一块不是很熟悉，所以花20分钟进行学习
  - 2、针对数据库操作，给根Data添加一个insert函数，函数无入参，返回false/主键值。用15分钟
    - 这里当时没事先设计好，只是说要创建一个插入函数，其实这里要做的是进行面向接口设计，不必去在意细节
  - 3、最后花15分钟进行编码
  
  事实上，我花了肯定不止1小时来完成这个任务，但是这种分块技巧让我受益匪浅，知道了将每一步要做些什么具象出来，而不是想到哪里写哪里。