<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tripleCC的技术博客]]></title>
  <link href="http://triplecc.github.io/atom.xml" rel="self"/>
  <link href="http://triplecc.github.io/"/>
  <updated>2015-09-04T17:10:40+08:00</updated>
  <id>http://triplecc.github.io/</id>
  <author>
    <name><![CDATA[tripleCC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用响应者链条解决需求]]></title>
    <link href="http://triplecc.github.io/blog/2015-09-02-shi-yong-xiang-ying-zhe-lian-tiao-jie-jue-xu-qiu/"/>
    <updated>2015-09-02T00:20:22+08:00</updated>
    <id>http://triplecc.github.io/blog/shi-yong-xiang-ying-zhe-lian-tiao-jie-jue-xu-qiu</id>
    <content type="html"><![CDATA[<ul>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="http://triplecc.github.io/images%0A-%20%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E5%92%8C%E8%A7%A6%E5%BA%95%E6%95%B4%E4%BD%93%E8%BF%87%E7%A8%8B%0A%20%20-%20%E5%8F%91%E7%94%9F%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6%E5%90%8E%EF%BC%8C%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%B0%86%E8%AF%A5%E4%BA%8B%E4%BB%B6%E5%8A%A0%E5%85%A5%E5%88%B0%E4%B8%80%E4%B8%AA%E7%94%B1`UIApplication%E7%AE%A1%E7%90%86%E7%9A%84%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97`%E4%B8%AD(**%E4%BA%A7%E7%94%9F**" alt="" />
  - UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）
  - 主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）
  - 找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）
- 事件<code>传递</code>方向
  - 底层->顶层
    - 所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件
- 事件<code>处理</code>方向
  - 顶层->底层
    - 所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</p>

<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件

<h1>eventstransmitandhandle</h1></li>
</ul>
</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li><p>总结</p>

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件
/Snip20150616_2.png)<br></li>
</ul>
</li>
<li><p>点击绿色View</p>

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
![](/images</li>
</ul>
</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件

<h1>eventstransmitandhandle</h1></li>
</ul>
</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li><p>总结</p>

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件
/Snip20150616_1.png)</li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
![](/images</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件

<h1>eventstransmitandhandle</h1></li>
</ul>
</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件
/Snip20150616_3.png)</li>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li>实例1<br>
![](/images</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件

<h1>eventstransmitandhandle</h1></li>
</ul>
</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li><p>总结</p>

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件
/Snip20150616_4.png)</li>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
![](/images</li>
</ul>
</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件

<h1>eventstransmitandhandle</h1></li>
</ul>
</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件
/Snip20150616_5.png)</li>
<li>点击按钮<br>
![](/images</li>
</ul>
</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件

<h1>eventstransmitandhandle</h1></li>
</ul>
</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件
/Snip20150616_6.png)</li>
<li>点击对话框<br>
![](/images</li>
</ul>
</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件

<h1>eventstransmitandhandle</h1></li>
</ul>
</li>
<li>事件传递和触底整体过程

<ul>
<li>发生触摸事件后，系统会将该事件加入到一个由<code>UIApplication管理的事件队列</code>中(<strong>产生</strong>)</li>
<li>UIApplication会从事件队列中取出<code>最前面的事件</code>，并将事件分发下去以便处理，通常，先发送事件给应用程序的<code>主窗口（keyWindow）</code>（<strong>传递</strong>）</li>
<li>主窗口会在视图层次结构中找到一个<code>最合适的视图</code>来处理触摸事件，这也是整个事件处理过程的<code>第一步</code>（<strong>传递</strong>）</li>
<li>找到合适的视图控件后，就会调用<code>视图控件的touches方法</code>来作具体的事件处理（<strong>处理</strong>）</li>
</ul>
</li>
<li>事件<code>传递</code>方向

<ul>
<li>底层->顶层

<ul>
<li>所以<code>父控件不能接收</code>触摸事件时，<code>子控件就不能</code>接收触摸事件</li>
</ul>
</li>
</ul>
</li>
<li>事件<code>处理</code>方向

<ul>
<li>顶层->底层

<ul>
<li>所以在<code>子控件处理</code>了事件，并且<code>没有向父控件传递</code>事件时，<code>父控件就不会处理</code>事件</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>事件传递</h2>

<p><img src="./image/Snip20150616_2.png" alt="" /><br></p>

<ul>
<li>点击绿色View

<ul>
<li>UIApplication->UIWindow->白色View->绿色View</li>
</ul>
</li>
<li>点击黄色View

<ul>
<li>UIApplication->UIWindow->白色View->橙色View->蓝色View->黄色View</li>
</ul>
</li>
<li><p>查找最合适的控件来处理事件</p>

<ul>
<li><code>自己能否接收触摸事件</code>(1)</li>
<li><code>触摸点是否在自己身上</code>(2)</li>
<li><code>从后往前遍历子控件，重复前面两个步骤</code>(3)</li>
<li><code>如果没有符合条件的子控件，那么自己就是最合适的控件</code>(4)

<ul>
<li>点击黄色View的查找情况

<ul>
<li>UIApplication->UIWindow->白色View很明显</li>
<li>白色View:满足(1),(2)

<ul>
<li>执行(3)(在子控件数组中，橙色View在绿色View后面)

<ul>
<li>->橙色View:满足(1),(2)

<ul>
<li>执行(3)(红色View后于蓝色View添加，先遍历红色View)

<ul>
<li>->红色View:满足(1),不满足(2)</li>
<li>->蓝色View:满足(1),(2)

<ul>
<li>执行(3)

<ul>
<li>->黄色View:满足(1),(2)

<ul>
<li>执行(3),没有子控件，自己就是最适合的控件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>->绿色View:满足(1),不满足(2)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>UIView<code>不接受触摸</code>的三种情况</p>

<ul>
<li>不使能用户交互<br></li>
</ul>


<pre><code class="objc">userInteractionEnabled = NO
</code></pre>

<ul>
<li>隐藏<br></li>
</ul>


<pre><code class="objc">hidden = YES
</code></pre>

<ul>
<li>透明<br></li>
</ul>


<pre><code class="objc">alpha = 0.0 ~ 0.01
</code></pre>

<ul>
<li>苹果说明<br>
<img src="./image/Snip20150616_1.png" alt="" /></li>
</ul>
</li>
<li><p>寻找最适合控件内部实现</p>

<ul>
<li>寻找最适合控件方法<br>

<ul>
<li>方法内部的默认实现是依次调用子控件的这个方法，直到遍历完自己的子控件然后返回</li>
</ul>


<p>```objc
// 当事件传递给控件的时候[父控件找到子控件，调用子控件的这个方法并传入event参数]，就会调用控件的这个方法，去寻找最合适的view</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event;
```</li>
<li><p>坐标判断和转换<br></p>

<pre><code class="objc">// 将point的值，从调用这个方法的控件坐标系转到view控件    坐标系
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView     *)view;
// 判断事件发生点是否在调用此方法的控件上
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent     *)event;
</code></pre></li>
<li><p>由以上两点信息可以写出<code>寻找最适合控件的内部实现</code> <br></p>

<p>```objc</p></li>
<li>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event
{
// 1.是否可以响应
if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt; 0.01) {
   return nil;
}</li>
</ul>


<p>  // 2.触摸点是否在控件上
  if ([self pointInside:point withEvent:event] == NO) {
      return nil;
  }</p>

<p>  // 3.递归遍历子控件
  for (int i = (int)self.subviews.count - 1; i >= 0; i&ndash;) {
      UIView *view = self.subviews[i];</p>

<pre><code>  // 将当前控件上的坐标系转换成子控件上的坐标系
  CGPoint childP = [self convertPoint:point toView:view];

  UIView *fitView = [view hitTest:childP withEvent:event];

  if (fitView) {
      // 找到适合的子控件
      return fitView;
  }
</code></pre>

<p>  }</p>

<p>  // 循环结束，表示没有比自己更适合的view
  return self;
}
```</p></li>
</ul>


<h2>事件处理</h2>

<ul>
<li>用户点击屏幕后产生的一个触摸事件，经过一系列的传递过程后，会找到最合适的视图控件来处理这个事件</li>
<li>找到最合适的视图控件后，就会调用<code>对应控件</code>的touches方法来作具体的事件处理

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
<li>如果没有实现以上方法，就传递给父控件</li>
</ul>
</li>
<li>touches方法的<code>默认做法</code>是将事件<code>顺着响应者链条向上传递</code>，将事件交给上一个响应者进行处理

<ul>
<li>所以在相应控件实现了touches方法，就等于拦截了事件，在拦截控件上进行处理</li>
<li>这里<code>注意UIGestureRecognizer的区别</code>，两个并<code>不互相拦截</code>，要想拦截UIGestureRecognizer的手势处理，需要<code>在子控件上添加相同的手势</code>，<code>实现touches方法是没用的</code></li>
</ul>
</li>
</ul>


<h3>响应者链条</h3>

<ul>
<li>响应者链条：是由多个响应者对象连接起来的链条</li>
<li>作用：能很清楚的看见每个响应者之间的联系，并且可以让一个事件多个对象处理。</li>
<li>响应者对象：能处理事件的对象</li>
<li>响应者链条示意图
<img src="./image/Snip20150616_3.png" alt="" />

<ul>
<li>如果view的控制器存在，就传递给控制器；如果控制器不存在，则将其传递给它的父视图</li>
<li>在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理</li>
<li>如果window对象也不处理，则其将事件或消息传递给UIApplication对象</li>
<li>如果UIApplication也不能处理该事件或消息，则将其丢弃</li>
</ul>
</li>
</ul>


<h2>事件传递的完整过程</h2>

<ul>
<li><p>先将事件对象由上往下传递(由父控件传递给子控件,也就是<code>从底层到顶层</code>)，找到最合适的控件来处理这个事件。</p></li>
<li><p>调用<code>最合适控件的touches….方法</code></p></li>
<li><p>如果调用了<code>[super touches….];</code>就会将事件顺着响应者链条往上传递，传递给上一个响应者［可以做到<code>一个事件多个控件响应</code>］</p>

<ul>
<li>注意，<code>如果这时，父类实现了touches….方法，但是没有调用[super touches….]，就不会传给上一个响应者，而是以父类的touches….方法解决</code>

<ul>
<li>在继承UIButton的时候就需要注意这一点，自定义button调用[super touches….]是不会传递给父控件的，因为UIButton实现了touches….方法，但是没有调用[super touches….]

<ul>
<li><code>UIButton的addTagert:方法会和touches方法冲突</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>接着就会调用上一个响应者的touches….方法</p></li>
<li>判断上一个响应者

<ul>
<li>如果<code>当前这个view是控制器的view，那么控制器就是上一个响应者</code></li>
<li>如果<code>当前这个view不是控制器的view，那么父控件就是上一个响应者</code></li>
</ul>
</li>
</ul>


<h2>利用事件传递解决需求</h2>

<ul>
<li><p>实例1<br>
<img src="./image/Snip20150616_4.png" alt="" /></p>

<ul>
<li>需求：在点击到按钮的部分时，需要按钮响应，其他部分由绿色view响应

<ul>
<li>问题：由于部分按钮被绿色view覆盖了，所以点击被覆盖的按钮时，还是绿色view响应</li>
<li>解决：自定义绿色view，添加按钮属性，并重写绿色view的-hitTest:withEvent:方法，在里面判断是否在按钮范围内。<br></li>
</ul>


<pre><code class="objc">// 自定义绿色view
@interface TPCView()
/** 按钮 */
@property (weak, nonatomic) IBOutlet UIButton *button;
@end

@implementation TPCView

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
// 转换成按钮坐标系
CGPoint buttonP = [self convertPoint:point toView:_button];

// 如果点在按钮上，就返回按钮
if ([_button pointInside:buttonP withEvent:event]) {
    return _button;
}

// 其他情况返回本身
return [super hitTest:point withEvent:event];
}
@end
</code></pre></li>
</ul>
</li>
<li><p>实例2</p>

<ul>
<li>开始<br>
<img src="./image/Snip20150616_5.png" alt="" /></li>
<li>点击按钮<br>
<img src="./image/Snip20150616_6.png" alt="" /></li>
<li>点击对话框<br>
<img src="./image/Snip20150616_10.png" alt="" /></li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件
/Snip20150616_10.png)</li>
<li>需求：点击按钮出现对话框，能对对话框进行点击，并且能对按钮进行拖动（对话框也同时动）</li>
<li>解决：点击按钮时，将对话框设置为按钮的子控件</li>
<li>问题：对话框不在父控件范围内，点击对话框时，无法满足事件传递要求（触摸点不在父控件按钮上，在这里就断了，所以不会去判断其子控件）</li>
<li><p>解决：自定义按钮控件，添加对话框属性，重写按钮的-hitTest:withEvent:方法，在里面判断是否在对话框范围内范围内。<br></p>

<pre><code class="objc">// 控制器中代码
- (IBAction)popChatView:(PopBtn *)sender {
// 弹出对话框
UIButton *chatView = [UIButton buttonWithType:UIButtonTypeCustom];

chatView.bounds = CGRectMake(0, 0, 200, 200);
chatView.center = CGPointMake(100, -100);

[chatView setBackgroundImage:[UIImage imageNamed:@"对话框"] forState:UIControlStateNormal];
[chatView setBackgroundImage:[UIImage imageNamed:@"小孩"] forState:UIControlStateHighlighted];
sender.chatView = chatView;
[sender addSubview:chatView];

}
</code></pre>

<pre><code class="objc">
// 自定义按钮
@implementation PopBtn

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{

// 当前控件上的点转换到chatView上
CGPoint chatP = [self convertPoint:point toView:self.chatView];

// 判断下点在不在chatView上
if ([self.chatView pointInside:chatP withEvent:event]) {
    return self.chatView;
}else{
    return [super hitTest:point withEvent:event];
}

}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
// 获取UITouch
UITouch *touch = [touches anyObject];

// 获取当前的点
CGPoint curP = [touch locationInView:self];

// 获取上一个的点
CGPoint preP = [touch previousLocationInView:self];

// 获取偏移量
CGFloat offsetX = curP.x - preP.x;
CGFloat OffsetY = curP.y - preP.y;

// 修改控件的位置
CGPoint center = self.center;
center.x += offsetX;
center.y += OffsetY;

self.center = center;

}
@end
</code></pre></li>
</ul>
</li>
<li>总结

<ul>
<li>这种情况下，大都是自定义覆盖需要响应控件的控件，或者子控件超出父控件范围的父控件，然后添加对应需要接收响应的控件属性，重写自定义控件的hitTest方法，在里面将触摸点转换成需要接收响应控件的坐标系，判断是否在其坐标系内，再返回对应的控件</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序不死]]></title>
    <link href="http://triplecc.github.io/blog/2015-06-03-cheng-xu-bu-si/"/>
    <updated>2015-06-03T23:57:43+08:00</updated>
    <id>http://triplecc.github.io/blog/cheng-xu-bu-si</id>
    <content type="html"><![CDATA[<p>利用NSSetUncaughtExceptionHandler注册<code>异常处理函数</code>，结合<code>RunLoop</code>，可以让程序即使在奔溃的情况下也不会关闭。这样，我们就可以利用这个时间点来处理一些事务，比如<code>提醒用户程序崩溃了</code>.</p>

<ul>
<li>1.在程序启动后注册异常处理函数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="bp">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 注册异常处理函数</span>
</span><span class='line'>    <span class="n">NSSetUncaughtExceptionHandler</span><span class="p">(</span><span class="n">handleException</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2.因为异常处理函数不是方法，所以重新在里面调用方法，以便后续的编写</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">handleException</span><span class="p">(</span><span class="bp">NSException</span> <span class="o">*</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">delegate</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">handle</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>3.在异常处理方法中显示AlertView，并<code>重启</code>RunLoop

<ul>
<li>不重启RunLoop，AlerView无法显示，因为<code>UI的刷新显示是依靠RunLoop的</code>，RunLoop一停止，界面的挂了</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;程序已崩&quot;</span> <span class="nl">message</span><span class="p">:</span><span class="s">@&quot;是否发送错误并关闭&quot;</span> <span class="nl">delegate</span><span class="p">:</span><span class="nb">self</span> <span class="nl">cancelButtonTitle</span><span class="p">:</span><span class="s">@&quot;是&quot;</span> <span class="nl">otherButtonTitles</span><span class="p">:</span><span class="s">@&quot;否&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 重启RunLoop，不然AlertView显示不出来，因为RunLoop已经停止了</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">addPort</span><span class="p">:[</span><span class="bp">NSPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>4.编写AlertView代理方法，处理点击

<ul>
<li>退出程序有两种方式

<ul>
<li>1.<code>停止RunLoop</code></li>
<li>2.<code>exit</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">alertView:</span><span class="p">(</span><span class="bp">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="nf">clickedButtonAtIndex:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">buttonIndex</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">buttonIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在异常处理函数中也可以不调用handle方法，直接进行显示和重启RunLoop</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">handleException</span><span class="p">(</span><span class="bp">NSException</span> <span class="o">*</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;程序已崩&quot;</span> <span class="nl">message</span><span class="p">:</span><span class="s">@&quot;是否发送错误并关闭&quot;</span> <span class="nl">delegate</span><span class="p">:[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">delegate</span> <span class="nl">cancelButtonTitle</span><span class="p">:</span><span class="s">@&quot;是&quot;</span> <span class="nl">otherButtonTitles</span><span class="p">:</span><span class="s">@&quot;否&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 重启RunLoop，不然AlertView显示不出来，因为RunLoop已经停止了</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">addPort</span><span class="p">:[</span><span class="bp">NSPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以用UIAlertController</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">handleException</span><span class="p">(</span><span class="bp">NSException</span> <span class="o">*</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIAlertController</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIAlertController</span> <span class="nl">alertControllerWithTitle</span><span class="p">:</span><span class="s">@&quot;程序已崩&quot;</span> <span class="nl">message</span><span class="p">:</span><span class="s">@&quot;是否关闭&quot;</span> <span class="nl">preferredStyle</span><span class="p">:</span><span class="n">UIAlertControllerStyleAlert</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIAlertAction</span> <span class="o">*</span><span class="n">confirm</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIAlertAction</span> <span class="nl">actionWithTitle</span><span class="p">:</span><span class="s">@&quot;是&quot;</span> <span class="nl">style</span><span class="p">:</span><span class="n">UIAlertActionStyleDefault</span> <span class="nl">handler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">UIAlertAction</span> <span class="o">*</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alert</span> <span class="nl">addAction</span><span class="p">:</span><span class="n">confirm</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIAlertAction</span> <span class="o">*</span><span class="n">cancel</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIAlertAction</span> <span class="nl">actionWithTitle</span><span class="p">:</span><span class="s">@&quot;否&quot;</span> <span class="nl">style</span><span class="p">:</span><span class="n">UIAlertActionStyleCancel</span> <span class="nl">handler</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alert</span> <span class="nl">addAction</span><span class="p">:</span><span class="n">cancel</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 获取主窗口的根控制器，并modal出Alert控制器</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">].</span><span class="n">keyWindow</span><span class="p">.</span><span class="n">rootViewController</span> <span class="nl">presentViewController</span><span class="p">:</span><span class="n">alert</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span> <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 重启RunLoop，不然AlertView显示不出来，因为RunLoop已经停止了</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">addPort</span><span class="p">:[</span><span class="bp">NSPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runloop知识梳理]]></title>
    <link href="http://triplecc.github.io/blog/2015-05-31-runloopzhi-shi-shu-li/"/>
    <updated>2015-05-31T19:21:36+08:00</updated>
    <id>http://triplecc.github.io/blog/runloopzhi-shi-shu-li</id>
    <content type="html"><![CDATA[<p><a href="http://blog.ibireme.com">深入理解RunLoop</a>这篇文章写的很好！这里针对自己的理解进行下总结</p>

<h2>简介</h2>

<p>RunLoop顾名思义，就是<code>运行循环</code>的意思。<br></p>

<h4>基本作用：</h4>

<ul>
<li>保持程序的持续运行</li>
<li>处理App中的各类事件（触摸事件、定时器事件、Selector事件）</li>
<li>节省CPU资源，提高程序性能：没有事件时就进行睡眠状态</li>
</ul>


<h4>内部实现：</h4>

<ul>
<li>do-while循环，在这个循环内部不断地处理各种任务（Source\Timeer\Observer）</li>
</ul>


<h4>注意点：</h4>

<ul>
<li>一个线程对应一个RunLoop（采用字典存储，<code>线程号为key，RunLoop为value</code>）</li>
<li>主线程的RunLoop默认已经启动，子线程的RunLoop需要手动启动</li>
<li><p>RunLoop只能选择一个Mode启动，如果当前Mode没有任何Source、Timer、Observer，那么就不会进入RunLoop</p>

<ul>
<li>RunLoop的主要函数调用顺序为：<code>CFRunLoopRun-&gt;CFRunLoopRunSpecific-&gt;__CFRunLoopRun</code>
<img src="http://triplecc.github.io/images/Snip20150713_2.png" alt="" /><br></li>
<li><code>注意特殊情况</code>，事实上，在<code>只有</code>Observer的情况，也不一定会进入循环，因为源代码里面只会显式地检测两个东西：<code>Source和Timer</code>(这两个是主动向RunLoop发送消息的)；Observer是被动接收消息的<br>
<img src="http://triplecc.github.io/images/Snip20150713_11.png" alt="" /></li>
</ul>
</li>
<li><p>RunLoop在<code>第一次获取时创建</code>，在<code>线程结束时销毁</code></p></li>
</ul>


<h4>RunLoop循环示意图:(针对上面的<code>__CFRunLoopRun</code>函数，Mode已经判断非空前提)</h4>

<ul>
<li>图1<br><img src="http://triplecc.github.io/images/Snip20150712_39.png" alt="RunLoop循环示意图" /><br></li>
<li>图2<br><img src="http://triplecc.github.io/images/Snip20150713_3.png" alt="" /><br></li>
</ul>


<p>接触过微处理器编程的基本上都知道，在编写微处理器程序时，通常会在main函数中写一个无限循环，然后在这个循环里面对外部事件进行监听，比如外部中断，一些传感器的数据等，在没有外部中断时，就让CPU进入低功耗模式。如果接收到了外部中断，就恢复到正常模式，对中断进行处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 根据中断决定是否切换模式执行任务</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 或者</span>
</span><span class='line'><span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>RunLoop和这个相似，也是在线程的main中增加了一个循环：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">running</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 执行各种任务，处理各种事件</span>
</span><span class='line'>             <span class="c1">// ......</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">running</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以线程在这种情况下，便不会退出。<br>
关于<code>MainRunLoop</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="k">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在viewDidLoad中设置断电，然后得到以下主线程栈信息：<br>
<img src="http://triplecc.github.io/images/Snip20150712_40.png" alt="" /><br>
可以看到，UIApplicationMain内部启动了一个和主线程相关联的RunLoop（_CFRunLoopRun）。在这里也可以推断，程序进入UIApplicationMain就不会退出了。我稍微对主函数进行了如下修改，并在return语句上打印了断点：<br>
<img src="http://triplecc.github.io/images/Snip20150712_41.png" alt="" /><br>
运行程序后，并不会在断点处停下，证实了上面的推断。</p>

<p>上面涉及了一个_CFRunLoopRun函数，接下来说明下iOS中访问和使用RunLoop的API：</p>

<ul>
<li>Foundation&ndash;NSRunLoop</li>
<li>Core Foundation&ndash;CFRunLoopRef(开源)</li>
</ul>


<p>因为后者是开源的，且前者是在后者上针对OC的封装，所以一般是对CFRunLoopRef进行研究。<br>
两套API对应获取RunLoop对象的方式：</p>

<ul>
<li>Foundation</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">];</span> <span class="c1">// 当前runloop</span>
</span><span class='line'><span class="p">[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">];</span>    <span class="c1">// 主线程runloop</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Core Foundation</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CFRunLoopGetCurrent</span><span class="p">();</span><span class="c1">// 当前runloop</span>
</span><span class='line'><span class="n">CFRunLoopGetMain</span><span class="p">();</span>   <span class="c1">// 主线程runloop</span>
</span></code></pre></td></tr></table></div></figure>


<p>值得注意的是，获取当前RunLoop都是进行<code>懒加载</code>的，也就是调用时自动创建线程对应的RunLoop。<br></p>

<h3>RunLoop相关类：</h3>

<ul>
<li>CFRunLoopRef</li>
<li>CFRunLoopModeRef</li>
<li>CFRunLoopSourceRef</li>
<li>CFRunLoopTimerRef</li>
<li>CFRunLoopObserverRef</li>
</ul>


<p><img src="http://triplecc.github.io/images/Snip20150712_43.png" alt="类之间关系" /><br>
以上图片说明了各个类之间的关系。<br></p>

<h4><code>CFRunLoopModeRef</code>说明：</h4>

<ul>
<li>代表RunLoop的运行模式，一个RunLoop可以包含多个Mode，每个Mode可以包含多个Source、Timer、Observer</li>
<li>每次RunLoop启动时，只能指定其中<code>一个Mode</code>，这个Mode就变成了CurrentMode</li>
<li>当启动RunLoop时，如果所在Mode中没有Source、Timer、Observer，那么将不会进入RunLoop，会直接结束</li>
<li>如果要切换Mode，只能退出Loop，再重新制定一个Mode进入</li>
</ul>


<h6>系统默认注册了5个Mode:</h6>

<ul>
<li><code>NSDefaultRunLoopMode</code>：App的默认Mode，通常主线程是在这个Mode下运行</li>
<li><code>UITrackingRunLoopMode</code>：界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响</li>
<li>UIInitializationRunLoopMode: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用</li>
<li>GSEventReceiveRunLoopMode: 接受系统事件的内部 Mode，通常用不到</li>
<li><code>NSRunLoopCommonModes</code>: 这是一个占位用的Mode，不是一种真正的Mode</li>
</ul>


<p>关于<code>NSRunLoopCommonModes</code>：</p>

<ul>
<li>一个Mode可以将自己标记为“Common”属性，每当 RunLoop 的内容发生变化时，RunLoop会对标记有“Common”属性的Mode进行相适应的切换，并同步Source/Observer/Timer</li>
<li>在主线程中，kCFRunLoopDefaultMode 和 UITrackingRunLoopMode这两个Mode都是被默认标记为“Common”属性的，从输出的主线程RunLoop可以查看。<br><img src="http://triplecc.github.io/images/Snip20150712_42.png" alt="“Common”属性" /><br>
－ 结合上面两点，当使用NSRunLoopCommonModes占位时，会表明使用标记为“Common”属性的Mode，在一定层度上，可以说是“拥有了两个Mode”，可以在这两个Mode中的其中任意一个进行工作</li>
</ul>


<h4><code>CFRunLoopTimerRef</code>说明：</h4>

<ul>
<li>CFRunLoopTimerRef是基于时间的触发器，它包含了一个时间长度和一个回调函数指针。当它加入到RunLoop时，RunLoop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调</li>
<li>CFRunLoopTimerRef大部分指的是NSTimer，它受RunLoop的Mode影响</li>
<li><p>由于NSTimer在RunLoop中处理，所以受其影响较大，有时可能会不准确。还有一种定时器是GCD定时器，它并不在RunLoop中，所以不受其影响，也就比较精确
接下来说明各种Mode下，NSTimer的工作情况：</p>

<h4>NSTimer的工作情况</h4></li>
<li><p>情况1</p>

<ul>
<li>在对创建的定时器进行模式修改前，scheduledTimerWithTimeInterval创建的定时器只在NSDefaultRunLoopMode模式下可以正常运行，当滚动UIScroolView时，模式转换成UITrackingRunLoopMode，定时器就失效了。</li>
<li>修改成NSRunLoopCommonModes后，定时器在两个模式下都可以正常运行</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建的定时器默认添加到当前的RunLoop中（没有就创建），而且是NSDefaultRunLoopMode模式</span>
</span><span class='line'><span class="bp">NSTimer</span> <span class="o">*</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSTimer</span> <span class="nl">scheduledTimerWithTimeInterval</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">target</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">run</span><span class="p">)</span> <span class="nl">userInfo</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">repeats</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 可以通过以下方法对模型进行修改</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">addTimer</span><span class="p">:</span><span class="n">timer</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSRunLoopCommonModes</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>情况2

<ul>
<li>timerWithTimeInterval创建的定时器并没有手动添加进RunLoop，所以需要手动进行添加。当添加为以下模式时，定时器只在UITrackingRunLoopMode模式下进行工作，也就是滑动UIScrollView时就会工作，停止滑动时就不工作</li>
<li>如果把UITrackingRunLoopMode换成NSDefaultRunLoopMode，那么效果就和情况1没修改Mode前的效果一样</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSTimer</span> <span class="o">*</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSTimer</span> <span class="nl">timerWithTimeInterval</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">target</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">run</span><span class="p">)</span> <span class="nl">userInfo</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">repeats</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在UITrackingRunLoopMode模式下定时器才会运行</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">addTimer</span><span class="p">:</span><span class="n">timer</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">UITrackingRunLoopMode</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>CFRunLoopSourceRef</code>说明：</p>

<h3>Source分类</h3>

<ul>
<li>按官方文档

<ul>
<li>Port-Based Sources</li>
<li>Custom Input Sources</li>
<li>Cocoa Perform Selector Sources</li>
</ul>
</li>
<li>按照函数调用栈

<ul>
<li>Source0：非基于Port的

<ul>
<li>Source0本身不能主动触发事件，只包含了一个回调函数指针</li>
</ul>
</li>
<li>Source1：基于Port的，通过内核和其他线程通信，接收、分发系统事件

<ul>
<li>包含了mach_port和一个回调函数指针，接收到相关消息后，会分发给Source0进行处理</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4><code>CFRunLoopObserverRef</code>说明：</h4>

<ul>
<li>CFRunLoopObserverRef是观察者，能够监听RunLoop的状态改变</li>
<li>能够监听的状态</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">CF_OPTIONS</span><span class="p">(</span><span class="n">CFOptionFlags</span><span class="p">,</span> <span class="n">CFRunLoopActivity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">kCFRunLoopEntry</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">),</span>        <span class="c1">// 进入RunLoop</span>
</span><span class='line'>        <span class="n">kCFRunLoopBeforeTimers</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">),</span> <span class="c1">//即将处理timer</span>
</span><span class='line'>        <span class="n">kCFRunLoopBeforeSources</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">),</span><span class="c1">//即将处理Sources</span>
</span><span class='line'>        <span class="n">kCFRunLoopBeforeWaiting</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">),</span><span class="c1">//即将进入休眠</span>
</span><span class='line'>        <span class="n">kCFRunLoopAfterWaiting</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">),</span> <span class="c1">//即将唤醒</span>
</span><span class='line'>        <span class="n">kCFRunLoopExit</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span><span class="p">),</span>         <span class="c1">//即将退出RunLoop</span>
</span><span class='line'>        <span class="n">kCFRunLoopAllActivities</span> <span class="o">=</span> <span class="mh">0x0FFFFFFFU</span><span class="c1">//所有活动</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加监听者步骤</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建监听着</span>
</span><span class='line'><span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span> <span class="o">=</span> <span class="n">CFRunLoopObserverCreateWithHandler</span><span class="p">(</span><span class="n">CFAllocatorGetDefault</span><span class="p">(),</span> <span class="n">kCFRunLoopBeforeTimers</span><span class="p">,</span> <span class="nb">YES</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span><span class="p">,</span> <span class="n">CFRunLoopActivity</span> <span class="n">activity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span> <span class="n">activity</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//    [[NSRunLoop currentRunLoop] getCFRunLoop]</span>
</span><span class='line'><span class="c1">// 向当前runloop添加监听者</span>
</span><span class='line'><span class="n">CFRunLoopAddObserver</span><span class="p">(</span><span class="n">CFRunLoopGetCurrent</span><span class="p">(),</span> <span class="n">observer</span><span class="p">,</span> <span class="n">kCFRunLoopDefaultMode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 释放内存</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">observer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>CF的内存管理（Core Foundation）：</h4>

<ul>
<li>1.凡是带有Create、Copy、Retain等字眼的函数，创建出来的对象，都需要在最后做一次release,比如CFRunLoopObserverCreate</li>
<li>2.release函数：CFRelease(对象);</li>
</ul>


<h3>自动释放池释放的时间和RunLoop的关系：</h3>

<ul>
<li>注意，这里的自动释放池指的是<code>主线程的自动释放池</code>，我们看不见它的创建和销毁。自己<code>手动创建@autoreleasepool {}</code>是<code>根据代码块来的</code>，<code>出了这个代码块就释放了</code>。</li>
<li> App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 <code>_wrapRunLoopWithAutoreleasePoolHandler()</code>。</li>
<li>第一个 Observer 监视的事件是 Entry(<code>即将进入Loop</code>)，其回调内会调用 _objc_autoreleasePoolPush() <code>创建自动释放池</code>。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。
<br><img src="http://triplecc.github.io/images/Snip20150713_5.png" alt="" /></li>
<li>第二个 Observer 监视了两个事件： BeforeWaiting(<code>准备进入休眠</code>) 时调用<em>objc_autoreleasePoolPop() 和 </em>objc_autoreleasePoolPush() <code>释放旧的池并创建新池</code>；Exit(<code>即将退出Loop</code>) 时调用 _objc_autoreleasePoolPop() 来<code>释放自动释放池</code>。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。
<br><img src="http://triplecc.github.io/images/Snip20150713_4.png" alt="" /></li>
<li>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</li>
<li>在<code>自己创建线程</code>时，需要<code>手动创建</code>自动释放池<code>AutoreleasePool</code></li>
</ul>


<p>综合上面，可以得到以下结论：<br>
<img src="http://triplecc.github.io/images/Snip20150713_12.png" alt="" /></p>

<h3>@autoreleasepool {}内部实现</h3>

<p>有以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看编译转换后的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* @autoreleasepool */</span> <span class="p">{</span> <span class="n">__AtAutoreleasePool</span> <span class="n">__autoreleasepool</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>__AtAutoreleasePool是什么呢？找到其定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__AtAutoreleasePool</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__AtAutoreleasePool</span><span class="p">()</span> <span class="p">{</span><span class="n">atautoreleasepoolobj</span> <span class="o">=</span> <span class="n">objc_autoreleasePoolPush</span><span class="p">();}</span>
</span><span class='line'>  <span class="o">~</span><span class="n">__AtAutoreleasePool</span><span class="p">()</span> <span class="p">{</span><span class="n">objc_autoreleasePoolPop</span><span class="p">(</span><span class="n">atautoreleasepoolobj</span><span class="p">);}</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span> <span class="n">atautoreleasepoolobj</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到__AtAutoreleasePool是一个类：</p>

<ul>
<li>其构造函数使用objc_autoreleasePoolPush创建了一个线程池，并保存给成员变量atautoreleasepoolobj。</li>
<li>其析构函数使用objc_autoreleasePoolPop销毁了线程池</li>
</ul>


<p>结合以上信息，main函数里面的__autoreleasepool是一个局部变量。当其创建时，会调用构造函数创建缓存池，出了{}代码块时，局部变量被销毁，调用其析构函数销毁缓存池。</p>

<h2>RunLoop实际应用</h2>

<h3>常驻线程</h3>

<p>当创建一个线程，并且希望它一直存在时，就需要使用到RunLoop，否则线程一执行完任务就会停止。
要向线程存在，需要有强指针引用他，其他的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 属性</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSThread</span> <span class="o">*</span><span class="kr">thread</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 创建线程</span>
</span><span class='line'><span class="n">_thread</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSThread</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">_thread</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesBegan:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 点击时使线程_thread执行test方法</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:</span><span class="n">_thread</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;__test__&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就单单以上代码，是不起效果的，因为线程没有RunLoop，执行完test后就停止了，无法再让其执行任务（强制start会崩溃）。<br>
通过在<code>子线程中给RunLoop添加监听者</code>，可以了解下<code>performSelector:onThread:</code>内部做的事情：</p>

<ul>
<li>调用performSelector:onThread: 时，实际上它会创建一个<code>Source0</code>加到<code>对应线程的RunLoop</code>里去，所以，如果对应的线程没有RunLoop，这个方法就会失效<br>
<img src="http://triplecc.github.io/images/Snip20150716_5.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 这句在主线程中调用</span>
</span><span class='line'><span class="c1">// _thread就是下面的线程</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">run</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:</span><span class="n">_thread</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>performSelecter:afterDelay:也是一样的内部操作方法，只是创建的<code>Timer</code>添加到<code>当前线程</code>的RunLoop中了<br>
<img src="http://triplecc.github.io/images/Snip20150716_6.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建RunLoop即将唤醒监听者</span>
</span><span class='line'><span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span> <span class="o">=</span> <span class="n">CFRunLoopObserverCreateWithHandler</span><span class="p">(</span><span class="n">CFAllocatorGetDefault</span><span class="p">(),</span> <span class="n">kCFRunLoopBeforeTimers</span><span class="p">,</span> <span class="nb">YES</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span><span class="p">,</span> <span class="n">CFRunLoopActivity</span> <span class="n">activity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 打印唤醒前的RunLoop</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld--%@&quot;</span><span class="p">,</span> <span class="n">activity</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 向当前runloop添加监听者</span>
</span><span class='line'><span class="n">CFRunLoopAddObserver</span><span class="p">(</span><span class="n">CFRunLoopGetCurrent</span><span class="p">(),</span> <span class="n">observer</span><span class="p">,</span> <span class="n">kCFRunLoopDefaultMode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 释放内存</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">observer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setView</span><span class="p">:)</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">afterDelay</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 使model不为空</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">addPort</span><span class="p">:[</span><span class="bp">NSPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>综合上面的解释，可以知道performSelector:onThread:没有起作用，是因为_thread线程内部没有RunLoop，所以需要在线程内部创建RunLoop。<br>
创建RunLoop并使对应线程成为常驻线程的常见方式有2:</p>

<h4>创建RunLoop并使对应线程成为常驻线程的常见方式</h4>

<ul>
<li>方式1

<ul>
<li>向创建的RunLoop添加NSPort（Sources），让Mode不为空，RunLoop能进入循环不会退出</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>     <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">addPort</span><span class="p">:[</span><span class="bp">NSPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方式2

<ul>
<li>让RunLoop一直尝试运行，判断Mode是否为空，不是为空就进入RunLoop循环</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>AFNetWorking</code>就使用到了常驻线程：</p>

<ul>
<li>创建常驻线程</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">networkRequestThreadEntryPoint:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">__unused</span> <span class="n">object</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSThread</span> <span class="n">currentThread</span><span class="p">]</span> <span class="nl">setName</span><span class="p">:</span><span class="s">@&quot;AFNetworking&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 创建RunLoop并向Mode添加NSMachPort，使RunLoop不会退出</span>
</span><span class='line'>        <span class="bp">NSRunLoop</span> <span class="o">*</span><span class="n">runLoop</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">runLoop</span> <span class="nl">addPort</span><span class="p">:[</span><span class="bp">NSMachPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">runLoop</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="bp">NSThread</span> <span class="o">*</span><span class="p">)</span><span class="n">networkRequestThread</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="bp">NSThread</span> <span class="o">*</span><span class="n">_networkRequestThread</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">oncePredicate</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">oncePredicate</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">_networkRequestThread</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSThread</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">networkRequestThreadEntryPoint</span><span class="p">:)</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_networkRequestThread</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_networkRequestThread</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用常驻线程</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">start</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">lock</span> <span class="n">lock</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="n">isCancelled</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">cancelConnection</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:[[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]</span> <span class="n">networkRequestThread</span><span class="p">]</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">modes</span><span class="p">:[</span><span class="nb">self</span><span class="p">.</span><span class="n">runLoopModes</span> <span class="n">allObjects</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="n">isReady</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">AFOperationExecutingState</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">operationDidStart</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:[[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]</span> <span class="n">networkRequestThread</span><span class="p">]</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">modes</span><span class="p">:[</span><span class="nb">self</span><span class="p">.</span><span class="n">runLoopModes</span> <span class="n">allObjects</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">lock</span> <span class="n">unlock</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>给子线程开启定时器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">_thread</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSThread</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">_thread</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 子线程添加定时器</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">subTimer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 默认创建RunLoop并向其model添加timer，所以后续只需要让RunLoop run起来即可</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSTimer</span> <span class="nl">scheduledTimerWithTimeInterval</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">target</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">run</span><span class="p">)</span> <span class="nl">userInfo</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">repeats</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 貌似source1不为空，source0就不为空</span>
</span><span class='line'><span class="c1">//    [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>让某些事件（行为、任务）在特定模式下执行</h3>

<p>比如图片的设置，在UIScrollView滚动的情况下，我不希望设置图片，等停止滚动了再设置图片，可以用以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 图片只在NSDefaultRunLoopMode模式下会进行设置显示</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageView</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setImage</span><span class="p">:)</span> <span class="nl">withObject</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;Snip20150712_39&quot;</span><span class="p">]</span> <span class="nl">afterDelay</span><span class="p">:</span><span class="mf">2.0</span> <span class="nl">inModes</span><span class="p">:</span><span class="l">@[</span><span class="n">NSDefaultRunLoopMode</span><span class="l">]</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>先设置任务在NSDefaultRunLoopMode模式在执行，这样，在滚动使RunLoop进入UITrackingRunLoopMode时，就不会进行图片的设置了。</p>

<h3>控制定时器在特定模式下执行</h3>

<p>上文的《<code>CFRunLoopTimerRef</code>说明：》中已经指出</p>

<h3>添加Observer监听RunLoop的状态</h3>

<p>监听点击事件的处理（在所有点击事件之前做一些事情）<br>
具体步骤在《<code>CFRunLoopObserverRef</code>说明：》中已写明</p>

<h1>GCD定时器</h1>

<p>注意：</p>

<ul>
<li>dispatch_source_t是个类，这点比较特殊</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//    dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, dispatch_get_main_queue());</span>
</span><span class='line'>    <span class="kt">dispatch_source_t</span> <span class="n">timer</span> <span class="o">=</span> <span class="n">dispatch_source_create</span><span class="p">(</span><span class="n">DISPATCH_SOURCE_TYPE_TIMER</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>    <span class="n">dispatch_source_set_timer</span><span class="p">(</span><span class="n">timer</span><span class="p">,</span> <span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">,</span> <span class="mi">0</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_source_set_event_handler</span><span class="p">(</span><span class="n">timer</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;__&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSThread</span> <span class="n">currentThread</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="bp">NSInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">count</span><span class="o">++</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 为什么dispatch_cancel不能用_timer?/</span>
</span><span class='line'>            <span class="c1">// Controlling expression type &#39;__strong dispatch_source_t&#39; (aka &#39;NSObject&lt;OS_dispatch_source&gt; *__strong&#39;) not compatible with any generic association type</span>
</span><span class='line'>            <span class="c1">// 类型错误，可能dispatch_cancel是宏定义，需要的就是方法调用，而不是变量</span>
</span><span class='line'><span class="c1">//            dispatch_cancel(self.timer);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">dispatch_source_cancel</span><span class="p">(</span><span class="n">_timer</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="c1">// 定时器默认是停止的，需要手动恢复</span>
</span><span class='line'>    <span class="n">dispatch_resume</span><span class="p">(</span><span class="n">timer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 需要一个强引用保证timer不被释放</span>
</span><span class='line'>    <span class="n">_timer</span> <span class="o">=</span> <span class="n">timer</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UINavigationBar属性小结及返回按钮更改]]></title>
    <link href="http://triplecc.github.io/blog/2015-04-27-uinavigationbarshu-xing-xiao-jie-ji-fan-hui-an-niu-geng-gai/"/>
    <updated>2015-04-27T20:17:32+08:00</updated>
    <id>http://triplecc.github.io/blog/uinavigationbarshu-xing-xiao-jie-ji-fan-hui-an-niu-geng-gai</id>
    <content type="html"><![CDATA[<h2>UINavigationBar属性</h2>

<ul>
<li>如果想统一设置，可以通过以下方法，获取当前类下的所有对象的导航条，然后进行设置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="bp">UINavigationBar</span> <span class="nl">appearanceWhenContainedIn</span><span class="p">:</span><span class="nb">self</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>背景图片<br>
<img src="http://triplecc.github.io/images/Snip20150724_4.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="c1">// barMetrics需要设置成UIBarMetricsDefault</span>
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setBackgroundimages</span><span class="p">:(</span><span class="n">UIimages</span> <span class="o">*</span><span class="p">)</span><span class="n">backgroundimages</span> <span class="nl">forBarMetrics</span><span class="p">:(</span><span class="n">UIBarMetrics</span><span class="p">)</span><span class="n">barMetrics</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>背景阴影图片<br>
<img src="http://triplecc.github.io/images/Snip20150724_5.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">retain</span><span class="p">)</span> <span class="n">UIimages</span> <span class="o">*</span><span class="n">shadowimages</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>背景颜色<br>
<img src="http://triplecc.github.io/images/Snip20150724_6.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">retain</span><span class="p">)</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">barTintColor</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>标题文字属性<br>
<img src="http://triplecc.github.io/images/Snip20150724_10.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">copy</span><span class="p">)</span> <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">titleTextAttributes</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>系统类型按钮文字颜色<br>
<img src="http://triplecc.github.io/images/Snip20150724_9.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">retain</span><span class="p">)</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">tintColor</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>返回按钮图片<br>
<img src="http://triplecc.github.io/images/Snip20150724_11.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="c1">// 必须要两个都设置，并且图片要设置成不渲染</span>
</span><span class='line'>  <span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">retain</span><span class="p">)</span> <span class="n">UIimages</span> <span class="o">*</span><span class="n">backIndicatorimages</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">retain</span><span class="p">)</span> <span class="n">UIimages</span> <span class="o">*</span><span class="n">backIndicatorTransitionMaskimages</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>标题垂直偏移<br>
<img src="http://triplecc.github.io/images/Snip20150724_12.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setTitleVerticalPositionAdjustment</span><span class="p">:(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">adjustment</span> <span class="nl">forBarMetrics</span><span class="p">:(</span><span class="n">UIBarMetrics</span><span class="p">)</span><span class="n">barMetrics</span>
</span></code></pre></td></tr></table></div></figure>


<h2>返回按钮更改</h2>

<p>系统原装效果:<br>
<img src="http://triplecc.github.io/images/Snip20150724_13.png" alt="" /><br></p>

<p>如果有以下需求:</p>

<ul>
<li>去除上面返回按钮上“我是标题”字样，并设置返回图片为白色</li>
</ul>


<h6>分析</h6>

<ul>
<li>图片修改

<ul>
<li>方式1：设置返回图片颜色</li>
<li>方式2：直接设置返回图片</li>
<li>方式3：使用按钮覆盖返回图片(这种方式会使返回箭头图片和左边距离加大，但可以用取巧的方式调整)</li>
</ul>
</li>
<li>文字修改

<ul>
<li>方式1：设置控制器navigationItem的backBarButtonItem显示文字为""</li>
<li>方式2：设置返回按钮文字偏移量，使其移出屏幕</li>
<li>方式3：采用控制器navigationItem的leftBarButtonItem进行覆盖</li>
</ul>
</li>
</ul>


<h6>解决</h6>

<p>综合以上说明，这里给出三种方式(都是针对的自定义UINavigationController)：</p>

<ul>
<li>方式1:在<code>-pushViewController:animated:</code>中设置文字 ，在<code>+initialize</code>方法中设置返回图片或改变返回图片颜色

<ul>
<li>注意导航栏对图片的渲染</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">pushViewController</span><span class="p">:(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">backBarButtonItem</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;&quot;</span> <span class="nl">style</span><span class="p">:</span><span class="n">UIBarButtonItemStyleDone</span> <span class="nl">target</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">action</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取特定类的所有导航条</span>
</span><span class='line'><span class="bp">UINavigationBar</span> <span class="o">*</span><span class="n">navigationBar</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UINavigationBar</span> <span class="nl">appearanceWhenContainedIn</span><span class="p">:</span><span class="nb">self</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 方式1：使用自己的图片替换原来的返回图片</span>
</span><span class='line'><span class="n">navigationBar</span><span class="p">.</span><span class="n">backIndicatorImage</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;NavBack&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">navigationBar</span><span class="p">.</span><span class="n">backIndicatorTransitionMaskImage</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;NavBack&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 方式2：设置返回图片颜色</span>
</span><span class='line'><span class="n">navigationBar</span><span class="p">.</span><span class="n">tintColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方式2:在<code>+initialize</code>方法中设置所有返回按钮文字的偏移量，其他设置和方式1一致</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="p">[[</span><span class="bp">UIBarButtonItem</span> <span class="n">appearance</span><span class="p">]</span> <span class="nl">setBackButtonTitlePositionAdjustment</span><span class="p">:</span><span class="n">UIOffsetMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span> <span class="nl">forBarMetrics</span><span class="p">:</span><span class="n">UIBarMetricsDefault</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方式3.重写<code>-pushViewController:animated:</code>方法,使用控制器的<code>navigationItem的leftBarButtonItem</code>覆盖返回按钮

<ul>
<li>需要判断是否为根控制器，如果是根控制器就不添加

<ul>
<li>导航控制器的<code>viewControllers.count</code>不为0即表示传入的为非根控制器</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pushViewController:</span><span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">viewControllers</span><span class="p">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">leftBarButtonItem</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;NavBack&quot;</span><span class="p">]</span> <span class="nl">style</span><span class="p">:</span><span class="n">UIBarButtonItemStyleDone</span> <span class="nl">target</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">back</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">super</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">back</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">popViewControllerAnimated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>方案对比</h6>

<ul>
<li>方案1和方案2改动较小，对系统自带的返回功能无影响。<br></li>
<li>方式3灵活性最高，但是会<code>使系统的滑动返回失效</code>，需要自己实现，具体实现参照<a href="https://github.com/forkingdog/FDFullscreenPopGesture">forkingdog全屏手势分类</a><br></li>
<li>方式3还会使按钮更加偏向右边：</li>
</ul>


<p><img src="http://triplecc.github.io/images/Snip20150722_10.png" alt="" /><br>
通过以下方式可以使按钮向左边靠：
<img src="http://triplecc.github.io/images/Snip20150722_11.png" alt="" /><br>
- 采用customView，<code>添加自己定义的UIButton</code><br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// 返回按钮内容左靠</span>
</span><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">contentHorizontalAlignment</span> <span class="o">=</span> <span class="n">UIControlContentHorizontalAlignmentLeft</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 让返回按钮内容继续向左边偏移10</span>
</span><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">contentEdgeInsets</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">viewController</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">leftBarButtonItem</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCustomView</span><span class="p">:</span><span class="n">button</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime应用之关联对象和MethodSwizzling]]></title>
    <link href="http://triplecc.github.io/blog/2015-04-10-runtimeying-yong-zhi-guan-lian-dui-xiang-he-methodswizzling/"/>
    <updated>2015-04-10T14:53:13+08:00</updated>
    <id>http://triplecc.github.io/blog/runtimeying-yong-zhi-guan-lian-dui-xiang-he-methodswizzling</id>
    <content type="html"><![CDATA[<h1>UIView-FDCollapsibleConstraints</h1>

<h2>框架使用效果</h2>

<p><img src="http://triplecc.github.io/images/screenshot0.gif" alt="" /><br>
<img src="http://triplecc.github.io/images/screenshot1.gif" alt="" /><br></p>

<h2>源代码解析</h2>

<ul>
<li><p>实现思路</p>

<ul>
<li><code>将需要和view关联且需要动态修改的约束添加进一个特定的数组里面</code></li>
<li><code>根据view的内容是否为nil，对特定数组中的约束值进行统一设置</code></li>
</ul>
</li>
<li><p>头文件</p>

<ul>
<li><code>IBOutletCollection</code>表示xib中的相同的控件连接到一个数组中（<a href="http://southpeak.github.io/blog/2015/05/10/ioszhi-shi-xiao-ji-di-%5B%3F%5D-qi-2015-dot-05-dot-10/">介绍链接</a>）

<ul>
<li>这里表示将NSLayoutConstraint控件添加到fd_collapsibleConstraints数组中</li>
<li>IBOutletCollectionh和IBOutlet操作方式一样，需要<code>在IB中进行相应的拖拽</code>才能把对应的控件加到数组中（<code>UIView-&gt;NSLayoutConstraint</code>）</li>
<li>设置了IBOutletCollection之后，当从storybooard或者xib中加载时，根据<code>KVC原理</code>，<code>最终会</code>调用fd_collapsibleConstraints的setter方法，然后就可以在其setter方法中做相应的操作了</li>
</ul>
</li>
<li><code>IBInspectable</code> 表示这个属性可以在IB中更改，如下图
<img src="http://triplecc.github.io/images/Snip20150704_1.png" alt="" />

<ul>
<li>还有一个这里没用，<code>IB_DESIGNABLE</code>，这个表示可以在IB中实时显示修改的效果</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">UIView</span> <span class="nl">(FDCollapsibleConstraints)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Assigning this property immediately disables the view&#39;s collapsible constraints&#39;</span>
</span><span class='line'><span class="c1">/// by setting their constants to zero.</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">fd_collapsed</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Specify constraints to be affected by &quot;fd_collapsed&quot; property by connecting in</span>
</span><span class='line'><span class="c1">/// Interface Builder.</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="n">IBOutletCollection</span><span class="p">(</span><span class="bp">NSLayoutConstraint</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">fd_collapsibleConstraints</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="bp">UIView</span> <span class="nl">(FDAutomaticallyCollapseByIntrinsicContentSize)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Enable to automatically collapse constraints in &quot;fd_collapsibleConstraints&quot; when</span>
</span><span class='line'><span class="c1">/// you set or indirectly set this view&#39;s &quot;intrinsicContentSize&quot; to {0, 0} or absent.</span>
</span><span class='line'><span class="c1">///</span>
</span><span class='line'><span class="c1">/// For example:</span>
</span><span class='line'><span class="c1">///  imagesView.images = nil;</span>
</span><span class='line'><span class="c1">///  label.text = nil, label.text = @&quot;&quot;;</span>
</span><span class='line'><span class="c1">///</span>
</span><span class='line'><span class="c1">/// &quot;NO&quot; by default, you may enable it by codes.</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">fd_autoCollapse</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// &quot;IBInspectable&quot; property, more friendly to Interface Builder.</span>
</span><span class='line'><span class="c1">/// You gonna find this attribute in &quot;Attribute Inspector&quot;, toggle &quot;On&quot; to enable.</span>
</span><span class='line'><span class="c1">/// Why not a &quot;fd_&quot; prefix? Xcode Attribute Inspector will clip it like a shit.</span>
</span><span class='line'><span class="c1">/// You should not assgin this property directly by code, use &quot;fd_autoCollapse&quot; instead.</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">,</span> <span class="k">getter</span><span class="o">=</span><span class="n">fd_autoCollapse</span><span class="p">)</span> <span class="n">IBInspectable</span> <span class="kt">BOOL</span> <span class="n">autoCollapse</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>_FDOriginalConstantStorage

<ul>
<li>在这个分类中，给NSLayoutConstraint约束关联一个存储<code>约束初始值</code>的浮点数，以便在修改约束值后，可以还原

<ul>
<li>objc_setAssociatedObject 设置关联对象</li>
<li>objc_getAssociatedObject 获取关联对象</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">/// A stored property extension for NSLayoutConstraint&#39;s original constant.</span>
</span><span class='line'><span class="k">@implementation</span> <span class="bp">NSLayoutConstraint</span> <span class="nl">(_FDOriginalConstantStorage)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 给NSLayoutConstraint关联一个初始约束值</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFd_originalConstant:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">originalConstant</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">fd_originalConstant</span><span class="p">),</span> <span class="l">@(</span><span class="n">originalConstant</span><span class="l">)</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">fd_originalConstant</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#if CGFLOAT_IS_DOUBLE</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">)</span> <span class="n">doubleValue</span><span class="p">];</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">)</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>FDCollapsibleConstraints

<ul>
<li>实现fd_collapsibleConstraints属性的setter和getter方法 (<code>关联一个存储约束的对象</code>)

<ul>
<li>在<code>getter方法中创建关联对象constraints</code>（和<code>懒加载</code>的方式类似，不过不是创建成员变量）</li>
<li>在<code>setter方法中设置约束的初始值</code>，并<code>添加进关联对象constraints</code>中，方便统一操作</li>
</ul>
</li>
<li>从IB中关联的约束，根据KVC地层原理，最终会调用setFd_collapsibleConstraints:方法，也就是这一步不需要手动调用，系统自己完成（在awakeFromNib之前完成IB这些值的映射）</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="bp">NSMutableArray</span> <span class="o">*</span><span class="p">)</span><span class="n">fd_collapsibleConstraints</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 获取对象的所有约束关联值</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">constraints</span> <span class="o">=</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">constraints</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">constraints</span> <span class="o">=</span> <span class="l">@[]</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// 设置对象的所有约束关联值</span>
</span><span class='line'>        <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">constraints</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">constraints</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// IBOutletCollection表示xib中的相同的控件连接到一个数组中</span>
</span><span class='line'>  <span class="c1">// 因为设置了IBOutletCollection，所以从xib使用KVC加载时，最终会调用set方法</span>
</span><span class='line'>  <span class="c1">// 然后就来到了这个方法</span>
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setFd_collapsibleConstraints</span><span class="p">:(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">fd_collapsibleConstraints</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Hook assignments to our custom `fd_collapsibleConstraints` property.</span>
</span><span class='line'>    <span class="c1">// 返回保存原始约束的数组，使用关联对象</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">constraints</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSMutableArray</span> <span class="o">*</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">fd_collapsibleConstraints</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">fd_collapsibleConstraints</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraint</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Store original constant value</span>
</span><span class='line'>        <span class="c1">// 保存原始的约束</span>
</span><span class='line'>        <span class="n">constraint</span><span class="p">.</span><span class="n">fd_originalConstant</span> <span class="o">=</span> <span class="n">constraint</span><span class="p">.</span><span class="n">constant</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">constraints</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">constraint</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用Method Swizzling交换自己的和系统的-setValue:forKey:方法

<ul>
<li>实现自己的KVC的-setValue:forKey:方法</li>
<li>Method Swizzling的完全体</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'><span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="k">class</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="k">class</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">origionSel</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">viewDidLoad</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">swizzlingSel</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">tpc_viewDidLoad</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//    IMP origionMethod = class_getMethodImplementation(class, origionSel);</span>
</span><span class='line'>    <span class="c1">//    IMP swizzlingMethod = class_getMethodImplementation(class, swizzlingSel);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">origionMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">origionSel</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">swizzlingMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">swizzlingSel</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">hasAdded</span> <span class="o">=</span> <span class="n">class_addMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">origionSel</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">swizzlingMethod</span><span class="p">),</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">swizzlingMethod</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">hasAdded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">class_replaceMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">swizzlingSel</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">origionMethod</span><span class="p">),</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">origionMethod</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">origionMethod</span><span class="p">,</span> <span class="n">swizzlingMethod</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这一步作者的意思是这种类型的IBOutlet不会触发其setter方法，但是经过测试，注释掉这段代码后，系统还是自己触发了setter方法，说明这种IBOutlet还是可以触发setter方法的。所以，即使没有这一段代码，应该也是可行的<br>
<img src="http://triplecc.github.io/images/Snip20150704_8.png" alt="" /><br></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - Hacking KVC</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// load先从原类,再调用分类的开始调用</span>
</span><span class='line'><span class="c1">// 也就是调用的顺序是</span>
</span><span class='line'><span class="c1">// 原类</span>
</span><span class='line'><span class="c1">// FDCollapsibleConstraints</span>
</span><span class='line'><span class="c1">// FDAutomaticallyCollapseByIntrinsicContentSize</span>
</span><span class='line'><span class="c1">// 所以并不冲突</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Swizzle setValue:forKey: to intercept assignments to `fd_collapsibleConstraints`</span>
</span><span class='line'>  <span class="c1">// from Interface Builder. We should not do so by overriding setvalue:forKey:</span>
</span><span class='line'>  <span class="c1">// as the primary class implementation would be bypassed.</span>
</span><span class='line'>  <span class="kt">SEL</span> <span class="n">originalSelector</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">setValue</span><span class="p">:</span><span class="nl">forKey</span><span class="p">:);</span>
</span><span class='line'>  <span class="kt">SEL</span> <span class="n">swizzledSelector</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">fd_setValue</span><span class="p">:</span><span class="nl">forKey</span><span class="p">:);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">Class</span> <span class="k">class</span> <span class="o">=</span> <span class="bp">UIView</span><span class="p">.</span><span class="k">class</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Method</span> <span class="n">originalMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">originalSelector</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Method</span> <span class="n">swizzledMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">swizzledSelector</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">originalMethod</span><span class="p">,</span> <span class="n">swizzledMethod</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// xib也就是xml，再加载进行decode时，会调用setValue:forKey:，把他的方法替换成自身的，然后获取添加的约束</span>
</span><span class='line'><span class="c1">// 不使用重写这个KVC方法的方式，是因为这样会覆盖view本身在这个方法中进行的操作</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">fd_setValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">value</span> <span class="nf">forKey:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">key</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="bp">NSString</span> <span class="o">*</span><span class="n">injectedKey</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithUTF8String</span><span class="p">:</span><span class="n">sel_getName</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">fd_collapsibleConstraints</span><span class="p">))];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">key</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">injectedKey</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// This kind of IBOutlet won&#39;t trigger property&#39;s setter, so we forward it.</span>
</span><span class='line'>      <span class="c1">// 作者的意思是，IBOutletCollection不会触发对应属性的setter方法，所以这里执行手动调用</span>
</span><span class='line'>      <span class="nb">self</span><span class="p">.</span><span class="n">fd_collapsibleConstraints</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Forward the rest of KVC&#39;s to original implementation.</span>
</span><span class='line'>      <span class="p">[</span><span class="nb">self</span> <span class="nl">fd_setValue</span><span class="p">:</span><span class="n">value</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置对应的约束值

<ul>
<li>注意，这里只要传入的是YES，那么，这个UIView对应的存入<code>constraints关联对象的所有约束</code>，都会置为0</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - Dynamic Properties</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFd_collapsed:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">collapsed</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">fd_collapsibleConstraints</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span>
</span><span class='line'> <span class="o">^</span><span class="p">(</span><span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraint</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">collapsed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="c1">// 如果view的内容为nil，则将view关联的constraints对象所有值设置为0</span>
</span><span class='line'>         <span class="n">constraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 如果view的内容不为nil，则将view关联的constraints对象所有值返回成原值</span>
</span><span class='line'>         <span class="n">constraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">constraint</span><span class="p">.</span><span class="n">fd_originalConstant</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'> <span class="p">}];</span>
</span><span class='line'>    <span class="c1">// 设置fd_collapsed关联对象，供自动collapsed使用</span>
</span><span class='line'>  <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">fd_collapsed</span><span class="p">),</span> <span class="l">@(</span><span class="n">collapsed</span><span class="l">)</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">fd_collapsedFDAutomaticallyCollapseByIntrinsicContentSize</span><span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="p">[</span><span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">)</span> <span class="n">boolValue</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>FDAutomaticallyCollapseByIntrinsicContentSize

<ul>
<li>使用Method Swizzling交换自己的和系统的-fd_updateConstraints方法</li>
<li>[self fd_updateConstraints]调用的是self的updateConstraints方法，fd_updateConstraints和updateConstraints方法的Method（映射SEL和IMP）已经调换了</li>
<li><code>intrinsicContentSize(控件的内置大小)</code>默认为UIViewNoIntrinsicMetric，当<code>控件中没有内容时</code>，调用intrinsicContentSize返回的即为<code>默认值</code>（<a href="http://www.mgenware.com/blog/?p=491">介绍链接</a>）</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="cp">#pragma mark - Hacking &quot;-updateConstraints&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">load</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Swizzle to hack &quot;-updateConstraints&quot; method</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">originalSelector</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">updateConstraints</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">swizzledSelector</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">fd_updateConstraints</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">Class</span> <span class="k">class</span> <span class="o">=</span> <span class="bp">UIView</span><span class="p">.</span><span class="k">class</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">originalMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">originalSelector</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">swizzledMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">swizzledSelector</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">originalMethod</span><span class="p">,</span> <span class="n">swizzledMethod</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">fd_updateConstraints</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Call primary method&#39;s implementation</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">fd_updateConstraints</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">fd_autoCollapse</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="p">.</span><span class="n">fd_collapsibleConstraints</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// &quot;Absent&quot; means this view doesn&#39;t have an intrinsic content size, {-1, -1} actually.</span>
</span><span class='line'>        <span class="k">const</span> <span class="bp">CGSize</span> <span class="n">absentIntrinsicContentSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">UIViewNoIntrinsicMetric</span><span class="p">,</span> <span class="n">UIViewNoIntrinsicMetric</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 当设置控件显示内容为nil时，计算出来的contentSize和上面的相等</span>
</span><span class='line'>        <span class="c1">// Calculated intrinsic content size</span>
</span><span class='line'>        <span class="k">const</span> <span class="bp">CGSize</span> <span class="n">contentSize</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">intrinsicContentSize</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// When this view doesn&#39;t have one, or has no intrinsic content size after calculating,</span>
</span><span class='line'>        <span class="c1">// it going to be collapsed.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">CGSizeEqualToSize</span><span class="p">(</span><span class="n">contentSize</span><span class="p">,</span> <span class="n">absentIntrinsicContentSize</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">CGSizeEqualToSize</span><span class="p">(</span><span class="n">contentSize</span><span class="p">,</span> <span class="n">CGSizeZero</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 当控件没有内容时，则设置控件关联对象constraints的所有约束值为0</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">fd_collapsed</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 当控件有内容时，则设置控件关联对象constraints的所有约束值返回为原值</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">fd_collapsed</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置一些动态属性（关联对象）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="cp">#pragma mark - Dynamic Properties</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">fd_autoCollapse</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">)</span> <span class="n">boolValue</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setFd_autoCollapse</span><span class="p">:(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">autoCollapse</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">fd_autoCollapse</span><span class="p">),</span> <span class="l">@(</span><span class="n">autoCollapse</span><span class="l">)</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setAutoCollapse</span><span class="p">:(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">collapse</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Just forwarding</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">fd_autoCollapse</span> <span class="o">=</span> <span class="n">collapse</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[静态分析不准确的情况]]></title>
    <link href="http://triplecc.github.io/blog/2015-03-02-jing-tai-fen-xi-bu-zhun-que-de-qing-kuang/"/>
    <updated>2015-03-02T09:52:34+08:00</updated>
    <id>http://triplecc.github.io/blog/jing-tai-fen-xi-bu-zhun-que-de-qing-kuang</id>
    <content type="html"><![CDATA[<p>在MRC的前提下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSObject</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">a</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">a</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">a</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 静态分析会在这里显示内存泄漏，但是实际上综合上下文是没有泄漏的</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过大部分情况下还是比较准确的</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block技巧与底层解析]]></title>
    <link href="http://triplecc.github.io/blog/2015-02-10-blockji-qiao-yu-di-ceng-jie-xi/"/>
    <updated>2015-02-10T20:17:10+08:00</updated>
    <id>http://triplecc.github.io/blog/blockji-qiao-yu-di-ceng-jie-xi</id>
    <content type="html"><![CDATA[<h1>目录</h1>

<ul>
<li>Block底层解析

<ul>
<li>什么是block？

<ul>
<li>block编译转换结构</li>
<li>block实际结构</li>
</ul>
</li>
<li>block的类型

<ul>
<li>NSConcreteGlobalBlock和NSConcreteStackBlock</li>
<li>NSConcreteMallocBlock</li>
</ul>
</li>
<li>捕捉变量对block结构的影响

<ul>
<li>局部变量</li>
<li>全局变量</li>
<li>局部静态变量</li>
<li>__block修饰的变量</li>
<li>self隐式循环引用</li>
</ul>
</li>
<li>不同类型block的复制

<ul>
<li>栈block</li>
<li>堆block</li>
<li>全局block</li>
</ul>
</li>
<li>block辅助函数

<ul>
<li>__block修饰的基本类型的辅助函数</li>
<li>对象的辅助函数</li>
</ul>
</li>
<li>ARC中block的工作

<ul>
<li>block试验</li>
<li>block作为参数传递</li>
<li>block作为返回值</li>
<li>block属性</li>
</ul>
</li>
</ul>
</li>
<li>参考博文</li>
</ul>


<h1>Block底层解析</h1>

<p>最近看了一些block的资料，并动手做了一些实践，摘录并添加了一些结论。</p>

<h2>什么是block？</h2>

<p>首先，看一个极简的block：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">^</span><span class="p">{</span> <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>block编译转换结构</h6>

<p>对其执行<code>clang -rewrite-objc</code>编译转换成C++实现，得到以下代码：<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__block_impl</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">FuncPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">)};</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* @autoreleasepool */</span> <span class="p">{</span> <span class="n">__AtAutoreleasePool</span> <span class="n">__autoreleasepool</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不难看出其中的<code>__main_block_impl_0</code>就是block的一个C++的实现(最后面的<code>_0</code>代表是main中的第几个block)，也就是说也是一个<code>结构体</code>。<br>
其中<code>__block_impl</code>的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__block_impl</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Flags</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Reserved</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">FuncPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>其结构体成员如下：</p>

<ul>
<li>isa，指向所属类的指针，也就是block的类型</li>
<li>flags，标志变量，在实现block的内部操作时会用到</li>
<li>Reserved，保留变量</li>
<li>FuncPtr，block执行时调用的函数指针
可以看出，它包含了isa指针（包含isa指针的皆为对象），也就是说block也是一个<code>对象</code>(runtime里面，对象和类都是用结构体表示)。<br></li>
</ul>


<p><code>__main_block_desc_0</code>的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">)};</span>
</span></code></pre></td></tr></table></div></figure>


<p>其结构成员含义如下：</p>

<ul>
<li>reserved：保留字段</li>
<li>Block_size：block大小(sizeof(struct __main_block_impl_0))</li>
</ul>


<p>以上代码在定义<code>__main_block_desc_0</code>结构体时，同时创建了<code>__main_block_desc_0_DATA</code>，并给它赋值，以供在<code>main</code>函数中对<code>__main_block_impl_0</code>进行初始化。
<code>__main_block_impl_0</code>定义了显式的构造函数，其函数体如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，</p>

<ul>
<li><code>__main_block_impl_0</code>的<code>isa</code>指针指向了<code>_NSConcreteStackBlock</code>，</li>
<li>从<code>main</code>函数中看， <code>__main_block_impl_0</code>的<code>FuncPtr</code>指向了函数<code>__main_block_func_0</code></li>
<li><code>__main_block_impl_0</code>的<code>Desc</code>也指向了定义<code>__main_block_desc_0</code>时就创建的<code>__main_block_desc_0_DATA</code>，其中纪录了block结构体大小等信息。</li>
</ul>


<p>以上就是根据编译转换的结果，对一个简单block的解析，后面会将block操作<code>不同类型的外部变量</code>，对block结构的影响进行相应的说明。<br></p>

<h6>block实际结构</h6>

<p>接下来观察下<code>Block_private.h</code>文件中对block的相关结构体的真实定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* Revised new layout. */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Block_descriptor</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="k">copy</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Block_layout</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">invoke</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_descriptor</span> <span class="o">*</span><span class="n">descriptor</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* Imported variables. */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了上文对编译转换的分析，这里只针对略微不同的成员进行分析：</p>

<ul>
<li>invoke，同上文的FuncPtr，block执行时调用的函数指针，block定义时内部的执行代码都在这个函数中<br></li>
<li>Block_descriptor，block的详细描述<br>

<ul>
<li>copy/dispose，辅助拷贝/销毁函数，处理block范围外的变量时使用</li>
</ul>
</li>
</ul>


<p>总体来说，block就是一个里面存储了指向<code>函数体中包含定义block时的代码块</code>的函数指针，以及<code>block外部上下文</code>变量等信息的结构体。</p>

<h2>block的类型</h2>

<p>block的常见类型有3种：</p>

<ul>
<li>_NSConcreteGlobalBlock（全局）</li>
<li>_NSConcreteStackBlock（栈）</li>
<li>_NSConcreteMallocBlock（堆）</li>
</ul>


<p>附上APUE的进程虚拟内存段分布图：<br>
<img src="http://triplecc.github.io/images/Snip20150720_3.png" alt="" /></p>

<p>其中前2种在<code>Block.h</code>种声明，后1种在<code>Block_private.h</code>中声明，所以最后1种基本不会在源码中出现。<br>
由于无法直接创建<code>_NSConcreteMallocBlock</code>类型的block，所以这里只对前面2种进行手动创建分析，最后1种通过源代码分析。<br></p>

<h6>NSConcreteGlobalBlock和NSConcreteStackBlock</h6>

<p>首先，根据前面两种类型，编写以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">globalBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">stackBlock1</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对其进行编译转换后得到以下缩略代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// globalBlock</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__globalBlock_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__globalBlock_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__globalBlock_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__globalBlock_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteGlobalBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// stackBlock</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* @autoreleasepool */</span> <span class="p">{</span> <span class="n">__AtAutoreleasePool</span> <span class="n">__autoreleasepool</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">stackBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出<code>globalBlock</code>的isa指向了<code>_NSConcreteGlobalBlock</code>，即在全局区域创建，编译时就已经确定了，位于上图中的代码段；<code>stackBlock</code>的isa指向了<code>_NSConcreteStackBlock</code>，即在栈区创建。<br></p>

<h6>NSConcreteMallocBlock</h6>

<p>接下来是在堆中的block，堆中的block无法直接创建，其需要由<code>_NSConcreteStackBlock</code>类型的block拷贝而来(也就是说<code>block需要执行copy之后才能存放到堆中</code>)。由于block的拷贝最终都会调用<code>_Block_copy_internal</code>函数，所以观察这个函数就可以知道堆中block是如何被创建的了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">_Block_copy_internal</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>    <span class="n">aBlock</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>    <span class="c1">// Its a stack block.  Make a copy.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isGC</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 申请block的堆内存</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">)</span> <span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// 拷贝栈中block到刚申请的堆内存中</span>
</span><span class='line'>        <span class="n">memmove</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">aBlock</span><span class="p">,</span> <span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span> <span class="c1">// bitcopy first</span>
</span><span class='line'>        <span class="c1">// reset refcount</span>
</span><span class='line'>        <span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">);</span>    <span class="c1">// XXX not needed</span>
</span><span class='line'>        <span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">BLOCK_NEEDS_FREE</span> <span class="o">|</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// 改变isa指向_NSConcreteMallocBlock，即堆block类型</span>
</span><span class='line'>        <span class="n">result</span><span class="o">-&gt;</span><span class="n">isa</span> <span class="o">=</span> <span class="n">_NSConcreteMallocBlock</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_HAS_COPY_DISPOSE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//printf(&quot;calling block copy helper %p(%p, %p)...\n&quot;, aBlock-&gt;descriptor-&gt;copy, result, aBlock);</span>
</span><span class='line'>            <span class="p">(</span><span class="o">*</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="k">copy</span><span class="p">)(</span><span class="n">result</span><span class="p">,</span> <span class="n">aBlock</span><span class="p">);</span> <span class="c1">// do fixup</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从以上代码以及注释可以很清楚的看出，函数通过<code>memmove</code>将栈中的block的内容拷贝到了堆中，并使isa指向了<code>_NSConcreteMallocBlock</code>。<br>
block主要的一些学问就出在栈中block向堆中block的转移过程中了。</p>

<h2>捕捉变量对block结构的影响</h2>

<p>接下来会编译转换捕捉不同变量类型的block，以对比它们的区别。</p>

<h6>局部变量</h6>

<p>前：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="o">^</span><span class="p">{</span><span class="n">a</span><span class="p">;};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// a(_a)是构造函数的参数列表初始化形式，相当于a = _a。从_I_Person_test看，传入的就是a</span>
</span><span class='line'>  <span class="n">__Person__test_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">a</span><span class="p">(</span><span class="n">_a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__Person__test_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">;</span> <span class="c1">// bound by copy</span>
</span><span class='line'><span class="n">a</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__Person__test_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="p">)};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_I_Person_test</span><span class="p">(</span><span class="n">Person</span> <span class="o">*</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__Person__test_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__Person__test_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__Person__test_block_desc_0_DATA</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，block相对于文章开头增加了一个int类型的成员变量，他就是用来存储外部变量a的。可以看出，这次拷贝只是一次<code>值传递</code>。并且当我们想在block中进行以下操作时，将会发生错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">^</span><span class="p">{</span><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;};</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译器会提示<img src="http://triplecc.github.io/images/Snip20150720_1.png" alt="" />。因为_I_Person_test函数中的a和<strong>Person</strong>test_block_func_0函数中的a并没有在同一个作用域，所以在block对a进行赋值是没有意义的，所以编译器给出了错误。我们可以通过地址传递来消除以上错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 利用指针p存储a的地址</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="c1">// 通过a的地址设置a的值</span>
</span><span class='line'>        <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是变量a的生命周期是和方法test的栈相关联的，当test运行结束，栈随之销毁，那么变量a就会被销毁，p也就成为了野指针。如果block是作为参数或者返回值，这些类型都是跨栈的，也就是说再次调用会造成野指针错误。</p>

<h6>全局变量</h6>

<p>前：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 全局静态</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 全局</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__Person__test_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__Person__test_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__Person__test_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="p">)};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_I_Person_test</span><span class="p">(</span><span class="n">Person</span> <span class="o">*</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__Person__test_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__Person__test_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__Person__test_block_desc_0_DATA</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，因为全局变量都是在<code>静态数据存储区</code>，在程序结束前不会被销毁，所以block直接访问了对应的变量，而没有在<strong>Person</strong>test_block_impl_0结构体中给变量预留位置。</p>

<h6>局部静态变量</h6>

<p>前</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__Person__test_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">_a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">a</span><span class="p">(</span><span class="n">_a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__Person__test_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">;</span> <span class="c1">// bound by copy</span>
</span><span class='line'>      <span class="c1">// 这里通过局部静态变量a的地址来对其进行修改</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__Person__test_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="p">)};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_I_Person_test</span><span class="p">(</span><span class="n">Person</span> <span class="o">*</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 传入a的地址</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__Person__test_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__Person__test_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__Person__test_block_desc_0_DATA</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意一点的是静态局部变量是存储在静态数据存储区域的，也就是和程序拥有一样的<code>生命周期</code>，也就是说在程序运行时，都能够保证block访问到一个有效的变量。但是其<code>作用范围</code>还是局限于定义它的函数中，所以只能在block通过静态局部变量的<code>地址</code>来进行访问。<br>
关于变量的存储我原来的这篇博客有提及：<a href="http://triplecc.github.io/blog/2013-01-20-cyu-yan-yi-xiang-quan-ju-ju-bu-bian-liang/">c语言臆想全局-局部变量</a></p>

<h6>__block修饰的变量</h6>

<p>前：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">__block</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__Block_byref_a_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">__isa</span><span class="p">;</span>
</span><span class='line'><span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="n">__forwarding</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">__flags</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">__size</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span> <span class="c1">// by ref</span>
</span><span class='line'>  <span class="n">__Person__test_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="n">_a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">a</span><span class="p">(</span><span class="n">_a</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__Person__test_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">;</span> <span class="c1">// bound by ref</span>
</span><span class='line'>      <span class="c1">// 注意，这里的_forwarding用来保证操作的始终是堆中的拷贝a，而不是栈中的a</span>
</span><span class='line'>        <span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">)</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__Person__test_block_copy_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_assign</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="mi">8</span><span class="cm">/*BLOCK_FIELD_IS_BYREF*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__Person__test_block_dispose_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_dispose</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="mi">8</span><span class="cm">/*BLOCK_FIELD_IS_BYREF*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="k">copy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="n">__Person__test_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="p">),</span> <span class="n">__Person__test_block_copy_0</span><span class="p">,</span> <span class="n">__Person__test_block_dispose_0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_I_Person_test</span><span class="p">(</span><span class="n">Person</span> <span class="o">*</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// __block将a包装成了一个对象</span>
</span><span class='line'>   <span class="n">__attribute__</span><span class="p">((</span><span class="n">__blocks__</span><span class="p">(</span><span class="n">byref</span><span class="p">)))</span> <span class="n">__Block_byref_a_0</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">,(</span><span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">__Block_byref_a_0</span><span class="p">)};</span>
</span><span class='line'><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__Person__test_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__Person__test_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__Person__test_block_desc_0_DATA</span><span class="p">,</span> <span class="p">(</span><span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="mi">570425344</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，对比上面的结果，明显多了<code>__Block_byref_a_0</code>结构体，这个结构体中含有<code>isa</code>指针，所以也是一个对象，它是用来包装局部变量a的。当block被copy到堆中时，<code>__Person__test_block_impl_0</code>的拷贝辅助函数<code>__Person__test_block_copy_0</code>会将<code>__Block_byref_a_0</code>拷贝至堆中，所以即使局部变量所在堆被销毁，block依然能对堆中的局部变量进行操作。其中<code>__Block_byref_a_0</code>成员指针<code>__forwarding</code>用来指向它在堆中的拷贝，其依据源码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_Block_byref_assign_copy</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">**</span><span class="n">destp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">**</span><span class="p">)</span><span class="n">dest</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="n">src</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// 堆中拷贝的forwarding指向它自己</span>
</span><span class='line'>    <span class="k">copy</span><span class="o">-&gt;</span><span class="n">forwarding</span> <span class="o">=</span> <span class="k">copy</span><span class="p">;</span> <span class="c1">// patch heap copy to point to itself (skip write-barrier)</span>
</span><span class='line'>    <span class="c1">// 栈中的forwarding指向堆中的拷贝</span>
</span><span class='line'>    <span class="n">src</span><span class="o">-&gt;</span><span class="n">forwarding</span> <span class="o">=</span> <span class="k">copy</span><span class="p">;</span>  <span class="c1">// patch stack to point to heap copy</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样做是为了保证操作的值始终是堆中的拷贝，而不是栈中的值。（处理在局部变量所在栈还没销毁，就调用block来改变局部变量值的情况，如果没有__forwarding指针，则修改无效）<br>
至于block如何实现对局部变量的拷贝，下面会详细说明。</p>

<h6>self隐式循环引用</h6>

<p>前：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">_block</span><span class="p">)();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">_block</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">_a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// 可以看到，block强引用了self</span>
</span><span class='line'>  <span class="n">Person</span> <span class="o">*</span><span class="nb">self</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__Person__test_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="n">Person</span> <span class="o">*</span><span class="n">_self</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="nb">self</span><span class="p">(</span><span class="n">_self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__Person__test_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="o">*</span><span class="nb">self</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="nb">self</span><span class="p">;</span> <span class="c1">// bound by copy</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nb">self</span> <span class="o">+</span> <span class="n">OBJC_IVAR_</span><span class="err">$</span><span class="n">_Person</span><span class="err">$</span><span class="n">_a</span><span class="p">))</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__Person__test_block_copy_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_assign</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="nb">self</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="nb">self</span><span class="p">,</span> <span class="mi">3</span><span class="cm">/*BLOCK_FIELD_IS_OBJECT*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__Person__test_block_dispose_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_dispose</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="nb">self</span><span class="p">,</span> <span class="mi">3</span><span class="cm">/*BLOCK_FIELD_IS_OBJECT*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__Person__test_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="k">copy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="n">__Person__test_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span><span class="p">),</span> <span class="n">__Person__test_block_copy_0</span><span class="p">,</span> <span class="n">__Person__test_block_dispose_0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_I_Person_test</span><span class="p">(</span><span class="n">Person</span> <span class="o">*</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">_block</span><span class="p">)()</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__Person__test_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__Person__test_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__Person__test_block_desc_0_DATA</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="mi">570425344</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果在编译转换前，将<code>_a</code>改成<code>self.a</code>，能很明显地看出是产生了循环引用(self强引用block，block强引用self)。那么使用<code>_a</code>呢？经过编译转换后，依然可以在<code>__Person__test_block_impl_0</code>看见<code>self</code>的身影。且在函数<code>_I_Person_test</code>中，传入的参数也是<code>self</code>。通过以下语句，可以看出，不管是用什么形式访问实例变量，最终都会转换成<code>self+变量内存偏移的形式</code>。所以在上面例子中使用<code>_a</code>也会造成循环引用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__Person__test_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__Person__test_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Person</span> <span class="o">*</span><span class="nb">self</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="nb">self</span><span class="p">;</span> <span class="c1">// bound by copy</span>
</span><span class='line'>      <span class="c1">// self＋实例变量a的偏移值</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nb">self</span> <span class="o">+</span> <span class="n">OBJC_IVAR_</span><span class="err">$</span><span class="n">_Person</span><span class="err">$</span><span class="n">_a</span><span class="p">))</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>不同类型block的复制</h2>

<p><code>block</code>的复制代码在<code>_Block_copy_internal</code>函数中。</p>

<h6>栈block</h6>

<p>从以下代码可以看出，栈block的复制不仅仅复制了其内容，还添加了一些额外的东西</p>

<ul>
<li> 1、往flags中并入了<code>BLOCK_NEEDS_FREE</code>（这个标志表明block需要释放，在<code>release</code>以及<code>再次拷贝</code>时会用到）</li>
<li>2、如果有辅助copy函数（<code>BLOCK_HAS_COPY_DISPOSE</code>），那么就调用（这个辅助copy函数是用来<code>拷贝block捕获的变量</code>的）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">)</span> <span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">memmove</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">aBlock</span><span class="p">,</span> <span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span> <span class="c1">// bitcopy first</span>
</span><span class='line'>        <span class="c1">// reset refcount</span>
</span><span class='line'>        <span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">);</span>    <span class="c1">// XXX not needed</span>
</span><span class='line'>        <span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">BLOCK_NEEDS_FREE</span> <span class="o">|</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">result</span><span class="o">-&gt;</span><span class="n">isa</span> <span class="o">=</span> <span class="n">_NSConcreteMallocBlock</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_HAS_COPY_DISPOSE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//printf(&quot;calling block copy helper %p(%p, %p)...\n&quot;, aBlock-&gt;descriptor-&gt;copy, result, aBlock);</span>
</span><span class='line'>            <span class="p">(</span><span class="o">*</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="k">copy</span><span class="p">)(</span><span class="n">result</span><span class="p">,</span> <span class="n">aBlock</span><span class="p">);</span> <span class="c1">// do fixup</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h6>堆block</h6>

<p>从以下代码看出，如果block的flags中有<code>BLOCK_NEEDS_FREE</code>标志（block从栈中拷贝到堆时添加的标志），就执行<code>latching_incr_int</code>操作，其功能就是让block的引用计数加1。所以堆中block的拷贝只是单纯地改变了引用计数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_NEEDS_FREE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// latches on high</span>
</span><span class='line'>        <span class="n">latching_incr_int</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h6>全局block</h6>

<p>从以下代码看出，对于全局block，函数没有做任何操作，直接返回了传入的block</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_IS_GLOBAL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>block辅助函数</h2>

<p>上文提及到了block辅助copy与dispose处理函数，这里分析下这两个函数的内部实现。在捕获变量为<code>__block</code>修饰的<code>基本类型</code>，或者为<code>对象</code>时，block才会有这两个辅助函数。<br>
block<code>捕捉变量</code>拷贝函数为<code>_Block_object_assign</code>。在调用复制block的函数_Block_copy_internal时，会根据block有无辅助函数来对<code>捕捉变量</code>拷贝函数<code>_Block_object_assign</code>进行调用。而在<code>_Block_object_assign</code>函数中，也会判断<code>捕捉变量</code>包装而成的对象(Block_byref结构体)是否有辅助函数，来进行调用。</p>

<h6><code>__block</code>修饰的基本类型的辅助函数</h6>

<p>编写以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">void</span><span class="p">(</span><span class="o">^</span><span class="n">Block</span><span class="p">)();</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">__block</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Block</span> <span class="n">block</span> <span class="o">=</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>转换成C++代码后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">void</span><span class="p">(</span><span class="o">*</span><span class="n">Block</span><span class="p">)();</span>
</span><span class='line'><span class="c1">// __block int a</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__Block_byref_a_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">__isa</span><span class="p">;</span>
</span><span class='line'><span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="n">__forwarding</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">__flags</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">__size</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// block</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span> <span class="c1">// by ref</span>
</span><span class='line'>  <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="n">_a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">a</span><span class="p">(</span><span class="n">_a</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// block函数体</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">;</span> <span class="c1">// bound by ref</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="c1">// 辅助copy函数</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_copy_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_assign</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="mi">8</span><span class="cm">/*BLOCK_FIELD_IS_BYREF*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 辅助dispose函数</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_dispose_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_dispose</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="mi">8</span><span class="cm">/*BLOCK_FIELD_IS_BYREF*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="k">copy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">),</span> <span class="n">__main_block_copy_0</span><span class="p">,</span> <span class="n">__main_block_dispose_0</span><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* @autoreleasepool */</span> <span class="p">{</span> <span class="n">__AtAutoreleasePool</span> <span class="n">__autoreleasepool</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">// 这里创建了，并将a的flags设置为0</span>
</span><span class='line'>        <span class="n">__attribute__</span><span class="p">((</span><span class="n">__blocks__</span><span class="p">(</span><span class="n">byref</span><span class="p">)))</span> <span class="n">__Block_byref_a_0</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">,(</span><span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">__Block_byref_a_0</span><span class="p">)};</span>
</span><span class='line'><span class="p">;</span>
</span><span class='line'>        <span class="n">Block</span> <span class="n">block</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">,</span> <span class="p">(</span><span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="mi">570425344</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面代码中，被<code>__block</code>修饰的a变量变为了<code>__Block_byref_a_0</code>类型，根据这个格式，从源码中查看得到相似的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">Block_byref</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="n">forwarding</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span> <span class="cm">/* refcount; */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">byref_keep</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="n">src</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">byref_destroy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/* long shared[0]; */</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 做下对比</span>
</span><span class='line'><span class="k">struct</span> <span class="n">__Block_byref_a_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">__isa</span><span class="p">;</span>
</span><span class='line'><span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="n">__forwarding</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">__flags</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">__size</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// flags/_flags类型</span>
</span><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* See function implementation for a more complete description of these fields and combinations */</span>
</span><span class='line'>        <span class="c1">// 是一个对象</span>
</span><span class='line'>        <span class="n">BLOCK_FIELD_IS_OBJECT</span>   <span class="o">=</span>  <span class="mi">3</span><span class="p">,</span>  <span class="cm">/* id, NSObject, __attribute__((NSObject)), block, ... */</span>
</span><span class='line'>        <span class="c1">// 是一个block</span>
</span><span class='line'>        <span class="n">BLOCK_FIELD_IS_BLOCK</span>    <span class="o">=</span>  <span class="mi">7</span><span class="p">,</span>  <span class="cm">/* a block variable */</span>
</span><span class='line'>        <span class="c1">// 被__block修饰的变量</span>
</span><span class='line'>        <span class="n">BLOCK_FIELD_IS_BYREF</span>    <span class="o">=</span>  <span class="mi">8</span><span class="p">,</span>  <span class="cm">/* the on stack structure holding the __block variable */</span>
</span><span class='line'>        <span class="c1">// 被__weak修饰的变量，只能被辅助copy函数使用</span>
</span><span class='line'>        <span class="n">BLOCK_FIELD_IS_WEAK</span>     <span class="o">=</span> <span class="mi">16</span><span class="p">,</span>  <span class="cm">/* declared __weak, only used in byref copy helpers */</span>
</span><span class='line'>        <span class="c1">// block辅助函数调用（告诉内部实现不要进行retain或者copy）</span>
</span><span class='line'>        <span class="n">BLOCK_BYREF_CALLER</span>      <span class="o">=</span> <span class="mi">128</span>  <span class="cm">/* called from __block (byref) copy/dispose support routines. */</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置不同属性对应的flags/_flags值</span>
</span><span class='line'>  <span class="k">__block</span> <span class="kt">id</span>                   <span class="mi">128</span><span class="o">+</span><span class="mi">3</span>
</span><span class='line'>    <span class="k">__weak</span> <span class="n">block</span> <span class="kt">id</span>              <span class="mi">128</span><span class="o">+</span><span class="mi">3</span><span class="o">+</span><span class="mi">16</span>
</span><span class='line'>  <span class="k">__block</span> <span class="p">(</span><span class="o">^</span><span class="n">Block</span><span class="p">)</span>             <span class="mi">128</span><span class="o">+</span><span class="mi">7</span>
</span><span class='line'>  <span class="k">__weak</span> <span class="k">__block</span> <span class="p">(</span><span class="o">^</span><span class="n">Block</span><span class="p">)</span>      <span class="mi">128</span><span class="o">+</span><span class="mi">7</span><span class="o">+</span><span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，<code>__block</code>将原来的基本类型包装成了<code>对象</code>。因为以上两个结构体的前4个成员的类型都是一样的，内存空间排列一致，所以可以进行以下操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 转换成C++代码</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_copy_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_assign</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="mi">8</span><span class="cm">/*BLOCK_FIELD_IS_BYREF*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// _Block_object_assign源码</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">_Block_object_assign</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">destAddr</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">object</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_FIELD_IS_BYREF</span><span class="p">)</span> <span class="o">==</span> <span class="n">BLOCK_FIELD_IS_BYREF</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>        <span class="c1">// copying a __block reference from the stack Block to the heap</span>
</span><span class='line'>        <span class="c1">// flags will indicate if it holds a __weak reference and needs a special isa</span>
</span><span class='line'>        <span class="n">_Block_byref_assign_copy</span><span class="p">(</span><span class="n">destAddr</span><span class="p">,</span> <span class="n">object</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// _Block_byref_assign_copy源码</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_Block_byref_assign_copy</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 这里因为前面4个成员的内存分布一样，所以直接转换后，使用Block_byref的成员变量名，能访问到__Block_byref_a_0的前面4个成员</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">**</span><span class="n">destp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">**</span><span class="p">)</span><span class="n">dest</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="n">src</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">forwarding</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 从main函数对__Block_byref_a_0的初始化，可以看到初始化时将flags赋值为0</span>
</span><span class='line'>      <span class="c1">// 这里表示第一次拷贝，会进行复制操作，并修改原来flags的值</span>
</span><span class='line'>      <span class="c1">// static int _Byref_flag_initial_value = BLOCK_NEEDS_FREE | 2;</span>
</span><span class='line'>      <span class="c1">// 可以看出，复制后，会并入BLOCK_NEEDS_FREE，后面的2是block的初始引用计数</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>        <span class="k">copy</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">=</span> <span class="n">src</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|</span> <span class="n">_Byref_flag_initial_value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 已经拷贝到堆了，只增加引用计数</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">forwarding</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_NEEDS_FREE</span><span class="p">)</span> <span class="o">==</span> <span class="n">BLOCK_NEEDS_FREE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">latching_incr_int</span><span class="p">(</span><span class="o">&amp;</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">forwarding</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 普通的赋值，里面最底层就*destptr = value;这句表达式</span>
</span><span class='line'>    <span class="n">_Block_assign</span><span class="p">(</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">forwarding</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">**</span><span class="p">)</span><span class="n">destp</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要操作都在代码注释中了，总体来说，<code>__block</code>修饰的基本类型会被包装为对象，并且只在最初block拷贝时复制一次，后面的拷贝只会增加这个捕获变量的引用计数。</p>

<h6>对象的辅助函数</h6>

<ul>
<li>没有<code>__block</code>修饰</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">void</span><span class="p">(</span><span class="o">^</span><span class="n">Block</span><span class="p">)();</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSObject</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Block</span> <span class="n">block</span> <span class="o">=</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，在没有<code>__block</code>修饰时，对象编译转换的结果如下，删除了一些变化不大的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="bp">NSObject</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">;</span> <span class="c1">// bound by copy</span>
</span><span class='line'>            <span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_copy_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_assign</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="cm">/*BLOCK_FIELD_IS_OBJECT*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_dispose_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_dispose</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="cm">/*BLOCK_FIELD_IS_OBJECT*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="k">copy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>对象在没有<code>__block</code>修饰时，并没有产生<code>__Block_byref_a_0</code>结构体，只是将标志位修改为<code>BLOCK_FIELD_IS_OBJECT</code>。而在<code>_Block_object_assign</code>中对应的判断分支代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_FIELD_IS_OBJECT</span><span class="p">)</span> <span class="o">==</span> <span class="n">BLOCK_FIELD_IS_OBJECT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_Block_retain_object</span><span class="p">(</span><span class="n">object</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_Block_assign</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">object</span><span class="p">,</span> <span class="n">destAddr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，block复制时，会retain捕捉对象，以增加其引用计数。</p>

<ul>
<li>有<code>__block</code>修饰</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">void</span><span class="p">(</span><span class="o">^</span><span class="n">Block</span><span class="p">)();</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">__block</span> <span class="bp">NSObject</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Block</span> <span class="n">block</span> <span class="o">=</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这种情况下，编译转换的部分结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__Block_byref_a_0</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">__isa</span><span class="p">;</span>
</span><span class='line'><span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="n">__forwarding</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">__flags</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">__size</span><span class="p">;</span>
</span><span class='line'> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">__Block_byref_id_object_copy</span><span class="p">)(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">__Block_byref_id_object_dispose</span><span class="p">)(</span><span class="kt">void</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'> <span class="bp">NSObject</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* @autoreleasepool */</span> <span class="p">{</span> <span class="n">__AtAutoreleasePool</span> <span class="n">__autoreleasepool</span><span class="p">;</span>
</span><span class='line'><span class="n">attribute__</span><span class="p">((</span><span class="n">__blocks__</span><span class="p">(</span><span class="n">byref</span><span class="p">)))</span> <span class="n">__Block_byref_a_0</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">,(</span><span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="mi">33554432</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">__Block_byref_a_0</span><span class="p">),</span> <span class="n">__Block_byref_id_object_copy_131</span><span class="p">,</span> <span class="n">__Block_byref_id_object_dispose_131</span><span class="p">,....};</span>
</span><span class='line'><span class="n">Block</span> <span class="n">block</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">,</span> <span class="p">(</span><span class="n">__Block_byref_a_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="mi">570425344</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 以下的40表示__Block_byref_a_0对象a的位移（4个指针(32字节)＋2个int变量(8字节)＝40字节）</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__Block_byref_id_object_copy_131</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">_Block_object_assign</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">dst</span> <span class="o">+</span> <span class="mi">40</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span> <span class="o">*</span><span class="p">)</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">src</span> <span class="o">+</span> <span class="mi">40</span><span class="p">),</span> <span class="mi">131</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__Block_byref_id_object_dispose_131</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">_Block_object_dispose</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span> <span class="o">*</span><span class="p">)</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">src</span> <span class="o">+</span> <span class="mi">40</span><span class="p">),</span> <span class="mi">131</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，对于对象，<code>__Block_byref_a_0</code>另外增加了两个辅助函数<code>__Block_byref_id_object_copy</code>、<code>__Block_byref_id_object_dispose</code>,以实现对对象内存的管理。其中两者的最后一个参数<code>131</code>表示<code>BLOCK_BYREF_CALLER</code>|<code>BLOCK_FIELD_IS_OBJECT</code>，BLOCK_BYREF_CALLER表示在内部实现中不对__block修饰的a对象进行retain或copy；以下为相关源码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_BYREF_CALLER</span><span class="p">)</span> <span class="o">==</span> <span class="n">BLOCK_BYREF_CALLER</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// do *not* retain or *copy* __block variables whatever they are</span>
</span><span class='line'>        <span class="n">_Block_assign</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">object</span><span class="p">,</span> <span class="n">destAddr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>_Block_byref_assign_copy</code>函数的以下代码会对上面的辅助函数（__Block_byref_id_object_copy_131）进行调用；<code>570425344</code>表示<code>BLOCK_HAS_COPY_DISPOSE</code>|<code>BLOCK_HAS_DESCRIPTOR</code>，所以会执行以下相关源码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_HAS_COPY_DISPOSE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Trust copy helper to copy everything of interest</span>
</span><span class='line'>    <span class="c1">// If more than one field shows up in a byref block this is wrong XXX</span>
</span><span class='line'>    <span class="k">copy</span><span class="o">-&gt;</span><span class="n">byref_keep</span> <span class="o">=</span> <span class="n">src</span><span class="o">-&gt;</span><span class="n">byref_keep</span><span class="p">;</span>
</span><span class='line'>    <span class="k">copy</span><span class="o">-&gt;</span><span class="n">byref_destroy</span> <span class="o">=</span> <span class="n">src</span><span class="o">-&gt;</span><span class="n">byref_destroy</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">byref_keep</span><span class="p">)(</span><span class="k">copy</span><span class="p">,</span> <span class="n">src</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ARC中block的工作</h2>

<p><img src="http://triplecc.github.io/images/Snip20150720_4.png" alt="" /><br>
苹果文档提及，在ARC模式下，在栈间传递block时，不需要手动copy栈中的block，即可让block正常工作。主要原因是ARC对栈中的block自动执行了copy，将<code>_NSConcreteStackBlock</code>类型的block转换成了<code>_NSConcreteMallocBlock</code>的block。<br></p>

<h6>block试验</h6>

<p>下面对block做点实验：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span><span class="n">i</span><span class="p">;};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">__weak</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">weakBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span><span class="n">i</span><span class="p">;};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">stackBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ARC情况下</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 创建时，都会在栈中</span>
</span><span class='line'>        <span class="c1">// &lt;__NSStackBlock__: 0x7fff5fbff730&gt;</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span><span class="n">i</span><span class="p">;});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 因为stackBlock为strong类型，且捕获了外部变量，所以赋值时，自动进行了copy</span>
</span><span class='line'>        <span class="c1">// &lt;__NSMallocBlock__: 0x100206920&gt;</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">block</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 如果是weak类型的block，依然不会自动进行copy</span>
</span><span class='line'>        <span class="c1">// &lt;__NSStackBlock__: 0x7fff5fbff728&gt;</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">weakBlock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 如果block是strong类型，并且没有捕获外部变量，那么就会转换成__NSGlobalBlock__</span>
</span><span class='line'>        <span class="c1">// &lt;__NSGlobalBlock__: 0x100001110&gt;</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">stackBlock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 在非ARC情况下，产生以下输出</span>
</span><span class='line'>        <span class="c1">// &lt;__NSStackBlock__: 0x7fff5fbff6d0&gt;</span>
</span><span class='line'>        <span class="c1">// &lt;__NSStackBlock__: 0x7fff5fbff730&gt;</span>
</span><span class='line'>        <span class="c1">// &lt;__NSStackBlock__: 0x7fff5fbff700&gt;</span>
</span><span class='line'>        <span class="c1">// &lt;__NSGlobalBlock__: 0x1000010d0&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，ARC对<code>类型为strong</code>且<code>捕获了外部变量</code>的block进行了copy。并且当block<code>类型为strong</code>，但是创建时<code>没有捕获外部变量</code>，block最终会变成<code>__NSGlobalBlock__</code>类型（这里可能因为block中的代码没有捕获外部变量，所以不需要在栈中开辟变量，也就是说，在<code>编译</code>时，这个block的<code>所有内容已经在代码段中生成了</code>，所以就把block的类型转换为全局类型）<br></p>

<h6>block作为参数传递</h6>

<p>再来看下使用在栈中的block需要注意的情况：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">arrayM</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">myBlock</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Block</span> <span class="n">block</span> <span class="o">=</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">arrayM</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">block</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">block</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">arrayM</span> <span class="o">=</span> <span class="l">@[]</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">myBlock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Block</span> <span class="n">block</span> <span class="o">=</span> <span class="p">[</span><span class="n">arrayM</span> <span class="n">firstObject</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// 非ARC这里崩溃</span>
</span><span class='line'>        <span class="n">block</span><span class="p">();</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ARC情况下输出</span>
</span><span class='line'><span class="c1">// &lt;__NSMallocBlock__: 0x100214480&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 非ARC情况下输出</span>
</span><span class='line'><span class="c1">// &lt;__NSStackBlock__: 0x7fff5fbff738&gt;</span>
</span><span class='line'><span class="c1">// 崩溃，野指针错误</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，ARC情况下因为自动执行了copy，所以返回类型为<code>__NSMallocBlock__</code>，在函数结束后依然可以访问；而非ARC情况下，需要我们手动调用<code>[block copy]</code>来将block拷贝到堆中，否则因为栈中的block生命周期和函数中的栈生命周期关联，当函数退出后，相应的堆被销毁，block也就不存在了。<br>
如果把block的以下代码删除：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么block就会变成全局类型，在main中访问也不会出崩溃。<br></p>

<h6>block作为返回值</h6>

<p>在非ARC情况下，如果返回值是block，则一般这样操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">return</span> <span class="p">[[</span><span class="n">block</span> <span class="k">copy</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于外部要使用的block，更趋向于把它拷贝到堆中，使其脱离栈生命周期的约束。</p>

<h6>block属性</h6>

<p>这里还有一点关于block类型的ARC属性。上文也说明了，ARC会自动帮<code>strong类型</code>且<code>捕获外部变量</code>的block进行copy，所以在定义block类型的属性时也可以使用strong，不一定使用copy。也就是以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/** 假如有栈block赋给以下两个属性 **/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 这里因为ARC，当栈block中会捕获外部变量时，这个block会被copy进堆中</span>
</span><span class='line'><span class="c1">// 如果没有捕获外部变量，这个block会变为全局类型</span>
</span><span class='line'><span class="c1">// 不管怎么样，它都脱离了栈生命周期的约束</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">Block</span> <span class="o">*</span><span class="n">strongBlock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 这里都会被copy进堆中</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">Block</span> <span class="o">*</span><span class="n">copyBlock</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考博文</h2>

<p><a href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/">谈Objective-C Block的实现</a><br>
<a href="http://blog.csdn.net/jasonblog/article/details/7756763">iOS中block实现的探究</a><br>
<a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">A look inside blocks: Episode 3</a><br>
<a href="http://llvm.org/svn/llvm-project/compiler-rt/trunk/lib/BlocksRuntime/runtime.c">runtime.c</a><br>
<a href="http://llvm.org/svn/llvm-project/compiler-rt/trunk/lib/BlocksRuntime/Block_private.h">Block_private.h</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SDWebImage加载大图崩溃]]></title>
    <link href="http://triplecc.github.io/blog/2015-02-01-sdwebimagejia-zai-da-tu/"/>
    <updated>2015-02-01T21:51:40+08:00</updated>
    <id>http://triplecc.github.io/blog/sdwebimagejia-zai-da-tu</id>
    <content type="html"><![CDATA[<p>近期的需求里面，有需要下载海报大图的情况，但是使用SDWebImage进行下载时老是会出现内存泄漏的情况，然后APP就莫名地秒退了，感觉SDWebImage会对内存溢出进行处理，然后清除掉一些缓存，所以就有点疑惑。<br>
于是我就尝试不采用UIImageView分类的方法进行设置，而进行了以下处理：</p>

<h4>通过清除内存缓存</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">SDWebImageDownloader</span> <span class="n">sharedDownloader</span><span class="p">]</span> <span class="nl">downloadImageWithURL</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">progress</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSInteger</span> <span class="n">receivedSize</span><span class="p">,</span> <span class="bp">NSInteger</span> <span class="n">expectedSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="nl">completed</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">image</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 这里对Image进行大小判断</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">SDImageCache</span> <span class="n">sharedImageCache</span><span class="p">]</span> <span class="n">clearMemory</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// 再设置Image</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>先对图片进行下载，下载完成后再看是否执行清除缓存处理，没想到还真是可以了。<br></p>

<h4>通过压缩</h4>

<p>上网找了找，发现还有另外一种处理方式：将图片进行压缩，再缓存。不过这需要修改SDWebImage的源码，比较蛋疼。详细如下<br></p>

<p>SDWebImage针对图片设置，有这么一段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">sd_imageWithData:</span><span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">imageContentType</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSData</span> <span class="nl">sd_contentTypeForImageData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">imageContentType</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;image/gif&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">sd_animatedGIFWithData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#ifdef SD_WEBP</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">imageContentType</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;image/webp&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">sd_imageWithWebPData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">image</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImage</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>        <span class="n">UIImageOrientation</span> <span class="n">orientation</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">sd_imageOrientationFromImageData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">orientation</span> <span class="o">!=</span> <span class="n">UIImageOrientationUp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageWithCGImage</span><span class="p">:</span><span class="n">image</span><span class="p">.</span><span class="bp">CGImage</span>
</span><span class='line'>                                        <span class="nl">scale</span><span class="p">:</span><span class="n">image</span><span class="p">.</span><span class="n">scale</span>
</span><span class='line'>                                  <span class="nl">orientation</span><span class="p">:</span><span class="n">orientation</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面可以看出，SDWebImage直接把下载的data转换成了image，即使data很大。所以需要在这里进行一些处理之后，再设置传出image。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">compressImageWith:</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">imageWidth</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">imageHeight</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">640</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">height</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="n">width</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">float</span> <span class="n">widthScale</span> <span class="o">=</span> <span class="n">imageWidth</span> <span class="o">/</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">heightScale</span> <span class="o">=</span> <span class="n">imageHeight</span> <span class="o">/</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 创建一个bitmap的context</span>
</span><span class='line'>  <span class="c1">// 并把它设置成为当前正在使用的context</span>
</span><span class='line'>  <span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">widthScale</span> <span class="o">&gt;</span> <span class="n">heightScale</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">image</span> <span class="nl">drawInRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">imageWidth</span> <span class="o">/</span><span class="n">heightScale</span> <span class="p">,</span> <span class="n">height</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">image</span> <span class="nl">drawInRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">width</span> <span class="p">,</span> <span class="n">imageHeight</span> <span class="o">/</span><span class="n">widthScale</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 从当前context中创建一个改变大小后的图片</span>
</span><span class='line'>  <span class="bp">UIImage</span> <span class="o">*</span><span class="n">newImage</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">// 使当前的context出堆栈</span>
</span><span class='line'>  <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">newImage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后再更改最初代码为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">sd_imageWithData:</span><span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">imageContentType</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSData</span> <span class="nl">sd_contentTypeForImageData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">imageContentType</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;image/gif&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">sd_animatedGIFWithData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#ifdef SD_WEBP</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">imageContentType</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;image/webp&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">sd_imageWithWebPData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">image</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImage</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 大于1M时才进行压缩处理</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">length</span><span class="o">/</span><span class="mi">1024</span> <span class="o">&gt;</span> <span class="mi">1024</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">compressImageWith</span><span class="p">:</span><span class="n">image</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>        <span class="n">UIImageOrientation</span> <span class="n">orientation</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">sd_imageOrientationFromImageData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">orientation</span> <span class="o">!=</span> <span class="n">UIImageOrientationUp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageWithCGImage</span><span class="p">:</span><span class="n">image</span><span class="p">.</span><span class="bp">CGImage</span>
</span><span class='line'>                                        <span class="nl">scale</span><span class="p">:</span><span class="n">image</span><span class="p">.</span><span class="n">scale</span>
</span><span class='line'>                                  <span class="nl">orientation</span><span class="p">:</span><span class="n">orientation</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，还需要对imageData进行处理，在SDWebImageDownloaderOperation的connectionDidFinishLoading方法里面，添加以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">sd_imageWithData</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">imageData</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//将等比压缩过的image在赋在转成data赋给self.imageData</span>
</span><span class='line'><span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">UIImageJPEGRepresentation</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">imageData</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableData</span> <span class="nl">dataWithData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过更改了SDWebImage的源码，使用cocoapods就比较蛋疼了，所以最后还是选择了第一种。还是看情况吧，可能执行第一种操作以后，需要从沙盒中获取图片，性能可能会受到影响，不过保持了图片的高保真效果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITextFiled文字抖动效果]]></title>
    <link href="http://triplecc.github.io/blog/2015-01-27-uitextfiledwen-zi-dou-dong-xiao-guo/"/>
    <updated>2015-01-27T20:17:49+08:00</updated>
    <id>http://triplecc.github.io/blog/uitextfiledwen-zi-dou-dong-xiao-guo</id>
    <content type="html"><![CDATA[<p>最终设置UITextField的placeholder效果：<br></p>

<p><img src="http://triplecc.github.io/images/2015-07-28%2016_46_41.gif" alt="" /><br></p>

<p>有需求1如下：</p>

<ul>
<li>未点击时UITextField的placeholder为浅灰色</li>
<li>点击后，还未进行输入时，UITextField的placeholder变为深灰色</li>
</ul>


<p>这个实现并不难：</p>

<ul>
<li>通过通知或者重写UITextField的响应者处理方法，都可以实现捕获点击时间</li>
<li>UITextField设置placeholder可以使用以下属性：

<ul>
<li>通过设置这个富文本属性，可以得到丰富多彩的placeholder<br></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="bp">NSCopying</span> <span class="k">var</span> <span class="nl">attributedPlaceholder</span><span class="p">:</span> <span class="bp">NSAttributedString</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 附带光标颜色属性</span>
</span><span class='line'><span class="k">var</span> <span class="nl">tintColor</span><span class="p">:</span> <span class="bp">UIColor</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是需求2加了点东西：</p>

<ul>
<li>点击后，还未进行输入时，UITextField的placeholder文字左右进行小幅度抖动<br></li>
</ul>


<p>可以看到通过设置attributedPlaceholder，可以改变一些静态的属性，如颜色和文字大小。<br>
但是如果需要里面的文字做一些简单的抖动效果貌似就不行了，UITextField没有提供相关属性，我们也不知道placeholder是在何种控件中显示的。<br>
既然不知道laceholder是在何种控件中显示，那就通过以下代码打印出UITextField中所有的成员变量（函数参考<a href="http://triplecc.github.io/blog/2015-01-10-runtimeji-chu/">runtime基础元素解析</a>），看看是否会有什么发现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">Ivar</span> <span class="o">*</span><span class="n">ivars</span> <span class="o">=</span> <span class="n">class_copyIvarList</span><span class="p">([</span><span class="bp">UITextField</span> <span class="k">class</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">outCount</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">outCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Ivar</span> <span class="n">ivar</span> <span class="o">=</span> <span class="n">ivars</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%s&quot;</span><span class="p">,</span> <span class="n">ivar_getName</span><span class="p">(</span><span class="n">ivar</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">free</span><span class="p">(</span><span class="n">ivars</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>截取关键部分如下：<br></p>

<p><img src="http://triplecc.github.io/images/Snip20150728_2.png" alt="" /><br></p>

<p>从字面上看，上面的<code>_placeholderLabel</code>是否就是显示placeholder的控件？<br>
测试实际结果的确是显示placeholder的控件。<br>
只要有了这个控件，那要做一些小抖动的动画那就没什么问题了，先获取这个UILabel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">private</span> <span class="k">var</span> <span class="nl">tpcPlaceholderLabel</span><span class="p">:</span><span class="bp">UILabel</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">valueForKey</span><span class="p">(</span><span class="s">&quot;_placeholderLabel&quot;</span><span class="p">)</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UILabel</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后重写UITextField的响应者处理函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 成为第一响应者</span>
</span><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">becomeFirstResponder</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 存储正常颜色</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">normalColor</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">normalColor</span> <span class="o">=</span> <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">textColor</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 存储选中颜色</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">selectedColor</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedColor</span> <span class="o">=</span> <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">textColor</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">selectedColor</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 执行placeholder动画函数</span>
</span><span class='line'>    <span class="n">placeholderLabelDoAnimationWithType</span><span class="p">(</span><span class="n">animationType</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">super</span><span class="p">.</span><span class="n">becomeFirstResponder</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 放弃第一响应者</span>
</span><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">resignFirstResponder</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="n">animationType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">TPCAnimationTypeUpDown</span> <span class="p">:</span>
</span><span class='line'>        <span class="k">fallthrough</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">TPCAnimationTypeBlowUp</span> <span class="p">:</span>
</span><span class='line'>        <span class="k">fallthrough</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">TPCAnimationTypeLeftRight</span> <span class="p">:</span>
</span><span class='line'>        <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformIdentity</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">TPCAnimationTypeEasyInOut</span> <span class="p">:</span>
</span><span class='line'>        <span class="bp">UIView</span><span class="p">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">TPCAnimationTypeNone</span> <span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">operate</span> <span class="o">=</span> <span class="n">operateWhenResignFirstResponder</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">operate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置为初始颜色</span>
</span><span class='line'>    <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">normalColor</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">super</span><span class="p">.</span><span class="n">resignFirstResponder</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后通过以下函数，传入相应的动作就可以得到抖动的效果了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">private</span> <span class="k">func</span> <span class="nf">doAnimation</span><span class="p">(</span><span class="nl">action</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">UIView</span><span class="p">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">usingSpringWithDamping</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span> <span class="nl">initialSpringVelocity</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptions</span><span class="p">.</span><span class="n">CurveEaseInOut</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">action</span><span class="p">()</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一点，根据上面打印的UITextField成员变量，看到了<code>_displayLabel</code>，这个就是在键盘输入后显示文字的UILabel了。这个属性可以用来干嘛？<br>
我想，<code>可能会有这么一种需求（不过可能没有），就是用户输入错误时，UITextField中已经输入的文字做左右抖动，以间接的形式，辅助提醒用户，这一栏输错了，而不是弹出一个HUB</code>。<br>
由于UITextField内部做了某些处理，所以无法在成为第一响应者时做一些动作，那么，就在放弃第一响应者函数中。<br></p>

<p>相关代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 设置一个在放弃第一响应者的闭包属性</span>
</span><span class='line'><span class="k">var</span> <span class="nl">operateWhenResignFirstResponder</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="p">())</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在func resignFirstResponder() -&gt; Bool函数中调用</span>
</span><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">operate</span> <span class="o">=</span> <span class="n">operateWhenResignFirstResponder</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">operate</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码地址</h4>

<p><a href="https://github.com/tripleCC/TPCDynamicTextFiled/blob/master/README.md">UITextFiled文字抖动效果</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用Runtime函数]]></title>
    <link href="http://triplecc.github.io/blog/2015-01-22-chang-yong-runtimehan-shu/"/>
    <updated>2015-01-22T11:28:20+08:00</updated>
    <id>http://triplecc.github.io/blog/chang-yong-runtimehan-shu</id>
    <content type="html"><![CDATA[<p>这里主要纪录一些常用的函数：</p>

<h2>类</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 根据类，获取类名</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">class_getName</span><span class="p">(</span><span class="kt">Class</span> <span class="n">cls</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 根据类名获取类</span>
</span><span class='line'><span class="kt">Class</span> <span class="n">objc_getClass</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>注意，以下有获取<code>列表</code>的函数需要手动<code>free</code>获取的列表</li>
<li>成员变量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取成员变量列表</span>
</span><span class='line'><span class="n">Ivar</span> <span class="o">*</span> <span class="n">class_copyIvarList</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 获取类成员变量的信息</span>
</span><span class='line'><span class="n">Ivar</span> <span class="n">class_getClassVariable</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 根据实例变量名，获取类中实例变量</span>
</span><span class='line'><span class="n">Ivar</span> <span class="n">class_getInstanceVariable</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 往运行时创建的类添加成员变量</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">class_addIvar</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">alignment</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">types</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>属性</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取属性列表</span>
</span><span class='line'><span class="kt">objc_property_t</span> <span class="o">*</span> <span class="n">class_copyPropertyList</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 获取指定的属性</span>
</span><span class='line'><span class="kt">objc_property_t</span> <span class="n">class_getProperty</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 获取属性列表</span>
</span><span class='line'><span class="kt">objc_property_t</span> <span class="o">*</span> <span class="n">class_copyPropertyList</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 为类添加属性</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">class_addProperty</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">objc_property_attribute_t</span> <span class="o">*</span><span class="n">attributes</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">attributeCount</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方法</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取方法列表</span>
</span><span class='line'><span class="n">Method</span> <span class="o">*</span> <span class="n">class_copyMethodList</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 添加方法</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">class_addMethod</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">name</span><span class="p">,</span> <span class="kt">IMP</span> <span class="n">imp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">types</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 获取实例方法</span>
</span><span class='line'><span class="n">Method</span> <span class="n">class_getInstanceMethod</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">name</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 获取类方法</span>
</span><span class='line'><span class="n">Method</span> <span class="n">class_getClassMethod</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">name</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 替代方法的实现</span>
</span><span class='line'><span class="kt">IMP</span> <span class="n">class_replaceMethod</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">name</span><span class="p">,</span> <span class="kt">IMP</span> <span class="n">imp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">types</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 返回方法的具体实现</span>
</span><span class='line'><span class="kt">IMP</span> <span class="n">class_getMethodImplementation</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">name</span> <span class="p">)</span>
</span><span class='line'><span class="kt">IMP</span> <span class="n">class_getMethodImplementation_stret</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">name</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 类实例是否响应指定的selector</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">class_respondsToSelector</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">sel</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>协议</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取协议列表</span>
</span><span class='line'><span class="n">Protocol</span> <span class="o">*</span> <span class="n">class_copyProtocolList</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 添加协议</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">class_addProtocol</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="n">Protocol</span> <span class="o">*</span><span class="n">protocol</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// 返回类是否实现指定的协议</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">class_conformsToProtocol</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="n">Protocol</span> <span class="o">*</span><span class="n">protocol</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>动态创建</h2>

<ul>
<li>类</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建一个新类和元类</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">objc_allocateClassPair</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">superclass</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">extraBytes</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 销毁一个类及其相关联的类</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">objc_disposeClassPair</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在应用中注册由objc_allocateClassPair创建的类</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">objc_registerClassPair</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>对象</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="c1">// 创建类实例</span>
</span><span class='line'>  <span class="kt">id</span> <span class="nf">class_createInstance</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">extraBytes</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 在指定位置创建类实例</span>
</span><span class='line'>  <span class="kt">id</span> <span class="nf">objc_constructInstance</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">bytes</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 销毁类实例</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span> <span class="nf">objc_destructInstance</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>实例对象操作</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 返回指定对象的一份拷贝</span>
</span><span class='line'><span class="kt">id</span> <span class="nf">object_copy</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 释放指定对象占用的内存</span>
</span><span class='line'><span class="kt">id</span> <span class="nf">object_dispose</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 修改类实例的实例变量的值</span>
</span><span class='line'><span class="n">Ivar</span> <span class="nf">object_setInstanceVariable</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">value</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取对象实例变量的值</span>
</span><span class='line'><span class="n">Ivar</span> <span class="nf">object_getInstanceVariable</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">void</span> <span class="o">**</span><span class="n">outValue</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回指向给定对象分配的任何额外字节的指针</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="nf">object_getIndexedIvars</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回对象中实例变量的值</span>
</span><span class='line'><span class="kt">id</span> <span class="nf">object_getIvar</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">Ivar</span> <span class="n">ivar</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置对象中实例变量的值</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">object_setIvar</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">Ivar</span> <span class="n">ivar</span><span class="p">,</span> <span class="kt">id</span> <span class="n">value</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回给定对象的类名</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">object_getClassName</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回对象的类</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">object_getClass</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置对象的类</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">object_setClass</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="kt">Class</span> <span class="n">cls</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>获取类定义</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取已注册的类定义的列表</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">objc_getClassList</span> <span class="p">(</span> <span class="kt">Class</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bufferCount</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 创建并返回一个指向所有已注册类的指针列表</span>
</span><span class='line'><span class="kt">Class</span> <span class="o">*</span> <span class="nf">objc_copyClassList</span> <span class="p">(</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回指定类的类定义</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">objc_lookUpClass</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">);</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">objc_getClass</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">);</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">objc_getRequiredClass</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回指定类的元类</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">objc_getMetaClass</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>成员变量、属性</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取成员变量名</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">ivar_getName</span> <span class="p">(</span> <span class="n">Ivar</span> <span class="n">v</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取成员变量类型编码</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">ivar_getTypeEncoding</span> <span class="p">(</span> <span class="n">Ivar</span> <span class="n">v</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取成员变量的偏移量</span>
</span><span class='line'><span class="kt">ptrdiff_t</span> <span class="nf">ivar_getOffset</span> <span class="p">(</span> <span class="n">Ivar</span> <span class="n">v</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置关联对象</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">objc_setAssociatedObject</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">object</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="kt">id</span> <span class="n">value</span><span class="p">,</span> <span class="n">objc_AssociationPolicy</span> <span class="n">policy</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取关联对象</span>
</span><span class='line'><span class="kt">id</span> <span class="nf">objc_getAssociatedObject</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">object</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 移除关联对象</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">objc_removeAssociatedObjects</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">object</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取属性名</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">property_getName</span> <span class="p">(</span> <span class="kt">objc_property_t</span> <span class="n">property</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取属性特性描述字符串</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">property_getAttributes</span> <span class="p">(</span> <span class="kt">objc_property_t</span> <span class="n">property</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取属性中指定的特性</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="nf">property_copyAttributeValue</span> <span class="p">(</span> <span class="kt">objc_property_t</span> <span class="n">property</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">attributeName</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取属性的特性列表</span>
</span><span class='line'><span class="kt">objc_property_attribute_t</span> <span class="o">*</span> <span class="nf">property_copyAttributeList</span> <span class="p">(</span> <span class="kt">objc_property_t</span> <span class="n">property</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>方法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 调用指定方法的实现</span>
</span><span class='line'><span class="kt">id</span> <span class="nf">method_invoke</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">Method</span> <span class="n">m</span><span class="p">,</span> <span class="p">...</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用返回一个数据结构的方法的实现</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">method_invoke_stret</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">Method</span> <span class="n">m</span><span class="p">,</span> <span class="p">...</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取方法名</span>
</span><span class='line'><span class="kt">SEL</span> <span class="nf">method_getName</span> <span class="p">(</span> <span class="n">Method</span> <span class="n">m</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回方法的实现</span>
</span><span class='line'><span class="kt">IMP</span> <span class="nf">method_getImplementation</span> <span class="p">(</span> <span class="n">Method</span> <span class="n">m</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取描述方法参数和返回值类型的字符串</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">method_getTypeEncoding</span> <span class="p">(</span> <span class="n">Method</span> <span class="n">m</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取方法的返回值类型的字符串</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="nf">method_copyReturnType</span> <span class="p">(</span> <span class="n">Method</span> <span class="n">m</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取方法的指定位置参数的类型字符串</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="nf">method_copyArgumentType</span> <span class="p">(</span> <span class="n">Method</span> <span class="n">m</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 通过引用返回方法的返回值类型字符串</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">method_getReturnType</span> <span class="p">(</span> <span class="n">Method</span> <span class="n">m</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">dst_len</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回方法的参数的个数</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">method_getNumberOfArguments</span> <span class="p">(</span> <span class="n">Method</span> <span class="n">m</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 通过引用返回方法指定位置参数的类型字符串</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">method_getArgumentType</span> <span class="p">(</span> <span class="n">Method</span> <span class="n">m</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">dst_len</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回指定方法的方法描述结构体</span>
</span><span class='line'><span class="k">struct</span> <span class="n">objc_method_description</span> <span class="o">*</span> <span class="nf">method_getDescription</span> <span class="p">(</span> <span class="n">Method</span> <span class="n">m</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置方法的实现</span>
</span><span class='line'><span class="kt">IMP</span> <span class="nf">method_setImplementation</span> <span class="p">(</span> <span class="n">Method</span> <span class="n">m</span><span class="p">,</span> <span class="kt">IMP</span> <span class="n">imp</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 交换两个方法的实现</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">method_exchangeImplementations</span> <span class="p">(</span> <span class="n">Method</span> <span class="n">m1</span><span class="p">,</span> <span class="n">Method</span> <span class="n">m2</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>方法选择器</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 返回给定选择器指定的方法的名称</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">sel_getName</span> <span class="p">(</span> <span class="kt">SEL</span> <span class="n">sel</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在Objective-C Runtime系统中注册一个方法，将方法名映射到一个选择器，并返回这个选择器</span>
</span><span class='line'><span class="kt">SEL</span> <span class="nf">sel_registerName</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在Objective-C Runtime系统中注册一个方法</span>
</span><span class='line'><span class="kt">SEL</span> <span class="nf">sel_getUid</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 比较两个选择器</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="nf">sel_isEqual</span> <span class="p">(</span> <span class="kt">SEL</span> <span class="n">lhs</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">rhs</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>库相关</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取所有加载的Objective-C框架和动态库的名称</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">**</span> <span class="nf">objc_copyImageNames</span> <span class="p">(</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取指定类所在动态库</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">class_getImageName</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取指定库或框架中所有类的类名</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">**</span> <span class="nf">objc_copyClassNamesForImage</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime应用之KVC]]></title>
    <link href="http://triplecc.github.io/blog/2015-01-21-runtimeying-yong-zhi-kvc/"/>
    <updated>2015-01-21T20:16:13+08:00</updated>
    <id>http://triplecc.github.io/blog/runtimeying-yong-zhi-kvc</id>
    <content type="html"><![CDATA[<p>runtime可以以底层的角度来对一些实现方式进行更改，比如说KVC<br>
首先，先来了解下KVC的底层原理:<br>
key : value</p>

<ul>
<li>1.去模型中查找有没有setValue:，直接调用这个对象setValue:赋值</li>
<li>2.如果没有setValue:，就在模型中查找_value属性</li>
<li>3.如果没有_value属性，就查找value属性</li>
<li>4.如果还没有就报错</li>
</ul>


<p>在和后台通信的JSON数据中，可能会看到这种JSON数据：<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;id&quot;</span> <span class="o">:</span> <span class="s">&quot;tripleCC&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;age&quot;</span> <span class="o">:</span> <span class="s">&quot;30&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;address&quot;</span> <span class="o">:</span> <span class="s">&quot;杭州&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;schooll&quot;</span> <span class="o">:</span> <span class="s">&quot;HDU&quot;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的id是什么？是Objective-C关键字，也就是说我不能定义以下属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="kt">id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于数据模型名称没有和JSON的键值一一对应，我们不能使用以下方法，对模型中的成员变量进行统一设置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setValuesForKeysWithDictionary:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyedValues</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>既然这样，可以选择手动一个个去实现。但是这样在数据少的时候可以试试，在数据比较多时就不太现实了，程序的可扩展性也不好。<br>
现在来了解下相对比较简单的两种解决方法：</p>

<h2>方式1.重写setValue:forKey:</h2>

<p>setValuesForKeysWithDictionary:的底层是调用setValue:forKey:的，所以可以考虑重写这个方法，并且判断其key是id时，手动转换成模型的成员变量名，这里假设把id对应成以下属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">ID</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了对应的属性名后，就可以重写底层方法了：
  - 如下所示，当判断到key的值为id时，我手动将key转换成了模型属性名，即ID</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">value</span> <span class="nf">forKey:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">key</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">key</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;id&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">setValue</span><span class="p">:</span><span class="n">value</span> <span class="nl">forKeyPath</span><span class="p">:</span><span class="s">@&quot;ID&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">super</span> <span class="nl">setValue</span><span class="p">:</span><span class="n">value</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，当使用setValuesForKeysWithDictionary:就不会出现模型中找不到对应的成员变量的错误了。</p>

<h2>方式2.使用runtime</h2>

<p>考虑到runtime和KVC的实现原理，可以使用另一种实现思路，就是<code>先在模型中找到对应的成员变量，然后从JSON字典中找到对应的数据进行赋值</code>。<br>
这里先要了解runtime的两个实例变量操作方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取成员变量列表</span>
</span><span class='line'><span class="n">Ivar</span> <span class="o">*</span> <span class="nf">class_copyIvarList</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// 获取成员变量名</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">ivar_getName</span> <span class="p">(</span> <span class="n">Ivar</span> <span class="n">v</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>详细实现步骤：<br></p>

<ul>
<li>1.获取模型中的所有实例变量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">outCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">Ivar</span> <span class="o">*</span><span class="n">ivars</span> <span class="o">=</span> <span class="n">class_copyIvarList</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">outCount</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2.将获取出来以'<em>&lsquo;开头的实例变量名去处&rsquo;</em>&lsquo;符号</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>   <span class="bp">NSString</span> <span class="o">*</span><span class="n">ivarName</span> <span class="o">=</span> <span class="l">@(</span><span class="n">ivar_getName</span><span class="p">(</span><span class="n">ivar</span><span class="p">)</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>   <span class="n">ivarName</span> <span class="o">=</span> <span class="p">[</span><span class="n">ivarName</span> <span class="nl">substringFromIndex</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>3.获取JOSN字典中对应的value，如果没有，手动设置我们传入的字典映射，以指定对应的模型变量名，最后调用setValue:forKeyPath:设置模型实例变量值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="n">dict</span><span class="p">[</span><span class="n">ivarName</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 由外界通知内部，模型中成员变量名对应字典里面的哪个key</span>
</span><span class='line'><span class="c1">// 这里是ID -&gt; id</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 这里的mapDict就是外界传入的映射字典</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mapDict</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">keyName</span> <span class="o">=</span> <span class="n">mapDict</span><span class="p">[</span><span class="n">ivarName</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="n">dict</span><span class="p">[</span><span class="n">keyName</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">[</span><span class="n">objc</span> <span class="nl">setValue</span><span class="p">:</span><span class="n">value</span> <span class="nl">forKeyPath</span><span class="p">:</span><span class="n">ivarName</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于需要针对所有模型使用，可以将其设置为NSObject分类。以上步骤的完整代码为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// dict  -&gt; 资源文件提供的字典</span>
</span><span class='line'><span class="c1">// mapDict  -&gt; 提供的key映射（实际变量名:资源文件key）</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">objcWithDict:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">dict</span> <span class="nf">mapDict:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">mapDict</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">objc</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 遍历模型中成员变量</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">outCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Ivar</span> <span class="o">*</span><span class="n">ivars</span> <span class="o">=</span> <span class="n">class_copyIvarList</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">outCount</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Ivar</span> <span class="n">ivar</span> <span class="o">=</span> <span class="n">ivars</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 成员变量名称</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">ivarName</span> <span class="o">=</span> <span class="l">@(</span><span class="n">ivar_getName</span><span class="p">(</span><span class="n">ivar</span><span class="p">)</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 获取出来的是`_`开头的成员变量名，需要截取`_`之后的字符串</span>
</span><span class='line'>        <span class="n">ivarName</span> <span class="o">=</span> <span class="p">[</span><span class="n">ivarName</span> <span class="nl">substringFromIndex</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="n">dict</span><span class="p">[</span><span class="n">ivarName</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// 由外界通知内部，模型中成员变量名对应字典里面的哪个key</span>
</span><span class='line'>        <span class="c1">// ID -&gt; id</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">mapDict</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="bp">NSString</span> <span class="o">*</span><span class="n">keyName</span> <span class="o">=</span> <span class="n">mapDict</span><span class="p">[</span><span class="n">ivarName</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">value</span> <span class="o">=</span> <span class="n">dict</span><span class="p">[</span><span class="n">keyName</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">objc</span> <span class="nl">setValue</span><span class="p">:</span><span class="n">value</span> <span class="nl">forKeyPath</span><span class="p">:</span><span class="n">ivarName</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">objc</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">itemWithDict:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">dict</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 传入key和实例变量名的映射字典@{@&quot;ID&quot;:@&quot;id&quot;}</span>
</span><span class='line'>    <span class="n">TPCItem</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="p">[</span><span class="n">TPCItem</span> <span class="nl">objcWithDict</span><span class="p">:</span><span class="n">dict</span> <span class="nl">mapDict</span><span class="p">:</span><span class="l">@{</span><span class="s">@&quot;ID&quot;</span><span class="o">:</span><span class="s">@&quot;id&quot;</span><span class="l">}</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看了一些相关框架的源码，有些框架的底层就是通过这种方式实现的，比如MJExtension就是通过获取对象里面的所有属性来进行操作的（这里个人感觉获取成员变量适用面会更广一点）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime基础]]></title>
    <link href="http://triplecc.github.io/blog/2015-01-10-runtimeji-chu/"/>
    <updated>2015-01-10T20:14:17+08:00</updated>
    <id>http://triplecc.github.io/blog/runtimeji-chu</id>
    <content type="html"><![CDATA[<p>Objective-C的runtime语言使它具备了动态语言的特性，也就是平时所说的“运行时”。在runtime的基础上，可以做很多平时难以想到事，或者化简原先 较为繁杂的解决方案。<br>
相对于静态语言，比如C以下程序</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'><span class="p">{}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行<code>clang -c</code>进行编译后，获取符号表<code>nm run.o</code>，可以得到全局唯一的符号<code>_run</code>，对函数run的调用直接参考链接后_run符号在代码段的地址</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mo">0000000000000010</span> <span class="n">T</span> <span class="n">_main</span>
</span><span class='line'><span class="mo">0000000000000000</span> <span class="n">T</span> <span class="n">_run</span>
</span></code></pre></td></tr></table></div></figure>


<p>对比Objective-C的以下函数<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">Dog</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run</span>
</span><span class='line'><span class="p">{}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Dog</span> <span class="o">*</span><span class="n">dog</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Dog</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">dog</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行<code>clang -rewrite-objc main.m</code>将其转换成底层C++文件后可以得到</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* @autoreleasepool */</span> <span class="p">{</span> <span class="n">__AtAutoreleasePool</span> <span class="n">__autoreleasepool</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Dog</span> <span class="o">*</span><span class="n">dog</span> <span class="o">=</span> <span class="p">((</span><span class="n">Dog</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)((</span><span class="n">Dog</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">objc_getClass</span><span class="p">(</span><span class="s">&quot;Dog&quot;</span><span class="p">),</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;alloc&quot;</span><span class="p">)),</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;init&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">dog</span><span class="p">,</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;run&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，对Objective-C编译前期，会将内部的方法调用，转换成调用<code>objc_msgSend</code>。也就是说，编译完成后，方法地址是不能确定的，需要在运行时，通过Selector进行查找，而这正是runtime的关键，也就是发送消息机制。</p>

<h2>runtime的基本要素</h2>

<p>如上面例子所示，在编译后<code>[dog run]</code>被编译器转化成了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">dog</span><span class="p">,</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;run&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 假设能省略(void (*)(id, SEL))(void *)和id指针强转[实际上还是需要的]</span>
</span><span class='line'><span class="c1">// sel_registerName表示注册一个selector</span>
</span><span class='line'><span class="n">objc_msgSend</span><span class="p">(</span><span class="n">dog</span><span class="p">,</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;run&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>将上面的情况抽取成统一的说法就是，在编译器编译后<code>[receiver message]</code>会被转化成以下形式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">objc_msgSend</span><span class="p">(</span><span class="n">receiver</span><span class="p">,</span> <span class="n">selector</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>objc_msgSend</code>是一个消息发送函数，它以消息接收者和方法名作为基础参数。<br>
在有参数的情况下，则会被转换为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">objc_msgSend</span><span class="p">(</span><span class="n">receiver</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="p">...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>消息的接收者receiver在接受到消息后，查找对应selector的实现，根据查找的结果可以进行若干种种不同的处理。<br>
更深层的了解，需要了解下对应的数据结构</p>

<h3>id</h3>

<p>上文中<code>objc_msgSend</code>的第一个参数有个强转类型，即id。id是可以指向对象的万能指针，查看runtime源码，得知其定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">objc_object</span> <span class="o">*</span><span class="kt">id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// objc_object</span>
</span><span class='line'><span class="k">struct</span> <span class="n">objc_object</span> <span class="p">{</span>
</span><span class='line'><span class="nl">private</span><span class="p">:</span>
</span><span class='line'>    <span class="kt">isa_t</span> <span class="n">isa</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// isa_t</span>
</span><span class='line'><span class="k">union</span> <span class="kt">isa_t</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">cls</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uintptr_t</span> <span class="n">bits</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据<code>union</code>联合的存储空间以大成员的存储空间计算性质，可以猜测<code>isa_t</code>的作用只是真不同位数处理器的优化，我们可以直接这样表示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">objc_object</span> <span class="p">{</span>
</span><span class='line'><span class="nl">private</span><span class="p">:</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">isa</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，<code>id</code>是一个指向<code>objc_object</code>结构体的指针（注意，在runtime中对象可以用结构体进行表示）。<br>
<code>objc_object</code>结构体包含了<code>Class isa</code>成员，而<code>isa</code>就是我们常说的创建一个对象时，用来指向所属类的<code>指针</code>。因此根据<code>isa</code>就可以获取对应的类。
- 注：C++中结构的作用被拓宽了，也表示定义一个类的类型，struct和class的区别就在默认类型上一个是public,一个是private，这里就直接描述为结构体了</p>

<h3>Class</h3>

<p>上文中，<code>isa</code>为<code>Class</code>类型，而<code>Class</code>则是<code>objc_class</code>指针类型的别名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">objc_class</span> <span class="o">*</span><span class="kt">Class</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而<code>objc_class</code>具体的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="nl">objc_class</span> <span class="p">:</span> <span class="n">objc_object</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Class ISA;</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">superclass</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">cache_t</span> <span class="n">cache</span><span class="p">;</span>             <span class="c1">// formerly cache pointer and vtable</span>
</span><span class='line'>    <span class="kt">class_data_bits_t</span> <span class="n">bits</span><span class="p">;</span>    <span class="c1">// class_rw_t * plus custom rr/alloc flags</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// class_data_bits_t</span>
</span><span class='line'><span class="k">struct</span> <span class="kt">class_data_bits_t</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="nl">public</span><span class="p">:</span>
</span><span class='line'>    <span class="kt">class_rw_t</span><span class="o">*</span> <span class="n">data</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="kt">class_rw_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">bits</span> <span class="o">&amp;</span> <span class="n">FAST_DATA_MASK</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// class_rw_t</span>
</span><span class='line'><span class="k">struct</span> <span class="kt">class_rw_t</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">version</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="kt">class_ro_t</span> <span class="o">*</span><span class="n">ro</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">union</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">method_list_t</span> <span class="o">**</span><span class="n">method_lists</span><span class="p">;</span>  <span class="c1">// RW_METHOD_ARRAY == 1</span>
</span><span class='line'>        <span class="kt">method_list_t</span> <span class="o">*</span><span class="n">method_list</span><span class="p">;</span>    <span class="c1">// RW_METHOD_ARRAY == 0</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">chained_property_list</span> <span class="o">*</span><span class="n">properties</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">protocol_list_t</span> <span class="o">**</span> <span class="n">protocols</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">firstSubclass</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">nextSiblingClass</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">demangledName</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// class_ro_t</span>
</span><span class='line'><span class="k">struct</span> <span class="kt">class_ro_t</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">instanceStart</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">instanceSize</span><span class="p">;</span>
</span><span class='line'><span class="cp">#ifdef __LP64__</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">ivarLayout</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">method_list_t</span> <span class="o">*</span> <span class="n">baseMethods</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">protocol_list_t</span> <span class="o">*</span> <span class="n">baseProtocols</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">ivar_list_t</span> <span class="o">*</span> <span class="n">ivars</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">weakIvarLayout</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">property_list_t</span> <span class="o">*</span><span class="n">baseProperties</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上文中已经介绍过<code>objc_object</code>结构体，<code>objc_class</code>继承自结构体<code>objc_object</code>。可以看出<code>objc_object</code>的<code>isa</code>为<code>private</code>类型成员变量，<code>objc_class</code>继承后无法访问，所以<code>objc_object</code>提供了以下两个成员函数:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">Class</span> <span class="nf">ISA</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// getIsa内部调用ISA返回isa_t联合中cls成员</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">getIsa</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，对<code>objc_class</code>重要的成员变量进行下解释:</p>

<ul>
<li><code>isa</code>为指向对象对应类的指针（这里注意一点，由于类也是一个对象（单例），所以这个单例中也有一个<code>isa</code>指针指向类对象所属的类-><code>metaClass</code>，即元类）</li>
<li><code>superclass</code>为指向父类的指针</li>
<li><code>cache</code>用于对调用方法的缓存，类似CPU先访问L1、L2、L3缓存的目的相似，它也是推断<code>最近调用的方法极有可能被二次调用</code>，并将其存入<code>cache</code>，在二次调用时先在<code>cache</code>查找方法，而不是直接在类的方法列表中查找</li>
<li><code>properties</code>为属性列表</li>
<li><code>protocols</code>为协议列表</li>
<li><code>method_lists</code>/<code>method_list</code>为方法列表</li>
<li><code>ivars</code>为成员变量列表</li>
<li><code>class_ro_t</code>结构体中存储的都是类基本的东西，比如获取<code>'load'</code>方法时，是从<code>baseMethods</code>获取相应的IMP函数实现的：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">IMP</span> <span class="n">objc_class</span><span class="o">::</span><span class="n">getLoadMethod</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">rwlock_assert_locked</span><span class="p">(</span><span class="o">&amp;</span><span class="n">runtimeLock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="kt">method_list_t</span> <span class="o">*</span><span class="n">mlist</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">isRealized</span><span class="p">());</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">ISA</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">isRealized</span><span class="p">());</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">isMetaClass</span><span class="p">());</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">ISA</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">isMetaClass</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mlist</span> <span class="o">=</span> <span class="n">ISA</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">ro</span><span class="o">-&gt;</span><span class="n">baseMethods</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mlist</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mlist</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">method_t</span> <span class="o">*</span><span class="n">m</span> <span class="o">=</span> <span class="n">method_list_nth</span><span class="p">(</span><span class="n">mlist</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>            <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">sel_cname</span><span class="p">(</span><span class="n">m</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;load&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">m</span><span class="o">-&gt;</span><span class="n">imp</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中先了解下<code>ivar_list_t</code>、<code>method_list_t</code>、<code>cache_t</code>的结构定义：<br></p>

<p><code>ivar_list_t</code>的结构为：</p>

<ul>
<li><code>ivar_t</code>就是对应的成员变量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="kt">ivar_list_t</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">entsize</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">ivar_t</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>method_list_t</code>为：</p>

<ul>
<li>其中<code>method_iterator</code>为结构体自己构造的一个迭代器，用来访问方法，可以看到，构造的迭代器结构体中包含了<code>method</code>成员变量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="kt">method_list_t</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">entsize_NEVER_USE</span><span class="p">;</span>  <span class="c1">// high bits used for fixup markers</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">method_t</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// iterate methods, taking entsize into account</span>
</span><span class='line'>    <span class="c1">// fixme need a proper const_iterator</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">method_iterator</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">uint32_t</span> <span class="n">entsize</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">uint32_t</span> <span class="n">index</span><span class="p">;</span>  <span class="c1">// keeping track of this saves a divide in operator-</span>
</span><span class='line'>        <span class="kt">method_t</span><span class="o">*</span> <span class="n">method</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>cache_t</code>为：</p>

<ul>
<li>可以看出<code>bucket_t</code>包含了一个<code>IMP</code>类型的私有成员，供查找后调用实现</li>
<li><code>_occupied</code>和<code>_mask</code>分别表示<code>实际占用</code>的缓存<em>buckets总数和<code>分配</code>的缓存</em>buckets总数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="kt">cache_t</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="kt">bucket_t</span> <span class="o">*</span><span class="n">_buckets</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">mask_t</span> <span class="n">_mask</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">mask_t</span> <span class="n">_occupied</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// bucket_t</span>
</span><span class='line'><span class="k">struct</span> <span class="kt">bucket_t</span> <span class="p">{</span>
</span><span class='line'><span class="nl">private</span><span class="p">:</span>
</span><span class='line'>    <span class="kt">cache_key_t</span> <span class="n">_key</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">_imp</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上文还涉及到了一个概念<code>metaClass</code>元类，元类为类对象所属的类，以实例解释：<br>
当我们调用类方法时，消息的接收者即为类，如文中一开始的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Dog</span> <span class="o">*</span><span class="n">dog</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Dog</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>alloc</code>消息即发送给了<code>Dog</code>类，编译转换后的代码为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Dog</span> <span class="o">*</span><span class="n">dog</span> <span class="o">=</span> <span class="p">((</span><span class="n">Dog</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)((</span><span class="n">Dog</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">objc_getClass</span><span class="p">(</span><span class="s">&quot;Dog&quot;</span><span class="p">),</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;alloc&quot;</span><span class="p">)),</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;init&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们只需要关注这一行：</p>

<ul>
<li>这里获取到的是类对象，只要再获取一次就得到了元类</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// objc_getClass表示根据对象名获取对应的类</span>
</span><span class='line'><span class="n">objc_getClass</span><span class="p">(</span><span class="s">&quot;Dog&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取元类</span>
</span><span class='line'><span class="n">objc_getClass</span><span class="p">(</span><span class="n">objc_getClass</span><span class="p">(</span><span class="s">&quot;Dog&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于元类，苹果提供了这么一张表：<br>
<img src="http://triplecc.github.io/images/Snip20150711_1.png" alt="" /><br>
图中的实线是<code>superclass</code>指针，虚线是<code>isa</code>指针。可以看到，根元类的超类<code>NSObject</code>(Root class)并没有对应的超类，并且，它的<code>isa</code>指针指向了自己。
总结一下：</p>

<ul>
<li>每个实例对象的<code>isa</code>都指向了所属的<code>类</code></li>
<li>每个类对象的<code>isa</code>都指向了所属的类，即<code>元类</code>，其<code>superclass</code>指针指向继承的<code>父类</code></li>
<li>每个元类的<code>isa</code>都指向了<code>超类</code>，即<code>NSObject</code></li>
</ul>


<h3>Ivar</h3>

<p><code>Ivar</code>，我把它理解成<code>instance variable</code>，也就是实例变量，可以观察它的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="kt">ivar_t</span> <span class="o">*</span><span class="n">Ivar</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ivar_t</span>
</span><span class='line'><span class="k">struct</span> <span class="kt">ivar_t</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int32_t</span> <span class="o">*</span><span class="n">offset</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">type</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// alignment is sometimes -1; use alignment() instead</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">alignment_raw</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// 内存中数据对齐（如字对齐、半字对齐等）</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="nf">alignment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">alignment_raw</span> <span class="o">==</span> <span class="o">~</span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1U</span> <span class="o">&lt;&lt;</span> <span class="n">WORD_SHIFT</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">alignment_raw</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Ivar</code>其实是指向<code>ivar_t</code>结构体的指针，它包含了实例变量名（name）、类型（type）、相对对象地址偏移（offset）以及内存数据对齐等信息。<br>
跟多关于实例变量的剖析可以查看<a href="http://quotation.github.io/objc/2015/05/21/objc-runtime-ivar-access.html">Objective-C类成员变量深度剖析</a></p>

<h3>Method</h3>

<p>从以下定义的结构体可以看出，<code>Method</code>主要住用为关联了方法名<code>SEL</code>和方法的实现<code>IMP</code>，当遍通过<code>Method</code>自己的定义的迭代器查找方法名<code>SEL</code>时，就可以找到对应的方法实现<code>IMP</code>，从而调用方法的实现执行相关的操作。<code>types</code>表示方法实现的参数以及返回值类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="kt">method_t</span> <span class="o">*</span><span class="n">Method</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// method_t</span>
</span><span class='line'><span class="k">struct</span> <span class="kt">method_t</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">types</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">imp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>SEL</h3>

<p><code>SEL</code>为方法选择器，观察下它的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">objc_selector</span> <span class="o">*</span><span class="kt">SEL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出<code>SEL</code>实际是<code>objc_selector</code>指针类型的别名，它用于表示运行时方法的名字，以便进行方法实现的查找。因为要对应方法实现，所以每一个方法对应的<code>SEL</code>都是唯一的。因此它不具备C++可以进行函数重载的特性，当两个方法名一样时，会发生编译错误，即使参数不一样。</p>

<h3>IMP</h3>

<p><code>IMP</code>的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#if !OBJC_OLD_DISPATCH_PROTOTYPES</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="kt">IMP</span><span class="p">)(</span><span class="kt">void</span> <span class="cm">/* id, SEL, ... */</span> <span class="p">);</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">id</span> <span class="p">(</span><span class="o">*</span><span class="kt">IMP</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出<code>IMP</code>其实就是一个函数指针的别名，也可以把它理解为函数名。它有两个必须的参数：<br></p>

<ul>
<li><code>id</code>，为<code>self</code>指针，表示消息接收者</li>
<li><code>SEL</code>，方法选择器，表示一个方法的<code>selector</code>指针</li>
<li>后面的为传送消息的一些参数<br></li>
</ul>


<p>在某些情况下，通过获取<code>IMP</code>而直接调用方法实现，可以直接跳过消息传递机制，像C语言调用函数那样，在一定程度上，可以提供程序的性能。</p>

<h3>消息传递</h3>

<p>了解完runtime中一些必要的元素，继续回到文章开头的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">Dog</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run</span>
</span><span class='line'><span class="p">{}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Dog</span> <span class="o">*</span><span class="n">dog</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Dog</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">dog</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译器将其转换成了：
  - 为了看起来简洁点，我把一些强制转换变为别名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="p">(</span><span class="n">Dog</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">MyImp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* @autoreleasepool */</span> <span class="p">{</span> <span class="n">__AtAutoreleasePool</span> <span class="n">__autoreleasepool</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Dog</span> <span class="o">*</span><span class="n">dog</span> <span class="o">=</span> <span class="p">((</span><span class="n">MyImp</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)((</span><span class="n">MyImp</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">objc_getClass</span><span class="p">(</span><span class="s">&quot;Dog&quot;</span><span class="p">),</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;alloc&quot;</span><span class="p">)),</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;init&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="p">((</span><span class="n">MyImp</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">dog</span><span class="p">,</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;run&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的代码可以看出，第二个<code>objc_msgSend</code>返回值是作为第一个<code>objc_msgSend</code>的首个参数的。<br>
上文已经说过，<code>[receiver message]</code>会被转化成以下形式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">objc_msgSend</span><span class="p">(</span><span class="n">receiver</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="p">...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来看看它主要做了哪几件事情：</p>

<ul>
<li>根据<code>receiver</code>的<code>isa</code>指针，获取到所属类，先在类的<code>cache</code>即缓存中查找<code>selector</code>，如果没有找到，再在类的<code>method_lists</code>即方法列表中查找</li>
<li>如果没有找到<code>selector</code>，则会沿着下图类的联系路径一直查找，直到<code>NSObject</code>类</li>
<li>如果找到了<code>selector</code>，则获取实现方法并调用，并传入接收者对象以及方法的所有参数；没有找到时走方法解析和消息转发流程。</li>
<li>将实现的返回值作为它自己的返回值<br>
<img src="http://triplecc.github.io/images/Snip20150711_2.png" alt="" /></li>
</ul>


<p>除此之外，<code>objc_msgSend</code>还会传递两个隐藏参数：</p>

<ul>
<li>消息接收对象（<code>self</code>引用的对象）</li>
<li>方法选择器（<code>_cmd</code>，调用的方法）</li>
</ul>


<p><code>objc_msgSend</code>找到方法实现后，会在调用该实现时，传入这两个隐藏参数，这样就能够在方法实现里面里面获取消息接受对象，即方法调用者了。<br>
<code>隐藏参数</code>表示这两个参数在源代码方法的定义中并没有声明这两个参数，这两个参数是在<code>代码编译期间</code>，被<code>插入</code>到实现中的。</p>

<h3>self和super的联系</h3>

<p>根据上文对<code>objc_msgSend</code>的了解，可以解决以下代码输出一致问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">Dog</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nb">super</span> <span class="k">class</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Dog</span> <span class="o">*</span><span class="n">dog</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Dog</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">dog</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="mi">5491</span><span class="o">:</span><span class="mi">173185</span><span class="p">]</span> <span class="n">Dog</span>
</span><span class='line'><span class="p">[</span><span class="mi">5491</span><span class="o">:</span><span class="mi">173185</span><span class="p">]</span> <span class="n">Dog</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是为什么呢？先来看看编译后的<code>-run</code>方法的情况:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">_I_Dog_run</span><span class="p">(</span><span class="n">Dog</span> <span class="o">*</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">((</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">__NSConstantStringImpl__var_folders_50_3f5nr6h10h1csn8byghy30q80000gn_T_main_d06ff4_mi_0</span><span class="p">,</span> <span class="p">((</span><span class="kt">Class</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="nb">self</span><span class="p">,</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;class&quot;</span><span class="p">)));</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">((</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">__NSConstantStringImpl__var_folders_50_3f5nr6h10h1csn8byghy30q80000gn_T_main_d06ff4_mi_1</span><span class="p">,</span> <span class="p">((</span><span class="kt">Class</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="n">__rw_objc_super</span> <span class="o">*</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSendSuper</span><span class="p">)((</span><span class="n">__rw_objc_super</span><span class="p">){</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nb">self</span><span class="p">,</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">class_getSuperclass</span><span class="p">(</span><span class="n">objc_getClass</span><span class="p">(</span><span class="s">&quot;Dog&quot;</span><span class="p">))</span> <span class="p">},</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;class&quot;</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里面只要关注两句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// [self class]</span>
</span><span class='line'><span class="p">((</span><span class="kt">Class</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="nb">self</span><span class="p">,</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;class&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [super class]</span>
</span><span class='line'><span class="p">((</span><span class="kt">Class</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="n">__rw_objc_super</span> <span class="o">*</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSendSuper</span><span class="p">)((</span><span class="n">__rw_objc_super</span><span class="p">){</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nb">self</span><span class="p">,</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">class_getSuperclass</span><span class="p">(</span><span class="n">objc_getClass</span><span class="p">(</span><span class="s">&quot;Dog&quot;</span><span class="p">))</span> <span class="p">},</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;class&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先我们需要了解<code>self</code>和<code>super</code>的差异：</p>

<ul>
<li><code>super</code>：<code>编译标识符</code>，告诉编译器，调用方法时，去调用父类的方法，而不是本类的方法</li>
<li><code>self</code>：<code>隐藏参数</code>，每个方法的实现第一个参数就是<code>self</code></li>
</ul>


<p>这里可以看出，编译后，经过<code>super</code>标识符修饰的方法调用，会调用<code>objc_msgSendSuper</code>函数来进行消息的发送，而不是<code>objc_msgSend</code>。先来了解下<code>objc_msgSendSuper</code>的声明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="nf">objc_msgSendSuper</span> <span class="p">(</span> <span class="k">struct</span> <span class="n">objc_super</span> <span class="o">*</span><span class="nb">super</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">op</span><span class="p">,</span> <span class="p">...</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>objc_super</code>的定义为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// receiver   消息实际接收者</span>
</span><span class='line'><span class="c1">// class      指向当前类的父类</span>
</span><span class='line'><span class="k">struct</span> <span class="n">objc_super</span> <span class="p">{</span> <span class="kt">id</span> <span class="n">receiver</span><span class="p">;</span> <span class="kt">Class</span> <span class="k">class</span><span class="p">;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>结合以上信息，我们可以知道：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">__rw_objc_super</span><span class="p">){</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nb">self</span><span class="p">,</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">class_getSuperclass</span><span class="p">(</span><span class="n">objc_getClass</span><span class="p">(</span><span class="s">&quot;Dog&quot;</span><span class="p">))</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是对结构体<code>objc_super</code>的赋值，也就是说<code>objc_super-&gt;receiver=self</code>。到这里可能就有点明了了，<code>super</code>只是告诉编译器，去查找父类中的<code>class</code>方法，当找到之后，使用<code>objc_super-&gt;receiver</code>即<code>self</code>进行调用。用流程表示就是：<br>
<code>[super class]-&gt;objc_msgSendSuper(objc_super{self, superclass)}, sel_registerName("class"))-&gt;objc_msgSend(objc_super-&gt;self, sel_registerName("class"))＝[self class]</code>。<br>
可以看出两者输出结果一致的关键就是，<code>[self class]</code>的消息接收者和<code>[super class]</code>的消息接收者一样，都是调用方法的实例对象。</p>

<h3>方法解析和消息转发</h3>

<p>当上文<code>objc_msgSend</code>处理流程中，<code>selector</code>没有找到时，会触发三个阶段，在这三个阶段都可以进行相关处理使程序不抛出异常：
- Method Resolution  (动态方法解析)
- Fast Forwarding    (备用接收者)
- Normal Forwarding  (完整转发)<br></p>

<p>由于实际代码中很少有看到这种操作，所以这里不做详细解释，参考这个资料即可<a href="http://southpeak.github.io/blog/2014/11/03/objective-c-runtime-yun-xing-shi-zhi-san-:fang-fa-yu-xiao-xi-zhuan-fa/">Objective-C Runtime 运行时之三：方法与消息</a></p>

<h3>参考</h3>

<p>1.<a href="http://southpeak.github.io/blog/2014/10/25/objective-c-runtime-yun-xing-shi-zhi-lei-yu-dui-xiang/">Objective-C Runtime 运行时之一：类与对象</a><br>
2.<a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/">Objective-C Runtime</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[监听键盘删除按钮]]></title>
    <link href="http://triplecc.github.io/blog/2015-01-02-jian-ting-jian-pan-shan-chu-an-niu/"/>
    <updated>2015-01-02T16:12:59+08:00</updated>
    <id>http://triplecc.github.io/blog/jian-ting-jian-pan-shan-chu-an-niu</id>
    <content type="html"><![CDATA[<p>键盘监听这一块老是容易记混，所以纪录下。</p>

<p><img src="http://triplecc.github.io/images/Snip20150806_8.png" alt="" /><br></p>

<p>如上图，需要监听键盘的删除按钮的点击。<br>
删除按钮使用UITextFiled的代理、通知、target，是无法进行监听的，这三种方式只能监听一般字符的输入。<br></p>

<h4>监听键盘删除按钮方法</h4>

<p>删除按钮的监听需要自定义UITextFiled，并重写实现以下方法:</p>

<ul>
<li>每点击一次删除按键，都会调用下面函数一次</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">deleteBackward</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>三种监听方式的区别</h4>

<p>可实现实时监听：<br></p>

<ul>
<li>target、通知</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">textFiled</span> <span class="nl">addTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">textChange</span><span class="p">:)</span> <span class="nl">forControlEvents</span><span class="p">:</span><span class="n">UIControlEventEditingChanged</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">textChange</span><span class="p">:)</span> <span class="nl">name</span><span class="p">:</span><span class="n">UITextFieldTextDidChangeNotification</span> <span class="nl">object</span><span class="p">:</span><span class="n">textFiled</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>不能实现实施监听：<br></p>

<ul>
<li>代理</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">textField</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preview功能结合Autorezing的应用]]></title>
    <link href="http://triplecc.github.io/blog/2014-12-04-autorezingde-ying-yong/"/>
    <updated>2014-12-04T21:34:02+08:00</updated>
    <id>http://triplecc.github.io/blog/autorezingde-ying-yong</id>
    <content type="html"><![CDATA[<h2>Autoresizing的使用［前提是关闭Autolayout功能］</h2>

<ol>
<li><p>在xib/storyboard中使用：</p></li>
</ol>


<p><img src="http://triplecc.github.io/images/Snip20150531_2.png" alt="" /></p>

<p>如图，在左边剪头中表示控件的左边和上边相对父控件固定，并且长度和高度可变，在右边箭头中可以实时查看具体的效果。</p>

<p>原图：
<img src="http://triplecc.github.io/images/Snip20150531_8.png" alt="" /></p>

<p>在Preview界面中的效果如图：</p>

<p><img src="http://triplecc.github.io/images/Snip20150531_3.png" alt="" /></p>

<p>可以看出对于不同屏幕大小或者横竖屏情况，控件始终在右下角，不会被覆盖。</p>

<ol>
<li><p>Autoresizing代码使用：</p></li>
</ol>


<p>UIViewAutoresizing提供以下枚举类型来对视图进行限制：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="n">UIViewAutoresizingNone</span>                 <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 这里主要注意如左边可伸缩，则表示右边为固定值</span>
</span><span class='line'> <span class="n">UIViewAutoresizingFlexibleLeftMargin</span>   <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span> <span class="err">距离父控件左边的间距是伸缩的（不固定的）</span>
</span><span class='line'> <span class="n">UIViewAutoresizingFlexibleRightMargin</span>  <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">,</span> <span class="err">距离父控件右边的间距是伸缩的（不固定的）</span>
</span><span class='line'> <span class="n">UIViewAutoresizingFlexibleTopMargin</span>    <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">,</span> <span class="err">距离父控件顶部的间距是伸缩的（不固定的）</span>
</span><span class='line'> <span class="n">UIViewAutoresizingFlexibleBottomMargin</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">,</span> <span class="err">距离父控件底部的间距是伸缩的（不固定的）</span>
</span><span class='line'>
</span><span class='line'> <span class="n">UIViewAutoresizingFlexibleWidth</span>        <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span> <span class="err">宽度跟随父控件的宽度进行自动伸缩</span>
</span><span class='line'> <span class="n">UIViewAutoresizingFlexibleHeight</span>       <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">,</span> <span class="err">高度跟随父控件的高度进行自动伸缩</span>
</span></code></pre></td></tr></table></div></figure>


<p>将对应的autoresizingMask属性赋上面值即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 固定与父控件的flet、top间距，并让宽度可变</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">myView</span><span class="p">.</span><span class="n">autoresizingMask</span> <span class="o">=</span> <span class="n">UIViewAutoresizingFlexibleRightMargin</span> <span class="o">|</span> <span class="n">UIViewAutoresizingFlexibleBottomMargin</span> <span class="o">|</span> <span class="n">UIViewAutoresizingFlexibleWidth</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>原图：
<img src="http://triplecc.github.io/images/Snip20150531_5.png" alt="" /></p>

<p>翻转图：
<img src="http://triplecc.github.io/images/Snip20150531_6.png" alt="" /></p>

<h2>Autoresizing的特点：</h2>

<ul>
<li>子控件可以跟随父控件的行为自动发生相应的变化</li>
<li>前提是：<strong>关闭Autolaout功能</strong></li>
<li>局限性

<ul>
<li><strong>只能</strong>解决<strong>子控件跟父控件</strong>的相对关系问题</li>
<li><strong>不能</strong>解决<strong>兄弟控</strong>件的相对关系</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设置cell周边间距]]></title>
    <link href="http://triplecc.github.io/blog/2014-11-02-she-zhi-cellzhou-bian-jian-ju/"/>
    <updated>2014-11-02T00:01:20+08:00</updated>
    <id>http://triplecc.github.io/blog/she-zhi-cellzhou-bian-jian-ju</id>
    <content type="html"><![CDATA[<p>在做过的或者主流的一些APP里面，或多或少都会存在这样的cell：<br>
cell左右边有空隙，添加分割线<br>
<img src="http://triplecc.github.io/images/Snip20150724_3.png" alt="" /><br>
这里总结了自己在设置cell间距的一些方法。</p>

<ul>
<li>方式1：通过修改contentView的x,width,height来实现</li>
<li>设置cell背景颜色为clearColor，设置contentView的背景颜色为白色</li>
<li>然后添加以下代码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>   <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">layoutSubviews</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 修改contentView来设置分割线和边距</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">contentView</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">contentView</span><span class="p">.</span><span class="n">width</span> <span class="o">-=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">contentView</span><span class="p">.</span><span class="n">height</span> <span class="o">-=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方式2：修改cell的x,width,height来实现，cell的y值不变

<ul>
<li>重写setFrame，拦截系统对cell的设置（因为直接设置的话，会被系统设置的默认值覆盖掉）</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setFrame</span><span class="p">:(</span><span class="bp">CGRect</span><span class="p">)</span><span class="n">frame</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">-=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">setFrame</span><span class="p">:</span><span class="n">frame</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方式3：在cell里面添加UIView，设置好UIView的大小以适应间距后，再在UIView上面添加子控件</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIAlertController的使用]]></title>
    <link href="http://triplecc.github.io/blog/2014-10-20-uialertcontrollerde-shi-yong/"/>
    <updated>2014-10-20T16:46:46+08:00</updated>
    <id>http://triplecc.github.io/blog/uialertcontrollerde-shi-yong</id>
    <content type="html"><![CDATA[<p>iOS8中，苹果推出了UIAlertController来代替代替UIAlertView以及UIActionSheet这两货的功能和作用。具体使用很简单。</p>

<h2>UIAlertController的使用</h2>

<p>UIAlertController集成了UIAlertView和UIActionScreen<br>
UIAlertControllerStyleAlert->UIAlertView<br>
UIAlertControllerStyleActionSheet->UIActionScreen<br>
- 创建<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIAlertController</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIAlertController</span> <span class="nl">alertControllerWithTitle</span><span class="p">:</span><span class="s">@&quot;请输入团购信息&quot;</span> <span class="nl">message</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">preferredStyle</span><span class="p">:</span><span class="n">UIAlertControllerStyleAlert</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加按钮<br></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">alert</span> <span class="nl">addAction</span><span class="p">:[</span><span class="n">UIAlertAction</span> <span class="nl">actionWithTitle</span><span class="p">:</span><span class="s">@&quot;取消&quot;</span> <span class="nl">style</span><span class="p">:</span><span class="n">UIAlertActionStyleCancel</span> <span class="nl">handler</span><span class="p">:</span><span class="nb">nil</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">alert</span> <span class="nl">addAction</span><span class="p">:[</span><span class="n">UIAlertAction</span> <span class="nl">actionWithTitle</span><span class="p">:</span><span class="s">@&quot;确定&quot;</span> <span class="nl">style</span><span class="p">:</span><span class="n">UIAlertActionStyleDestructive</span> <span class="nl">handler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">UIAlertAction</span> <span class="o">*</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 执行确定动作</span>
</span><span class='line'><span class="p">}]];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加文本输入框[<code>UIAlertControllerStyleAlert类型才可以添加</code>]<br></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">alert</span> <span class="nl">addTextFieldWithConfigurationHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UITextField</span> <span class="o">*</span><span class="n">textField</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="n">textField</span><span class="p">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="s">@&quot;请输入名字&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="p">[</span><span class="n">alert</span> <span class="nl">addTextFieldWithConfigurationHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UITextField</span> <span class="o">*</span><span class="n">textField</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="n">textField</span><span class="p">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="s">@&quot;请输入年龄&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>显示控制器</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">presentViewController</span><span class="p">:</span><span class="n">alert</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span> <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[双击底部工具栏Item对应UITableView重新刷新]]></title>
    <link href="http://triplecc.github.io/blog/2014-10-05-shuang-ji-di-bu-gong-ju-lan-itemdui-ying-uitableviewzhong-xin-shua-xin/"/>
    <updated>2014-10-05T12:46:16+08:00</updated>
    <id>http://triplecc.github.io/blog/shuang-ji-di-bu-gong-ju-lan-itemdui-ying-uitableviewzhong-xin-shua-xin</id>
    <content type="html"><![CDATA[<p>今天发现新浪手机客户端双击底部按钮，对应的微博页面会返回到起始位置，感觉挺有意思的，就在自己的项目demo中用了下。</p>

<p>大体可以采用两种方法来实现:</p>

<ul>
<li>1、使用通知</li>
<li>2、添加target</li>
</ul>


<p>注意点：
  - 更改UITabBarController<code>拥有</code>的tabBar的代理是不允许的，以下代码运行会崩溃，所以<code>不能用工具类单例对tabBar的变化进行监听</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">tabBar</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="p">[</span><span class="n">TPCBusinessTool</span> <span class="n">sharedTPCBusinessTool</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用通知方式</h2>

<h6>一、创建通知类型</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">TPCNotificationDoubleClickTabBarItem</span> <span class="o">=</span> <span class="s">@&quot;TPCNotificationDoubleClickTabBarItem&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h6>二、创建业务工具类</h6>

<ul>
<li>1、让业务工具单例遵守UITabBarControllerDelegate协议，并称为tabBarControllerDelegate的代理</li>
<li>2、实现点击调用的代理方法，判断是否为重复点击情况，如果是重复点击，就发送通知</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">TPCBusinessTool</span><span class="p">()</span> <span class="o">&lt;</span><span class="bp">UITabBarControllerDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="c1">// 最后一次选中的索引</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSUInteger</span> <span class="n">lastSelectedIndex</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TPCBusinessTool</span>
</span><span class='line'><span class="n">TPCInstanceM</span><span class="p">(</span><span class="n">TPCBusinessTool</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 处理双击tabBarItem</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleTabBarDoubleClick</span><span class="p">:(</span><span class="bp">UITabBarController</span> <span class="o">*</span><span class="p">)</span><span class="n">tabBarVc</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">tabBarVc</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="p">[</span><span class="n">TPCBusinessTool</span> <span class="n">sharedTPCBusinessTool</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// tabBarController代理方法</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">tabBarController</span><span class="p">:(</span><span class="bp">UITabBarController</span> <span class="o">*</span><span class="p">)</span><span class="n">tabBarController</span> <span class="nl">didSelectViewController</span><span class="p">:(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">viewController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 如果当前点击的索引和上一次一样，就发送通知</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_lastSelectedIndex</span> <span class="o">==</span> <span class="n">tabBarController</span><span class="p">.</span><span class="n">selectedIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">postNotificationName</span><span class="p">:</span><span class="n">TPCNotificationDoubleClickTabBarItem</span> <span class="nl">object</span><span class="p">:</span><span class="n">tabBarController</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 纪录最后一次选中的索引</span>
</span><span class='line'>    <span class="n">_lastSelectedIndex</span> <span class="o">=</span> <span class="n">tabBarController</span><span class="p">.</span><span class="n">selectedIndex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h6>三、在应用加载完成时调用业务工具处理重复点击方法</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="bp">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// 处理双击底部工具栏事件</span>
</span><span class='line'>    <span class="p">[</span><span class="n">TPCBusinessTool</span> <span class="nl">handleTabBarDoubleClick</span><span class="p">:</span><span class="n">tabBarController</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>四、在想要监听重复点击事件的控制器中对通知进行监听</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupBasic</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">doubleClickTabBarItemToRefresh</span><span class="p">:)</span> <span class="nl">name</span><span class="p">:</span><span class="n">TPCNotificationDoubleClickTabBarItem</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doubleClickTabBarItemToRefresh:</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 让当前UITableView滚动到顶端</span>
</span><span class='line'>    <span class="p">[</span><span class="n">TPCTopWindow</span> <span class="n">scrollToTop</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>添加target方式</h2>

<h6>一、在自定义tabBar中添加对tabBarButtonItem的监听</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// 是否已经添加</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">BOOL</span> <span class="n">hasAddedTarget</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">UIControl</span> <span class="o">*</span><span class="n">button</span> <span class="k">in</span> <span class="nb">self</span><span class="p">.</span><span class="n">subviews</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">hasAddedTarget</span> <span class="o">==</span> <span class="nb">NO</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">button</span> <span class="nl">addTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">clickTabBarItem</span><span class="p">)</span> <span class="nl">forControlEvents</span><span class="p">:</span><span class="n">UIControlEventTouchUpInside</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">hasAddedTarget</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>二、实现监听方法</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">clickTabBarItem</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="bp">UITabBarItem</span> <span class="o">*</span><span class="n">lastSelectedItem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">lastSelectedItem</span> <span class="o">==</span> <span class="nb">self</span><span class="p">.</span><span class="n">selectedItem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">postNotificationName</span><span class="p">:</span><span class="n">TPCNotificationDoubleClickTabBarItem</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lastSelectedItem</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">selectedItem</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>三、在需要监听重复点击事件的控制器中接受通知</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupBasic</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">doubleClickTabBarItemToRefresh</span><span class="p">:)</span> <span class="nl">name</span><span class="p">:</span><span class="n">TPCNotificationDoubleClickTabBarItem</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doubleClickTabBarItemToRefresh:</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 刷新数据操作</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义UITextView]]></title>
    <link href="http://triplecc.github.io/blog/2014-09-11-zi-ding-yi-uitextview/"/>
    <updated>2014-09-11T00:06:02+08:00</updated>
    <id>http://triplecc.github.io/blog/zi-ding-yi-uitextview</id>
    <content type="html"><![CDATA[<p>由于UITextView没有占位文字，所以在大多数使用的情况下（特别是用户建议这一块使用的特别多）还是需要自定义。</p>

<p>其中分两种情况：</p>

<ul>
<li>通过drawRect绘制占位字符

<ul>
<li>不可以随UITextView的滚动而滚动</li>
<li>要点：<img src="http://triplecc.github.io/images/Snip20150805_8.png" alt="" /></li>
</ul>
</li>
<li>通过添加UILabel作为占位字符

<ul>
<li>可以随UITextView的滚动而滚动</li>
</ul>
</li>
</ul>


<p>这里只描述添加UILabel作为占位字符，因为感觉大多数情况还是需要滚动的。。。</p>

<h2>添加UILabel作为占位字符</h2>

<p>由于这里需要占位字符也能滚动，所以采用添加UILabel的方式<br></p>

<h6>对UILabel进行懒加载</h6>

<p>如果没有占位字符，就不需要创建UILabel，和苹果做的方式一致</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UILabel</span> <span class="o">*</span><span class="p">)</span><span class="nf">placeholderLabel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_placeholderLabel</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">UILabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// 设置默认属性</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">grayColor</span><span class="p">];</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">TPCScreenW</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">label</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mf">12.0</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_placeholderLabel</span> <span class="o">=</span> <span class="n">label</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_placeholderLabel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>UILabel的尺寸计算放在layoutSubviews中</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">layoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 每次更新属性都重新计算尺寸</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">placeholderLabel</span> <span class="n">sizeToFit</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>输入文字占位字符消失</h6>

<p>UITextView有代理，但是自己成为自己的代理总归是非主流的，所以采用<code>通知监听的方法</code></p>

<ul>
<li>注意：这里需要开启<code>alwaysBounceVertical</code> ，否则无法进行滚动</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">frame</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">frame</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">textViewTextDidChange</span><span class="p">:)</span> <span class="nl">name</span><span class="p">:</span><span class="n">UITextViewTextDidChangeNotification</span> <span class="nl">object</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 允许垂直方向有弹簧效果，这句一定要加否则会无法滑动</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">alwaysBounceVertical</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">removeObserver</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通知监听方法，对占位文字进行隐藏：</p>

<ul>
<li>可以通过<code>hasText</code>判断是否有文字

<ul>
<li>只要遵守了<code>UIKeyInput</code>协议，就有这个方法（说明UITextFiled也有）</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">textViewTextDidChange:</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">UITextView</span> <span class="o">*</span><span class="n">textView</span> <span class="o">=</span> <span class="n">notification</span><span class="p">.</span><span class="n">object</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 长度不为0就隐藏占位label</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">placeholderLabel</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">textView</span><span class="p">.</span><span class="n">hasText</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>对外接口完善</h6>

<p>当改变占位属性时，需要实时更新占位文字，所以调用<code>setNeedsDisplay</code></p>

<ul>
<li><img src="http://triplecc.github.io/images/Snip20150805_10.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setPlaceholder:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">placeholder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_placeholder</span> <span class="o">=</span> <span class="p">[</span><span class="n">placeholder</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">placeholderLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">placeholder</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setPlaceholderColor:</span><span class="p">(</span><span class="bp">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">placeholderColor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_placeholderColor</span> <span class="o">=</span> <span class="n">placeholderColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">placeholderLabel</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">placeholderColor</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFont:</span><span class="p">(</span><span class="bp">UIFont</span> <span class="o">*</span><span class="p">)</span><span class="nv">font</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">setFont</span><span class="p">:</span><span class="n">font</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">placeholderLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="n">font</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">setNeedsDisplay</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setText:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">text</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">setText</span><span class="p">:</span><span class="n">text</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">placeholderLabel</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setAttributedText:</span><span class="p">(</span><span class="bp">NSAttributedString</span> <span class="o">*</span><span class="p">)</span><span class="nv">attributedText</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">setAttributedText</span><span class="p">:</span><span class="n">attributedText</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">placeholderLabel</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">attributedText</span><span class="p">.</span><span class="n">string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义提示宏]]></title>
    <link href="http://triplecc.github.io/blog/2014-09-01-zi-ding-yi-ti-shi-hong/"/>
    <updated>2014-09-01T20:22:33+08:00</updated>
    <id>http://triplecc.github.io/blog/zi-ding-yi-ti-shi-hong</id>
    <content type="html"><![CDATA[<ul>
<li>自动提示宏

<ul>
<li>什么情况下需要用到自动提示宏

<ul>
<li>使用KVO，KVC时使用</li>
</ul>
</li>
<li><code>keyPath(objc, keyPath) @(((void)objc.keyPath, #keyPath))</code>

<ul>
<li><code>void</code> 去警告</li>
<li><code>#</code> 表示转成c字符串</li>
<li><code>,</code> 逗号表达式，取最右的值</li>
<li><code>@()</code> 基本类型转oc类型</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView右侧标签索引需求]]></title>
    <link href="http://triplecc.github.io/blog/2014-08-29-tableviewyou-ce-biao-qian-suo-yin-xu-qiu/"/>
    <updated>2014-08-29T20:30:39+08:00</updated>
    <id>http://triplecc.github.io/blog/tableviewyou-ce-biao-qian-suo-yin-xu-qiu</id>
    <content type="html"><![CDATA[<p>和师兄一起接了一个外包项目，项目里面有如下效果的需求。刚好这个模块是我负责的，想了一个比较有意思的实现方法。</p>

<h4>效果图</h4>

<p><img src="http://triplecc.github.io/images/2015-08-29%2021_16_47.gif" alt="" /><br></p>

<h4>需求</h4>

<p>需求点大意是在tableView的右侧实现一个类似标签索引的东西，标签索引显示对应cell的时间。</p>

<h4>解决方法</h4>

<p>想到的方法一：</p>

<ul>
<li>刚开始打算自己创建一个UILabel索引标签，然后监听tableView的contentOffset来实现索引标签的移动：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scrollViewDidScroll:</span><span class="p">(</span><span class="bp">UIScrollView</span> <span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 在这里根据scrollView.contentOffset.y来改变标签索引的坐标</span>
</span><span class='line'>  <span class="c1">// contentSize的高度，和屏幕高度是成固定比例的，所以可以计算出来</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>后来感觉这样太麻烦，于是就打算监听scrollview内部的导航view决定索引标签的移动。由于是scrollView的内部控件，所以就通过断点的方式获取控件的成员变量名:<br>
<img src="http://triplecc.github.io/images/Snip20150829_4.png" alt="" /></p>

<p>看出成员变量名如下：<br>
<img src="http://triplecc.github.io/images/Snip20150829_3.png" alt="" /></p>

<p>由此可以引出方法二和三。</p>

<p>方法二：</p>

<ul>
<li>还是采用创建UILabel，不过是加到控制器的view上，然后根据其中的_verticalScrollIndicator的左边，来进行相应的移动。</li>
</ul>


<p>由于此标签索引不需要交互，所以我采用了方法三。<br>
方法三：</p>

<ul>
<li>将创建的UILabel添加到<em>verticalScrollIndicator上，成为它的子控件。然后通过indexPathForRowAtPoint:获取对应的cell的行号。因为</em>verticalScrollIndicator本身是和tableView在同一个坐标系，所以也不需要做转换。</li>
</ul>


<p>主要代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="bp">UITableViewDataSource</span><span class="p">,</span> <span class="bp">UITableViewDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UITableView</span> <span class="o">*</span><span class="n">tableView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UILabel</span> <span class="o">*</span><span class="n">indicatorView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIView</span> <span class="o">*</span><span class="n">scrollIndicator</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">reuseIndentifier</span> <span class="o">=</span> <span class="s">@&quot;testCell&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">rowHeight</span> <span class="o">=</span> <span class="mi">150</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier</span><span class="p">:</span><span class="n">reuseIndentifier</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">cell</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cell</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITableViewCell</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithStyle</span><span class="p">:</span><span class="n">UITableViewCellStyleDefault</span> <span class="nl">reuseIdentifier</span><span class="p">:</span><span class="n">reuseIndentifier</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">backgroundColor</span>  <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithRed</span><span class="p">:</span><span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green</span><span class="p">:</span><span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue</span><span class="p">:</span><span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha</span><span class="p">:</span><span class="mf">0.5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;just a function test--%ld!&quot;</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scrollViewDidScroll:</span><span class="p">(</span><span class="bp">UIScrollView</span> <span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">UITableView</span> <span class="o">*</span><span class="n">tableView</span> <span class="o">=</span> <span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">scrollView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 在这里根据_verticalScrollIndicator的中点，来获取对应的cell行号，从而可以获取对应行的数据来进行显示</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">indicatorView</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">indexPathForRowAtPoint</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollIndicator</span><span class="p">.</span><span class="n">center</span><span class="p">].</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scrollViewWillBeginDragging:</span><span class="p">(</span><span class="bp">UIScrollView</span> <span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 这里注意要在点击时获取，如果在view加载完成时设置标签索引的中点，那么获取的_verticalScrollIndicator的frame是不对的</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">indicatorView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">scrollIndicator</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="s">@&quot;verticalScrollIndicator&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">UILabel</span> <span class="o">*</span><span class="n">indicatorView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="o">-</span><span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">)];</span>
</span><span class='line'>        <span class="n">indicatorView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">orangeColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">CGPoint</span> <span class="n">center</span> <span class="o">=</span> <span class="n">indicatorView</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
</span><span class='line'>        <span class="n">center</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">scrollIndicator</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>        <span class="n">indicatorView</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">center</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollIndicator</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">indicatorView</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">indicatorView</span> <span class="o">=</span> <span class="n">indicatorView</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
