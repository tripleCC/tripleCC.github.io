<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tripleCC的技术博客]]></title>
  <link href="http://triplecc.github.io/atom.xml" rel="self"/>
  <link href="http://triplecc.github.io/"/>
  <updated>2016-02-18T17:54:44+08:00</updated>
  <id>http://triplecc.github.io/</id>
  <author>
    <name><![CDATA[tripleCC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于keychain封装库Locksmith]]></title>
    <link href="http://triplecc.github.io/blog/2016-02-05-locksmithmian-xiang-xie-yi-ku/"/>
    <updated>2016-02-05T14:57:48+08:00</updated>
    <id>http://triplecc.github.io/blog/locksmithmian-xiang-xie-yi-ku</id>
    <content type="html"><![CDATA[<p>Locksmith是一个面向协议编程的keychain封装库，也是我见过的对面向协议贯彻最彻底的一个第三方库。<br></p>

<h2>Locksmith基本实现</h2>

<p>iOS系统中有5种keychain类型：generic passwords, internet passwords, certificates, keys,以及 identities。并且针对每个类型都有4种操作：create, read, update,以及 delete。<br></p>

<p>对于以上复杂的逻辑关系，Cocoa采用了一系列字符串常量以及对应的key/value进行操作。只是对于Swift来说，这种方式过于冗余而且难以记忆，并没有充分利用到其语言特性。<br></p>

<p>Locksmith作者采用了protocol来解决原生方案过于复杂的问题。就像乐高玩具一样，可以随意组装不同的组件来达到不同的视觉效果，Locksmith可以让使用者遵守特定的protocol来获取对应的功能，比如需要delete功能，那么就遵循DeleteableSecureStorable协议；需要read功能，那么就遵守ReadableSecureStorable协议。而在对应的模型中，不需要额外添加函数，协议内部通过extension已经实现了对应的功能函数。开发者直接调用deleteFromKeychain或者readFromKeychain即可实现想要的功能。</p>

<!--more-->


<p>并且，Locksmith还通过protocol提供了更加友好的Result类型。通过遵守GenericPasswordSecureStorable或者InternetPasswordSecureStorable，就可以
读取不同的结果类型GenericPasswordResult或者InternetPasswordResult，而后面这两个结构体又分别遵守了GenericPasswordSecureStorableResultType和InternetPasswordSecureStorableResultType协议，这两个协议又针对结构体中的结果分别进行了以下处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// InternetPasswordSecureStorableResultType</span>
</span><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="nl">InternetPasswordSecureStorableResultType</span><span class="p">:</span> <span class="n">AccountBasedSecureStorableResultType</span><span class="p">,</span> <span class="n">DescribableSecureStorableResultType</span><span class="p">,</span> <span class="n">CommentableSecureStorableResultType</span><span class="p">,</span> <span class="n">CreatorDesignatableSecureStorableResultType</span><span class="p">,</span> <span class="n">TypeDesignatableSecureStorableResultType</span><span class="p">,</span> <span class="n">IsInvisibleAssignableSecureStorableResultType</span><span class="p">,</span> <span class="n">IsNegativeAssignableSecureStorableResultType</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">extension</span> <span class="n">InternetPasswordSecureStorableResultType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">func</span> <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="n">CFString</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resultDictionary</span><span class="p">[</span><span class="n">String</span><span class="p">(</span><span class="n">key</span><span class="p">)]</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">server</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="n">kSecAttrServer</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">port</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resultDictionary</span><span class="p">[</span><span class="n">String</span><span class="p">(</span><span class="n">kSecAttrPort</span><span class="p">)]</span> <span class="kt">as</span><span class="o">!</span> <span class="n">Int</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">internetProtocol</span><span class="p">:</span> <span class="n">LocksmithInternetProtocol</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">LocksmithInternetProtocol</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="n">kSecAttrProtocol</span><span class="p">)</span><span class="o">!</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">authenticationType</span><span class="p">:</span> <span class="n">LocksmithInternetAuthenticationType</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">LocksmithInternetAuthenticationType</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span>  <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="n">kSecAttrAuthenticationType</span><span class="p">)</span><span class="o">!</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">securityDomain</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="n">kSecAttrSecurityDomain</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">path</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="n">kSecAttrPath</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GenericPasswordSecureStorableResultType</span>
</span><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="nl">GenericPasswordSecureStorableResultType</span><span class="p">:</span> <span class="n">GenericPasswordSecureStorable</span><span class="p">,</span> <span class="n">SecureStorableResultType</span><span class="p">,</span> <span class="n">AccountBasedSecureStorableResultType</span><span class="p">,</span> <span class="n">DescribableSecureStorableResultType</span><span class="p">,</span> <span class="n">CommentableSecureStorableResultType</span><span class="p">,</span> <span class="n">CreatorDesignatableSecureStorableResultType</span><span class="p">,</span> <span class="n">LabellableSecureStorableResultType</span><span class="p">,</span> <span class="n">TypeDesignatableSecureStorableResultType</span><span class="p">,</span> <span class="n">IsInvisibleAssignableSecureStorableResultType</span><span class="p">,</span> <span class="n">IsNegativeAssignableSecureStorableResultType</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">extension</span> <span class="n">GenericPasswordSecureStorableResultType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">service</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resultDictionary</span><span class="p">[</span><span class="n">String</span><span class="p">(</span><span class="n">kSecAttrService</span><span class="p">)]</span> <span class="kt">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">generic</span><span class="p">:</span> <span class="bp">NSData</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resultDictionary</span><span class="p">[</span><span class="n">String</span><span class="p">(</span><span class="n">kSecAttrGeneric</span><span class="p">)]</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSData</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，最终的版本的协议遵守了很多组件协议。从上面代码块中，初步可见protocol extension的强大之处了。不过还没完，最后还要通过extension的where子句，完成读取结果的统一接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">extension</span> <span class="n">ReadableSecureStorable</span> <span class="k">where</span> <span class="nl">Self</span> <span class="p">:</span> <span class="n">GenericPasswordSecureStorable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">readFromSecureStore</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">GenericPasswordSecureStorableResultType</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">try</span> <span class="n">performSecureStorageAction</span><span class="p">(</span><span class="n">performReadRequestClosure</span><span class="p">,</span> <span class="nl">secureStoragePropertyDictionary</span><span class="p">:</span> <span class="n">asReadableSecureStoragePropertyDictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">GenericPasswordResult</span><span class="p">(</span><span class="nl">resultDictionary</span><span class="p">:</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">extension</span> <span class="n">ReadableSecureStorable</span> <span class="k">where</span> <span class="nl">Self</span> <span class="p">:</span> <span class="n">InternetPasswordSecureStorable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">readFromSecureStore</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">InternetPasswordSecureStorableResultType</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">try</span> <span class="n">performSecureStorageAction</span><span class="p">(</span><span class="n">performReadRequestClosure</span><span class="p">,</span> <span class="nl">secureStoragePropertyDictionary</span><span class="p">:</span> <span class="n">asReadableSecureStoragePropertyDictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">InternetPasswordResult</span><span class="p">(</span><span class="nl">resultDictionary</span><span class="p">:</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过以上实现方式，开发者最终面向的就是协议，不管是返回的查询结果还是遵循的增删改查组件协议。而结构体在这个框架中基本起数据中转作用，比如以下结构体：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 网络结果</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">InternetPasswordResult</span><span class="p">:</span> <span class="n">InternetPasswordSecureStorableResultType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">resultDictionary</span><span class="p">:</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 通用结果</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">GenericPasswordResult</span><span class="p">:</span> <span class="n">GenericPasswordSecureStorableResultType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">resultDictionary</span><span class="p">:</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面两个结构体给ReadableSecureStorable的readFromSecureStore做读取数据的存储中转，最终我们想要的数据还是需要分别到InternetPasswordSecureStorableResultType或者GenericPasswordSecureStorableResultType对应的属性中获取。<br></p>

<p>Locksmith中大量应用了protocol的extension特性，暂且不论其做法是否真的可取，但也算是面向协议编程强大之处的一种体现。</p>

<h2>参考文章</h2>

<p><a href="http://matthewpalmer.net/blog/2015/08/30/protocol-oriented-programming-in-the-real-world/">protocol-oriented-programming-in-the-real-world</a><br>
为现有类型添加新功能/解藕以增加灵活性与可测试性/方便同步快速发展的API/更少的代码更多的功能<br>
<a href="https://github.com/matthewpalmer/Locksmith">Locksmith源码－有更详细的使用说明</a></p>

<h2>一些其它关于面向协议编程应用文章</h2>

<p><a href="http://code.tutsplus.com/tutorials/protocol-oriented-programming-in-swift-2--cms-24979">Protocol-Oriented Programming in Swift 2</a><br>
解决多继承/协议扩展/Classes的重要性<br>
<a href="http://www.captechconsulting.com/blogs/ios-9-tutorial-series-protocol-oriented-programming-with-uikit">iOS 9 Tutorial Series: Protocol-Oriented Programming with UIKit</a><br>
现有文章示例代码大多为人为创造的情景下工作/面向协议真对UIKit 的应用/Swift协议的好处与限制/不能给Objective-C协议中的方法提供默认实现/可以给Objective-C协议添加新方法/协议for模型,数据格式,UI风格/协议及其扩展适合在添加共享、范性功能时使用，并不很切合UI<br>
<a href="http://www.capitalone.io/blog/improved-protocol-oriented-programming-untyped-type-aliases/">Improved Protocol-Oriented Programming with Untyped Type Aliases</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识碎片四]]></title>
    <link href="http://triplecc.github.io/blog/2016-02-02-ioszhi-shi-sui-pian-si/"/>
    <updated>2016-02-02T15:57:22+08:00</updated>
    <id>http://triplecc.github.io/blog/ioszhi-shi-sui-pian-si</id>
    <content type="html"><![CDATA[<p>1、显示CoreData执行的SQL语句<br></p>

<!--more-->


<h2>显示CoreData执行的SQL语句</h2>

<p>设置步骤: <br>
<img src="http://triplecc.github.io/images/Snip20160202_1.png" alt="" /><br></p>

<p><img src="http://triplecc.github.io/images/Snip20160202_2.png" alt="" /><br>
打印结果：<br>
<img src="http://triplecc.github.io/images/Snip20160202_4.png" alt="" /><br></p>

<p>在获得对应的表后，可以通过sqlite3命令进行打印：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sqlite3 /Users/songruiwang/Desktop/1.sqlite </span></code></pre></td></tr></table></div></figure>


<p>执行help查询对应的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlite&gt; .help</span></code></pre></td></tr></table></div></figure>


<p>如果要显示表内容的话，可以执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlite&gt; .mode line
</span><span class='line'>sqlite&gt; select * from tbl1;
</span><span class='line'>  one = hello!
</span><span class='line'>  two = 10
</span><span class='line'>
</span><span class='line'>  one = hello!
</span><span class='line'>  two = 200
</span><span class='line'>sqlite&gt; </span></code></pre></td></tr></table></div></figure>


<p>更多详细的操作可以通过help查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工具速查博客]]></title>
    <link href="http://triplecc.github.io/blog/2016-01-14-lldbchang-jian-ming-ling/"/>
    <updated>2016-01-14T20:16:07+08:00</updated>
    <id>http://triplecc.github.io/blog/lldbchang-jian-ming-ling</id>
    <content type="html"><![CDATA[<p>准备在这里记录一些常用开发工具的介绍博客，以备忘。</p>

<!--more-->


<h2>LLDB</h2>

<p><a href="http://www.jianshu.com/p/e89af3e9a8d7">小笨狼与LLDB的故事</a><br>
<a href="http://www.jianshu.com/p/afaaacc55460">小笨狼的LLDB技巧:chisel</a><br>
<a href="http://objccn.io/issue-19-2/">与调试器共舞 - LLDB 的华尔兹</a></p>

<h2>Git</h2>

<p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a><br>
<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a><br>
<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">Git 工作流程</a><br>
<a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">Git Commit规范</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu下编译Swift]]></title>
    <link href="http://triplecc.github.io/blog/2016-01-05-zai-ubuntuxia-bian-yi-swift/"/>
    <updated>2016-01-05T22:00:18+08:00</updated>
    <id>http://triplecc.github.io/blog/zai-ubuntuxia-bian-yi-swift</id>
    <content type="html"><![CDATA[<p>哎，近半年没有在Ubuntu的字符终端下畅爽地码代码了（那种Ctrl+Alt+F1~F6然后只有不同颜色的字符在屏幕上跳跃的感觉现在想起来还是超爽啊！），今天恰好来试下在Ubuntu下编译Swift，因为要截图，所以只能在图形界面的虚拟终端下码了- -。</p>

<h5>下载工具包</h5>

<p>首先需要进这<a href="https://swift.org/download/">这里</a>下载对应的工具包，因为我的系统是去年安装的Ubuntu14.04所以选择最后一个。<br>
<img src="http://triplecc.github.io/images/Snip20160105_8.png" alt="" /><br></p>

<h5>解压工具包</h5>

<p>然后进入下载文件夹解压：<br>
<img src="http://triplecc.github.io/images/Snip20160105_9.png" alt="" /><br>
可以看到解压后，目录下有下面几个子目录：<br>
<img src="http://triplecc.github.io/images/Snip20160105_10.png" alt="" /><br>
主要说明三个子目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin   可执行文件
</span><span class='line'>lib   可执行文件动态库
</span><span class='line'>share man</span></code></pre></td></tr></table></div></figure>


<!--More-->


<h5>设置PATH路径</h5>

<p>接下来需要设置系统的PATH：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// root
</span><span class='line'>$ vim /etc/profile
</span><span class='line'>// 对应的user
</span><span class='line'>$ vim ~/.profile</span></code></pre></td></tr></table></div></figure>


<p>然后在文件的末尾添加以下表达式即可（Shift+g跳到最后一行；Shift+o添加一行）：<br>
<img src="http://triplecc.github.io/images/Snip20160105_12.png" alt="" /><br>
也可以在当前虚拟终端暂时性的设置PATH，不过退出这个终端在重新开启一个就恢复以前的PATH了：<br>
<img src="http://triplecc.github.io/images/Snip20160105_11.png" alt="" /><br>
这里我直接把工具包目录下的bin目录以及lib目录中的动态库和可执行文件直接移到/usr/local/bin和/usr/local/lib中，这样就不需要修改PATH路径了。</p>

<h5>下载Swift运行的依赖库</h5>

<p>因为上星期在运行Swift开源代码的时候，我基本把所有的依赖环境都安装了，所以不需要重新安装，如果没有安装过的话，可以执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install clang libicu-dev</span></code></pre></td></tr></table></div></figure>


<h5>编写Swift程序</h5>

<p>上面步骤执行完成，就可以在Ubuntu上编写运行Swift代码了。
先试用下Swift的REPL，效果如下：<br>
<img src="http://triplecc.github.io/images/Snip20160105_15.png" alt="" /><br>
然后就可以正式编写Swift代码了，想想都有点小激动＝＝。<br>
新建一个Swift目录，然后创建第一个程序目录HelloWorld。<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/Study
</span><span class='line'>$ mkdir -p Swift/HelloWorld
</span><span class='line'>$ cd Swift/HelloWorld</span></code></pre></td></tr></table></div></figure>


<p>因为每个包都需要有Package.swift文件，所以执行以下命令进行创建：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch package.swift</span></code></pre></td></tr></table></div></figure>


<p>最后需要创建一个包含main.swift的Sources文件夹：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir Sources
</span><span class='line'>$ touch Sources/main.swift</span></code></pre></td></tr></table></div></figure>


<p>接着开始编辑main.swift：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim main.swift
</span><span class='line'>// 插入以下代码
</span><span class='line'>print("Hello, world!")</span></code></pre></td></tr></table></div></figure>


<p>执行以下命令编译并运行文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ swift build
</span><span class='line'>$ .build/debug/Swift</span></code></pre></td></tr></table></div></figure>


<p>以下为运行结果 ：</p>

<p><img src="http://triplecc.github.io/images/Snip20160105_14.png" alt="" /><br></p>

<h5>THE END</h5>

<p>在Ubuntu下写Swift，感觉还是非常不错的，以后有时间可以多玩一玩。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift2.0中的case匹配]]></title>
    <link href="http://triplecc.github.io/blog/2015-12-29-if-case,-guard-case,-for-case/"/>
    <updated>2015-12-29T17:15:29+08:00</updated>
    <id>http://triplecc.github.io/blog/if-case,-guard-case,-for-case</id>
    <content type="html"><![CDATA[<p>Swift在2.0版本之后，对if、guard、for的匹配进行了一定的加强，其中case匹配模式感觉还是挺新奇的。</p>

<p>参照Swift官方手册，可以知道，这种模式在针对可选值进行处理时，可以获得额外的便利：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">someOptional</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'><span class="c1">// Match using an enumeration case pattern</span>
</span><span class='line'><span class="k">if</span> <span class="k">case</span> <span class="p">.</span><span class="n">Some</span><span class="p">(</span><span class="k">let</span> <span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">someOptional</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Match using an optional pattern</span>
</span><span class='line'><span class="k">if</span> <span class="k">case</span> <span class="k">let</span> <span class="n">x</span><span class="o">?</span> <span class="o">=</span> <span class="n">someOptional</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>x?是.Some(let x)的简写方式。单从以上代码段，可能还看不出有什么特别之处，相反还比以前的实现繁琐：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">someOptional</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过官方手册体现其便利的是for关键字，if还需要另一种场景来体现其带来的便利：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">arrayOfOptionalInts</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="o">?</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nb">nil</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="c1">// Match only non-nil values</span>
</span><span class='line'><span class="k">for</span> <span class="k">case</span> <span class="k">let</span> <span class="n">number</span><span class="o">?</span> <span class="k">in</span> <span class="n">arrayOfOptionalInts</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Found a \(number)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 输出</span>
</span><span class='line'><span class="c1">// Found a 2</span>
</span><span class='line'><span class="c1">// Found a 3</span>
</span><span class='line'><span class="c1">// Found a 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在遍历可选值数组的场景下，这种方式确实减少了一些代码，要是以前，我可能会这样实现：</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 1</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">arrayOfOptionalInts</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2</span>
</span><span class='line'><span class="n">arrayOfOptionalInts</span><span class="p">.</span><span class="n">flatMap</span><span class="p">{</span><span class="err">$</span><span class="mi">0</span><span class="p">}.</span><span class="n">map</span><span class="p">{</span> <span class="n">print</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kingfisher、Alarmfire以及Swift开源Foundation的NSSet类中，都使用到了这个特性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Kingfisher</span>
</span><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">transitionItem</span> <span class="o">=</span> <span class="n">optionsInfo</span><span class="o">?</span><span class="p">.</span><span class="n">kf_firstMatchIgnoringAssociatedValue</span><span class="p">(.</span><span class="n">Transition</span><span class="p">(.</span><span class="n">None</span><span class="p">)),</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">Transition</span><span class="p">(</span><span class="k">let</span> <span class="n">transition</span><span class="p">)</span> <span class="o">=</span> <span class="n">transitionItem</span> <span class="k">where</span> <span class="n">cacheType</span> <span class="o">==</span> <span class="p">.</span><span class="n">None</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">UIView</span><span class="p">.</span><span class="n">transitionWithView</span><span class="p">(</span><span class="n">sSelf</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>            <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">indicator</span><span class="o">?</span><span class="p">.</span><span class="n">stopAnimating</span><span class="p">()</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nl">completion</span><span class="p">:</span> <span class="p">{</span> <span class="n">finished</span> <span class="k">in</span>
</span><span class='line'>                <span class="bp">UIView</span><span class="p">.</span><span class="n">transitionWithView</span><span class="p">(</span><span class="n">sSelf</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">transition</span><span class="p">.</span><span class="n">duration</span><span class="p">,</span>
</span><span class='line'>                    <span class="nl">options</span><span class="p">:</span> <span class="n">transition</span><span class="p">.</span><span class="n">animationOptions</span><span class="p">,</span>
</span><span class='line'>                    <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">transition</span><span class="p">.</span><span class="n">animations</span><span class="o">?</span><span class="p">(</span><span class="n">sSelf</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="nl">completion</span><span class="p">:</span> <span class="p">{</span> <span class="n">finished</span> <span class="k">in</span>
</span><span class='line'>                        <span class="n">transition</span><span class="p">.</span><span class="n">completion</span><span class="o">?</span><span class="p">(</span><span class="n">finished</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">completionHandler</span><span class="o">?</span><span class="p">(</span><span class="nl">image</span><span class="p">:</span> <span class="n">image</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="n">error</span><span class="p">,</span> <span class="nl">cacheType</span><span class="p">:</span> <span class="n">cacheType</span><span class="p">,</span> <span class="nl">imageURL</span><span class="p">:</span> <span class="n">imageURL</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">indicator</span><span class="o">?</span><span class="p">.</span><span class="n">stopAnimating</span><span class="p">()</span>
</span><span class='line'>    <span class="n">sSelf</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span>
</span><span class='line'>    <span class="n">completionHandler</span><span class="o">?</span><span class="p">(</span><span class="nl">image</span><span class="p">:</span> <span class="n">image</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="n">error</span><span class="p">,</span> <span class="nl">cacheType</span><span class="p">:</span> <span class="n">cacheType</span><span class="p">,</span> <span class="nl">imageURL</span><span class="p">:</span> <span class="n">imageURL</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Alarmfire</span>
</span><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="n">ValidationResult</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Success</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Failure</span><span class="p">(</span><span class="bp">NSError</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">validate</span><span class="p">(</span><span class="nl">validation</span><span class="p">:</span> <span class="n">Validation</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Self</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delegate</span><span class="p">.</span><span class="n">queue</span><span class="p">.</span><span class="n">addOperationWithBlock</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span>
</span><span class='line'>            <span class="n">response</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">response</span> <span class="k">where</span> <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">.</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>            <span class="k">case</span> <span class="k">let</span> <span class="p">.</span><span class="n">Failure</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="o">=</span> <span class="n">validation</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">.</span><span class="n">error</span> <span class="o">=</span> <span class="n">error</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NSSet </span>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">isSubsetOfSet</span><span class="p">(</span><span class="nl">otherSet</span><span class="p">:</span> <span class="n">Set</span><span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="k">case</span> <span class="k">let</span> <span class="n">obj</span> <span class="kt">as</span> <span class="bp">NSObject</span> <span class="k">in</span> <span class="n">allObjects</span> <span class="k">where</span> <span class="o">!</span><span class="n">otherSet</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照我的思路编写的话，在老版本中，我会这样实现后面两个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Alarmfire</span>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="nf">wvalidate</span><span class="p">(</span><span class="nl">validation</span><span class="p">:</span> <span class="n">Validation</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Self</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delegate</span><span class="p">.</span><span class="n">queue</span><span class="p">.</span><span class="n">addOperationWithBlock</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">response</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">response</span> <span class="k">where</span> <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">.</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">switch</span> <span class="n">validation</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="k">let</span> <span class="p">.</span><span class="n">Failure</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">.</span><span class="n">error</span> <span class="o">=</span> <span class="n">error</span>
</span><span class='line'>            <span class="k">default</span> <span class="o">:</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NSSet</span>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">isSubsetOfSet</span><span class="p">(</span><span class="nl">otherSet</span><span class="p">:</span> <span class="n">Set</span><span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">obj</span> <span class="k">in</span> <span class="n">allObjects</span> <span class="k">where</span> <span class="o">!</span><span class="n">otherSet</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">obj</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在第一个实现中，我不得不添加了default分支，即使在这个分支里面不进行任何操作，从而可见case匹配模式可以在这类场景下简化switch语句（如果只需要确认enum中的一个类型，就可以选择性地用if-case替换switch）。<br>
在第二个实现中，因为编译器的原因，我不得不将一般转换as改成可选转换as?，然后增加if语句进行判断。(针对类型转换，if-case可以缩减代码量)<br></p>

<p>case匹配模式在针对<code>值绑定</code>，<code>元组</code>，<code>类型转换</code>都带来了一定便利，<a href="http://appventure.me/2015/08/20/swift-pattern-matching-in-detail/#sec-9">Match Me if you can: Swift Pattern Matching in Detail.</a>这篇文章中，对这几种情况进行了非常详细的讲解，并列举了一些实际应用的例子，推荐阅读。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Swift实现Struct归档]]></title>
    <link href="http://triplecc.github.io/blog/2015-12-24-zai-swiftshi-xian-gui-dang-struct/"/>
    <updated>2015-12-24T15:08:29+08:00</updated>
    <id>http://triplecc.github.io/blog/zai-swiftshi-xian-gui-dang-struct</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">AboutMe</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">detail</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">links</span><span class="p">:</span> <span class="p">[[</span><span class="nl">String</span> <span class="p">:</span> <span class="n">String</span><span class="p">]]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Swift中，Struct类型是无法进行归档操作的，只有继承自NSObject并且遵守了NSCoding协议的类才可以进行相应的归档操作。也就是将上面结构体改成类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">AboutMe</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span> <span class="bp">NSCoding</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">detail</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">links</span><span class="p">:</span> <span class="p">[[</span><span class="nl">String</span> <span class="p">:</span> <span class="n">String</span><span class="p">]]</span>
</span><span class='line'>    <span class="n">required</span> <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">aDecoder</span><span class="p">.</span><span class="n">decodeObjectForKey</span><span class="p">(</span><span class="s">&quot;detail&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">aDecoder</span><span class="p">.</span><span class="n">decodeObjectForKey</span><span class="p">(</span><span class="s">&quot;links&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">encodeWithCoder</span><span class="p">(</span><span class="nl">aCoder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">aCoder</span><span class="p">.</span><span class="n">encodeObject</span><span class="p">(</span><span class="n">detail</span><span class="p">)</span>
</span><span class='line'>        <span class="n">aCoder</span><span class="p">.</span><span class="n">encodeObject</span><span class="p">(</span><span class="n">links</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是如果要对Struct进行归档，可以转换思维，使用按照以下步骤实现。</p>

<!--more-->


<h6>实现一个归档、解档协议：</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="n">Archivable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">archive</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="bp">NSDictionary</span>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">unarchive</span><span class="p">:</span> <span class="bp">NSDictionary</span><span class="o">?</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为NSKeyedArchiver可以直接对Foundation类进行操作，所以可以将结构体中的属性都转换成字典，然后进行后续操作；archive函数返回一个归档好的字典，而可失败构造函数传入一个需要解档的字典。</p>

<h6>让AboutMe遵守并实现以上声明的协议</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="nl">AboutMe</span><span class="p">:</span> <span class="n">Archivable</span><span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">archive</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="bp">NSDictionary</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="s">&quot;detail&quot;</span> <span class="o">:</span> <span class="n">detail</span><span class="p">,</span> <span class="s">&quot;links&quot;</span> <span class="o">:</span> <span class="n">links</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">unarchive</span><span class="p">:</span> <span class="bp">NSDictionary</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="k">let</span> <span class="n">values</span> <span class="o">=</span> <span class="n">unarchive</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">detail</span> <span class="o">=</span> <span class="n">values</span><span class="p">[</span><span class="s">&quot;detail&quot;</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>            <span class="n">links</span> <span class="o">=</span> <span class="n">values</span><span class="p">[</span><span class="s">&quot;links&quot;</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="p">[[</span><span class="nl">String</span> <span class="p">:</span> <span class="n">String</span><span class="p">]]</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">detail</span> <span class="o">=</span> <span class="n">detail</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">links</span> <span class="o">=</span> <span class="n">links</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用扩展进行归解档方法的添加，可以看到，原先结构体的属性在接口上都是以字典的形势在传输。</p>

<h6>实现归解档函数</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">unarchiveObjectWithFile</span><span class="o">&lt;</span><span class="nl">T</span><span class="p">:</span> <span class="n">Archivable</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">path</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">T</span><span class="p">(</span><span class="nl">unarchive</span><span class="p">:</span> <span class="bp">NSKeyedUnarchiver</span><span class="p">.</span><span class="n">unarchiveObjectWithFile</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSDictionary</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">archiveObject</span><span class="o">&lt;</span><span class="nl">T</span><span class="p">:</span> <span class="n">Archivable</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">object</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">toFile</span> <span class="nl">path</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSKeyedArchiver</span><span class="p">.</span><span class="n">archiveRootObject</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="n">archive</span><span class="p">(),</span> <span class="nl">toFile</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对AboutMe进行字典化后，NSKeyedArchiver可以直接对其进行操作，所以这个实现并不复杂。<br></p>

<p>完成以上步骤，就可以对Struct进行归档和接档操作了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSSearchPathDirectory</span><span class="p">.</span><span class="n">CachesDirectory</span><span class="p">,</span> <span class="n">NSSearchPathDomainMask</span><span class="p">.</span><span class="n">UserDomainMask</span><span class="p">,</span> <span class="nb">true</span><span class="p">).</span><span class="n">first</span><span class="o">!</span> <span class="o">+</span> <span class="s">&quot;/Person&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">aboutMe</span> <span class="o">=</span> <span class="n">AboutMe</span><span class="p">(</span><span class="nl">detail</span><span class="p">:</span> <span class="s">&quot;tripleCC&quot;</span><span class="p">,</span> <span class="nl">links</span><span class="p">:</span> <span class="p">[[</span><span class="s">&quot;github&quot;</span> <span class="o">:</span> <span class="s">&quot;https://github.com/tripleCC&quot;</span><span class="p">],</span> <span class="p">[</span><span class="s">&quot;gitblog&quot;</span> <span class="o">:</span> <span class="s">&quot;http://triplecc.github.io/&quot;</span><span class="p">]])</span>
</span><span class='line'><span class="n">archiveObject</span><span class="p">(</span><span class="n">aboutMe</span><span class="p">,</span> <span class="nl">toFile</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="nl">unAboutMe</span><span class="p">:</span> <span class="n">AboutMe</span><span class="o">?</span> <span class="o">=</span> <span class="n">unarchiveObjectWithFile</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="n">debugPrint</span><span class="p">(</span><span class="n">unAboutMe</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要进行集合操作，可以添加以下函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">archiveObjectLists</span><span class="o">&lt;</span><span class="nl">T</span><span class="p">:</span> <span class="n">Archivable</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">lists</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">],</span> <span class="n">toFile</span> <span class="nl">path</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">encodedLists</span> <span class="o">=</span> <span class="n">lists</span><span class="p">.</span><span class="n">map</span><span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">archive</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="bp">NSKeyedArchiver</span><span class="p">.</span><span class="n">archiveRootObject</span><span class="p">(</span><span class="n">encodedLists</span><span class="p">,</span> <span class="nl">toFile</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">unarchiveObjectListsWithFile</span><span class="o">&lt;</span><span class="nl">T</span><span class="p">:</span> <span class="n">Archivable</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">path</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">decodedLists</span> <span class="o">=</span> <span class="bp">NSKeyedUnarchiver</span><span class="p">.</span><span class="n">unarchiveObjectWithFile</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="kt">as</span><span class="o">?</span> <span class="p">[</span><span class="bp">NSDictionary</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">decodedLists</span><span class="p">.</span><span class="n">flatMap</span><span class="p">{</span> <span class="n">T</span><span class="p">(</span><span class="nl">unarchive</span><span class="p">:</span> <span class="err">$</span><span class="mi">0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考博客</h3>

<p>1.<a href="http://swiftandpainless.com/nscoding-and-swift-structs/">NSCoding And Swift Structs</a><br>
2.<a href="http://redqueencoder.com/property-lists-and-user-defaults-in-swift/">Property Lists And User Defaults in Swift</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode快捷键]]></title>
    <link href="http://triplecc.github.io/blog/2015-12-20-xcodekuai-jie-jian/"/>
    <updated>2015-12-20T23:02:11+08:00</updated>
    <id>http://triplecc.github.io/blog/xcodekuai-jie-jian</id>
    <content type="html"><![CDATA[<ul>
<li>command + shift + o 快速定位文件</li>
<li>command + shift + y 隐藏下方debug框</li>
<li>command + shift + c 聚焦下方debug框</li>
<li>command + option + 0 右方工具框</li>
<li>command + 0 左方工具框</li>
<li>command + option + [ 代码上调</li>
<li>command + [ 代码左调</li>
<li>shift + commad + j 将文件目录切换到打开的文件</li>
<li>control + 1 选中要查看的方法名，按下快捷键后，点击celler，可以查看哪些方法调用了此方法</li>
<li>esc 枚举显示自动补全</li>
<li>command + d storyboard中复制拷贝控件</li>
<li>option + shift 可以移动仿真器中的手指</li>
<li>control + i = control + [  代码对齐</li>
<li>option + 单击文件  文件显示在辅助窗口</li>
<li>control + shift + 左击  显示IB中所有控件</li>
<li>command + shift + option + 左/右 隐藏/显示方法内容</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift源码阅读Runtime]]></title>
    <link href="http://triplecc.github.io/blog/2015-12-07-swiftyuan-ma-yue-du-runtime/"/>
    <updated>2015-12-07T21:46:23+08:00</updated>
    <id>http://triplecc.github.io/blog/swiftyuan-ma-yue-du-runtime</id>
    <content type="html"><![CDATA[<p>Swift开源之后，虽然大部分代码对于作为应用程序猿的我来说，花费大量时间去阅读，性价比有点不高，但是阅读下Foundation，学习学习Swift的编码范式还是不错的。</p>

<h5>NSEnumerator.swift</h5>

<h6>1.遵循多个约束<br></h6>

<p>其中范型NSGeneratorEnumerator定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">internal</span> <span class="k">class</span> <span class="n">NSGeneratorEnumerator</span><span class="o">&lt;</span><span class="nl">Base</span> <span class="p">:</span> <span class="n">GeneratorType</span> <span class="k">where</span> <span class="n">Base</span><span class="p">.</span><span class="nl">Element</span> <span class="p">:</span> <span class="n">AnyObject</span><span class="o">&gt;</span> <span class="o">:</span> <span class="bp">NSEnumerator</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">generator</span> <span class="p">:</span> <span class="n">Base</span>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="n">_</span> <span class="nl">generator</span><span class="p">:</span> <span class="n">Base</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">generator</span> <span class="o">=</span> <span class="n">generator</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">nextObject</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">AnyObject</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">generator</span><span class="p">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面有一点，就是范型类型的约束：遵守协议GeneratorType，并且是AnyObject类型。这个上次写的时候忘了，刚好这次记下这种写法。</p>

<!--more-->


<h5>NSObjCRuntime.swift</h5>

<h6>1.实现OC中NS_OPTIONS效果的swift形式的Option<br></h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">NSSortOptions</span> <span class="p">:</span> <span class="n">OptionSetType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">let</span> <span class="nl">rawValue</span> <span class="p">:</span> <span class="n">UInt</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">init</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">UInt</span><span class="p">)</span> <span class="p">{</span> <span class="nb">self</span><span class="p">.</span><span class="n">rawValue</span> <span class="o">=</span> <span class="n">rawValue</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="k">let</span> <span class="n">Concurrent</span> <span class="o">=</span> <span class="n">NSSortOptions</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">UInt</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">static</span> <span class="k">let</span> <span class="n">Stable</span> <span class="o">=</span> <span class="n">NSSortOptions</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">UInt</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上是swift中很典型的Options，包括常见的UIViewAnimationOptions等。Concurrent和Stable是以静态属性存在的，所以可以直接使用<code>NSSortOptions.属性名</code>访问，在知道类型后，也可以简写<code>.属性名</code>。</p>

<p>遵守OptionSetType表示NSSortOptions可以进行集合及位运算，也就是<code>[.Concurrent, .Stable]</code>等。所以为了实现以前OC中的NS_OPTIONS的<code>位与</code>效果，可以实现一个遵循OptionSetType协议的结构体:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">AnyOption</span><span class="p">:</span> <span class="n">OptionSetType</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">public</span> <span class="k">let</span> <span class="nl">rawValue</span><span class="p">:</span> <span class="n">UInt</span>
</span><span class='line'>  <span class="n">public</span> <span class="k">init</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">UInt</span><span class="p">)</span>  <span class="p">{</span> <span class="nb">self</span><span class="p">.</span><span class="n">rawValue</span> <span class="o">=</span> <span class="n">rawVale</span> <span class="p">}</span>  <span class="c1">// 这个struct会自动构造，可以省略</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">public</span> <span class="k">static</span> <span class="k">let</span> <span class="n">TypeOne</span> <span class="o">=</span> <span class="n">AnyOption</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">UInt</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>值得注意的一点是，在OC中使用<code>kNilOptions</code>来表示NoneOption，swift中则是实用<code>[]</code>。<br>
所以可以进行<code>位与</code>操作的选项最好创建成遵守OptionSetType的struct，而不是enum。</p>

<h6>2.范型协议</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">internal</span> <span class="k">protocol</span> <span class="n">_CFBridgable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">CFType</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">_cfObject</span><span class="p">:</span> <span class="n">CFType</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在swift中，协议的范型是通过<code>typealias</code>关键字来实现的，而类、数组、方法和函数则是通过类型参数来实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">geneticFunction</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">p</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>遵守范型协议后可以这样来实现相应的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyClass</span><span class="p">:</span> <span class="kt">Type</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">MyType</span> <span class="o">=</span> <span class="n">String</span> <span class="c1">// 这句也可以省略</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">_type</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以使用<code>Self</code>表示遵守范型协议的类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">protocol</span> <span class="n">EquatableSelf</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">equals</span><span class="p">(</span><span class="nl">other</span><span class="p">:</span> <span class="kt">Self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">ImplicitStruct</span><span class="p">:</span> <span class="n">EquatableSelf</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">val</span><span class="p">:</span> <span class="n">Int64</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">equals</span><span class="p">(</span><span class="nl">other</span><span class="p">:</span> <span class="n">ImplicitStruct</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">val</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在不使用<code>Self</code>关键字的情况下，可以使用以下方式实现同样的类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">protocol</span> <span class="n">EquatableTypealias</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">typealias</span> <span class="n">EquatableType</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">equals</span><span class="p">(</span><span class="nl">other</span> <span class="p">:</span> <span class="n">EquatableType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">ExplicitStruct</span> <span class="p">:</span> <span class="n">EquatableTypealias</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">typealias</span> <span class="n">EquatableType</span> <span class="o">=</span> <span class="n">ExplicitStruct</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">val</span> <span class="p">:</span> <span class="n">Int64</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">equals</span><span class="p">(</span><span class="nl">other</span><span class="p">:</span> <span class="n">ExplicitStruct</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">val</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">val</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里有一篇不错的文章，对范型协议进行了介绍<a href="http://milen.me/writings/swift-generic-protocols/">Swift Generic Protocols
</a></p>

<h5>NSObject.swift</h5>

<h6>1.运算符重载</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="o">==</span><span class="p">(</span><span class="nl">lhs</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span> <span class="nl">rhs</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="n">isEqual</span><span class="p">(</span><span class="n">rhs</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重载了两个NSObject对象的<code>==</code>运算符，实际上是使用swift中的<code>===</code>判断对象是否相等：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">isEqual</span><span class="p">(</span><span class="nl">object</span><span class="p">:</span> <span class="n">AnyObject</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">object</span> <span class="o">===</span> <span class="nb">self</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是上面对于NSObject重载的等价运算符是<code>全局函数</code>。</p>

<p>在实现运算符重载时，需要注意对<code>前后缀运算符</code>重载，需要添加<code>prefix</code>和<code>postfix</code>关键字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">prefix</span> <span class="k">func</span> <span class="o">-</span> <span class="p">(</span><span class="nl">vector</span><span class="p">:</span> <span class="n">Vector2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vector2D</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Vector2D</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="o">-</span><span class="n">vector</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="o">-</span><span class="n">vector</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对<code>改变左表达式</code>的复合运算符，需要在对应的参数中添加<code>inout</code>关键字:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="o">+=</span> <span class="p">(</span><span class="k">inout</span> <span class="nl">left</span><span class="p">:</span> <span class="n">Vector2D</span><span class="p">,</span> <span class="nl">right</span><span class="p">:</span> <span class="n">Vector2D</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">left</span> <span class="o">=</span> <span class="kr">left</span> <span class="o">+</span> <span class="kr">right</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>NSSwiftRuntime.swift</h5>

<p>这个文件主要实现了Swift对于NS基础类型映射（基本也只能摸个大概，大部分还是不懂= =）。</p>

<p>其中有一个<code>__CFInitializeSwift</code>函数，本分函数体如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">internal</span> <span class="k">func</span> <span class="nf">__CFInitializeSwift</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_CFRuntimeBridgeTypeToClass</span><span class="p">(</span><span class="n">CFStringGetTypeID</span><span class="p">(),</span> <span class="n">unsafeBitCast</span><span class="p">(</span><span class="n">_NSCFString</span><span class="p">.</span><span class="nb">self</span><span class="p">,</span> <span class="n">UnsafePointer</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">.</span><span class="nb">self</span><span class="p">))</span>
</span><span class='line'>    <span class="n">_CFRuntimeBridgeTypeToClass</span><span class="p">(</span><span class="n">CFArrayGetTypeID</span><span class="p">(),</span> <span class="n">unsafeBitCast</span><span class="p">(</span><span class="n">_NSCFArray</span><span class="p">.</span><span class="nb">self</span><span class="p">,</span> <span class="n">UnsafePointer</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">.</span><span class="nb">self</span><span class="p">))</span>
</span><span class='line'>    <span class="n">_CFRuntimeBridgeTypeToClass</span><span class="p">(</span><span class="n">CFDictionaryGetTypeID</span><span class="p">(),</span> <span class="n">unsafeBitCast</span><span class="p">(</span><span class="n">_NSCFDictionary</span><span class="p">.</span><span class="nb">self</span><span class="p">,</span> <span class="n">UnsafePointer</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">.</span><span class="nb">self</span><span class="p">))</span>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'>    <span class="n">__CFSwiftBridge</span><span class="p">.</span><span class="bp">NSObject</span><span class="p">.</span><span class="n">isEqual</span> <span class="o">=</span> <span class="n">_CFSwiftIsEqual</span>
</span><span class='line'>    <span class="n">__CFSwiftBridge</span><span class="p">.</span><span class="bp">NSObject</span><span class="p">.</span><span class="n">hash</span> <span class="o">=</span> <span class="n">_CFSwiftGetHash</span>
</span><span class='line'>    <span class="n">__CFSwiftBridge</span><span class="p">.</span><span class="bp">NSObject</span><span class="p">.</span><span class="n">_cfTypeID</span> <span class="o">=</span> <span class="n">_CFSwiftGetTypeID</span>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>_CFRuntimeBridgeTypeToClass</code>主要作用是使用对应ID为索引，将对应的类地址，存入一个全局的数组中。类似Objective-C中实例对象中的isa指向的东西，这样就可以根据这个索引对应的内容，来创建实例对象了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kt">void</span> <span class="nf">_CFRuntimeBridgeTypeToClass</span><span class="p">(</span><span class="n">CFTypeID</span> <span class="n">cf_typeID</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">cls_ref</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">__CFLock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">__CFBigRuntimeFunnel</span><span class="p">);</span>
</span><span class='line'>    <span class="n">__CFRuntimeObjCClassTable</span><span class="p">[</span><span class="n">cf_typeID</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">cls_ref</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__CFUnlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">__CFBigRuntimeFunnel</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而<code>_CFSwiftBridge</code>是一个全局变量，其类型定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">_CFSwiftBridge</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">_NSObjectBridge</span> <span class="bp">NSObject</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">_NSArrayBridge</span> <span class="bp">NSArray</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">_NSMutableArrayBridge</span> <span class="bp">NSMutableArray</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">_NSDictionaryBridge</span> <span class="bp">NSDictionary</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">_NSMutableDictionaryBridge</span> <span class="bp">NSMutableDictionary</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">_NSSetBridge</span> <span class="bp">NSSet</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">_NSMutableSetBridge</span> <span class="bp">NSMutableSet</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">_NSStringBridge</span> <span class="bp">NSString</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">_NSMutableStringBridge</span> <span class="bp">NSMutableString</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到其成员对应的NS基础类型。取NSObject，类型定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">_NSObjectBridge</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CFTypeID</span> <span class="p">(</span><span class="o">*</span><span class="n">_cfTypeID</span><span class="p">)(</span><span class="n">CFTypeRef</span> <span class="n">object</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFHashCode</span> <span class="p">(</span><span class="o">*</span><span class="n">hash</span><span class="p">)(</span><span class="n">CFTypeRef</span> <span class="n">object</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="p">(</span><span class="o">*</span><span class="n">isEqual</span><span class="p">)(</span><span class="n">CFTypeRef</span> <span class="n">object</span><span class="p">,</span> <span class="n">CFTypeRef</span> <span class="n">other</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到其成员都是函数指针，在<code>__CFInitializeSwift</code>中对它们进行了初始化。比如<code>_CFSwiftIsEqual</code>，就是用Swift定义的判断两个对象是否相等的函数，其定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">internal</span> <span class="k">func</span> <span class="n">_CFSwiftIsEqual</span><span class="p">(</span><span class="nl">cf1</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">,</span> <span class="nl">cf2</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">cf1</span> <span class="kt">as</span><span class="o">!</span> <span class="bp">NSObject</span><span class="p">).</span><span class="n">isEqual</span><span class="p">(</span><span class="n">cf2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后<code>__CFInitializeSwift</code>在CFRuntime.c文件中的__CFInitialize函数即CoreFoundation初始化函数中进行调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">....</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="n">__CFInitializeSwift</span><span class="p">();</span>
</span><span class='line'><span class="n">__CFInitializeSwift</span><span class="p">();</span>
</span><span class='line'><span class="p">....</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了&hellip;但是基本还是云里雾里&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识碎片三]]></title>
    <link href="http://triplecc.github.io/blog/2015-12-07-ioszhi-shi-sui-pian-san/"/>
    <updated>2015-12-07T17:10:05+08:00</updated>
    <id>http://triplecc.github.io/blog/ioszhi-shi-sui-pian-san</id>
    <content type="html"><![CDATA[<p>1、NSSetUncaughtExceptionHandler注册捕获错误无法调用<br>
2、自定义提示宏<br>
3、frame和bounds<br>
4、Swift中inout和C/C++中指针/引用的区别<br>
5、获取UICollectionView的高度<br></p>

<!--more-->


<h2>NSSetUncaughtExceptionHandler注册捕获错误无法调用</h2>

<p>原因是老代码中集成了友盟分析，并且没有关闭友盟错误收集机制。友盟内部的错误收集方式也是采用这个方式，所以自己注册的错误处理函数被友盟覆盖，因此不会被执行。</p>

<p>同理，多种第三方的错误日志应该是不能同时实现捕获的。也是看到了友盟的文件夹才想到这点，stackoverflow上面说的都不是很符合这种情况。</p>

<h2>自动提示宏</h2>

<p>什么情况下需要用到自动提示宏</p>

<ul>
<li>使用KVO，KVC时使用(归档的时候也可以使用，这样就不用设置一堆宏了)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">keyPath</span><span class="p">(</span><span class="n">objc</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">)</span> <span class="l">@(</span><span class="p">((</span><span class="kt">void</span><span class="p">)</span><span class="n">objc</span><span class="p">.</span><span class="n">keyPath</span><span class="p">,</span> <span class="err">#</span><span class="n">keyPath</span><span class="p">)</span><span class="l">)</span>
</span><span class='line'><span class="c1">// void 去警告</span>
</span><span class='line'><span class="c1">// # 表示转成c字符串</span>
</span><span class='line'><span class="c1">// , 逗号表达式，取最右的值</span>
</span><span class='line'><span class="c1">// @() 基本类型转oc类型</span>
</span></code></pre></td></tr></table></div></figure>


<h2>frame和bounds</h2>

<p>今天要实现图片浏览器中的一个需求，然后就遇到了这个问题，需要明确两者之间的区别。后来google了一些资料，有一篇<a href="https://www.objc.io/issues/3-views/scroll-view/">UIScrollView原理</a>解决了我的问题。</p>

<p>里面对于我最重要的就是这句话了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">This</span> <span class="n">is</span><span class="p">,</span> <span class="k">in</span> <span class="n">fact</span><span class="p">,</span> <span class="n">exactly</span> <span class="n">how</span> <span class="n">a</span> <span class="n">scroll</span> <span class="n">view</span> <span class="n">works</span> <span class="n">when</span> <span class="n">you</span> <span class="n">set</span> <span class="n">its</span> <span class="n">contentOffset</span> <span class="nl">property</span><span class="p">:</span> <span class="n">it</span> <span class="n">changes</span> <span class="n">the</span> <span class="n">origin</span> <span class="n">of</span> <span class="n">the</span> <span class="n">scroll</span> <span class="n">view</span><span class="err">’</span><span class="n">s</span> <span class="n">bounds</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以UIScrollView的偏移是通过设置bounds的origin来实现的。看了一些MWPhotoBrowser源码也确实使用UIScrollView的bounds来改变对应子视图的frame：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">layoutSubviews</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">....</span>
</span><span class='line'>  <span class="c1">// Update tap view frame</span>
</span><span class='line'>  <span class="n">_tapView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">;</span>
</span><span class='line'>  <span class="p">....</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class='line'>  <span class="p">....</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后忽然又想到了另一个问题，在这里记录备忘：<code>CGAffineTransform实际改变的是bounds</code>。</p>

<p><a href="https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques">iOS-Core-Animation-Advanced-Techniques</a>中有一句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">frame</span><span class="err">并不是一个非常清晰的属性，它其实是一个虚拟属性，是根据</span><span class="n">bounds</span><span class="err">，</span><span class="n">position</span><span class="err">和</span><span class="n">transform</span><span class="err">计算而来</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以改变视图的transform，实际上是改变其layer的bounds。苹果相关库头文件中也有这么一句话：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">extension</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// animatable. do not use frame if view is transformed since it will not correctly reflect the actual location of the view. use bounds + center instead.</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">frame</span><span class="p">:</span> <span class="bp">CGRect</span>
</span><span class='line'>  <span class="c1">// use bounds/center and not frame if non-identity transform. if bounds dimension is odd, center may be have fractional part</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">bounds</span><span class="p">:</span> <span class="bp">CGRect</span> <span class="c1">// default bounds is zero origin, frame size. animatable</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="nl">center</span><span class="p">:</span> <span class="bp">CGPoint</span> <span class="c1">// center is center of frame. animatable</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Swift中inout和C/C++中指针/引用的区别</h2>

<p>首先明确概念：</p>

<ul>
<li>inout是passed-in-passed-back形式</li>
<li>C/C++中是引用形式</li>
</ul>


<p>关于inout关键字，Swift的一些官方文档给出了很详细的一些回答，如下:<br>
<img src="http://triplecc.github.io/images/Snip20151231_1.png" alt="" /><br>
<img src="http://triplecc.github.io/images/Snip20151231_3.png" alt="" /><br>
<img src="http://triplecc.github.io/images/Snip20151231_4.png" alt="" /><br>
<img src="http://triplecc.github.io/images/Snip20151231_5.png" alt="" /><br>
从这么多篇幅的解释中，可以很清楚地知道inout的作用方式：<br>
1、函数被调用，拷贝实参<br>
2、拷贝在函数中被修改<br>
3、函数返回，拷贝被赋给源参<br>
并且一旦相应的函数返回，上面步骤就结束了，剩下的操作便无法改变源参。以下代码段都不会改变传入的参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">/// 1</span>
</span><span class='line'><span class="n">func</span> <span class="nf">increment</span><span class="p">(</span><span class="k">inout</span> <span class="nl">n</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="o">++</span><span class="n">n</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">let</span> <span class="n">i</span> <span class="o">=</span> <span class="n">increment</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>   <span class="c1">// 0</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">())</span> <span class="c1">// 1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// 2</span>
</span><span class='line'><span class="n">func</span> <span class="n">increment</span><span class="p">(</span><span class="k">inout</span> <span class="nl">n</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>        <span class="c1">// 假设在子线程执行前就已经return</span>
</span><span class='line'>        <span class="o">++</span><span class="n">n</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">increment</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="c1">// 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Swift中，如果想改变上面代码段传入的参数，可以使用UnsafeMutablePointer指针（只是例子，实际并不推荐这么做，这种方式是不安全的）:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">/// 1</span>
</span><span class='line'><span class="n">func</span> <span class="nf">increment</span><span class="p">(</span><span class="nl">n</span><span class="p">:</span> <span class="n">UnsafeMutablePointer</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="o">++</span><span class="n">n</span><span class="p">.</span><span class="n">memory</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">increment</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">)()</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// 2</span>
</span><span class='line'><span class="n">func</span> <span class="n">increment</span><span class="p">(</span><span class="nl">n</span><span class="p">:</span> <span class="n">UnsafeMutablePointer</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>        <span class="c1">// 假设在子线程执行前就已经return</span>
</span><span class='line'>        <span class="o">++</span><span class="n">n</span><span class="p">.</span><span class="n">memory</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">increment</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>获取UICollectionView的高度</h2>

<p>UICollectionView的高度通过其布局属性，也就是以下属性进行获取：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">UICollectionViewLayout</span> <span class="o">*</span><span class="n">collectionViewLayout</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>布局属性有个获取Size的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nf">collectionViewContentSize</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是这个方法UICollectionViewLayout的子类必须进行重写（流水布局已经重写了）。<br>
这样就可以在UICollectionView的子类中重写sizeToFit方法进行自适应了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sizeToFit</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">sizeToFit</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="p">(</span><span class="bp">CGRect</span><span class="p">){</span>
</span><span class='line'>        <span class="p">.</span><span class="n">origin</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">,</span>
</span><span class='line'>        <span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">collectionViewLayout</span><span class="p">.</span><span class="n">collectionViewContentSize</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>同理，如果是一个视图的子视图，也可以同时设置父视图的frame：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sizeToFit</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">sizeToFit</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_collectionView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="p">(</span><span class="bp">CGRect</span><span class="p">){</span>
</span><span class='line'>        <span class="p">.</span><span class="n">origin</span> <span class="o">=</span> <span class="n">_collectionView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">,</span>
</span><span class='line'>        <span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">_collectionView</span><span class="p">.</span><span class="n">collectionViewLayout</span><span class="p">.</span><span class="n">collectionViewContentSize</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">_collectionView</span><span class="p">.</span><span class="n">bounds</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样以来就可以很方便地对UICollectionView进行一些操作了，比如在UITableView中嵌入一个流水布局的UICollectionView就可以利用上面的方法获取其实际高度。<a href="https://github.com/tripleCC/TPCSkillTagView">实际业务的应用</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git开发流程]]></title>
    <link href="http://triplecc.github.io/blog/2015-11-05-gitkai-fa-liu-cheng/"/>
    <updated>2015-11-05T18:44:59+08:00</updated>
    <id>http://triplecc.github.io/blog/gitkai-fa-liu-cheng</id>
    <content type="html"><![CDATA[<h2>使用Git开发总结</h2>

<p>现在很多互联网公司都是通过分布式的Git进行代码管理，SVN则逐渐被淘汰了。以下就是自己在Git开发中的流程与注意点：<br>
1、所有人fork一份 project, 在自己的repository上开发，开发完成后向 project 提 pull request.</p>

<p>2、如果遇到需要多人共同开发的比较大的项目，可以细分为个人完成的小项目，在各自 repository 上完成后 pull request.</p>

<p>3、尽量保持每天至少 pull request 一次。如果功能一天不能完成，则每天抓取 project最新的版本 merge 并解决冲突，保证每次最终 pull request 的冲突减到最少。</p>

<p>4、尽量保证提交前能看一遍每行改动 (如果使用 SourceTree, 可以看到对于每一行的改动，并选择是否提交/回滚这行的改动)，确保每行都是必要的。</p>

<p>5、另外，iOS 项目中有一些 .gitignore 也无法忽略的文件，比如 project.pbxproj 和 *.xcodecheckout，需要每次手动来忽略其中的改动，务必确保这些文件内所有改动的行都是必要的，除非特殊情况不要提交其中的 PROVISIONING_PROFILE 和 Build Settings 相关的改动。</p>

<!--more-->


<h4>默认工作流程</h4>

<ul>
<li>把 project fork 一份到 yourname/project,并clone到本地</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/git/
</span><span class='line'>git clone https://github.com/yourname/project.git</span></code></pre></td></tr></table></div></figure>


<p>保持代码是和主线同步的，假设主线名称为main</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add upstream https://github.com/main/matcha-ios.git
</span><span class='line'>git checkout master
</span><span class='line'>git fetch upstream 
</span><span class='line'>git merge upstream/master</span></code></pre></td></tr></table></div></figure>


<p>在项目目录新建一个 .gitignore 来忽略一些不该提交的东西 <a href="https://github.com/github/gitignore.git">gitignore参考</a></p>

<ul>
<li>提交一次修改</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add new.m git add new.h
</span><span class='line'>git diff
</span><span class='line'>git commit -m ‘add Class new’</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin</span></code></pre></td></tr></table></div></figure>


<ul>
<li>解决可能有的冲突：</li>
</ul>


<p>务必在这个阶段解决各种可能的冲突，减少 pull request merge 到 main/project 时的成本。SourceTree 的处理过程也是类似的。(这里命令行可以执行 git mergetool 来调用冲突处理工具来处理，用 SourceTree 可以直接打开 Xcode 自带的冲突处理工具处理)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout master
</span><span class='line'>git fetch upstream && git merge upstream/master</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 解决冲突后
</span><span class='line'>git commit -m "XXXX"
</span><span class='line'>git push origin</span></code></pre></td></tr></table></div></figure>


<ul>
<li>提交Pull Request</li>
</ul>


<p>最后你需要做的，就是打开 <a href="https://github.com/yourname/project">https://github.com/yourname/project</a> ，提交一个Pull Request，并assign给某人帮你review.Pull Request的名称尽量取的有意义，比如<code>优化cell性能</code>等词语</p>

<h2>Git学习资料</h2>

<p>基本操作和概念： Try Git： <a href="http://try.github.com/">http://try.github.com/</a>
图解Git 了解Git的一些特性：<a href="http://marklodato.github.com/visual-git-guide/index-zh-cn.html">http://marklodato.github.com/visual-git-guide/index-zh-cn.html</a>
[推荐]一堆实用技巧，让你爱上命令行： <a href="http://blog.jobbole.com/25808/">http://blog.jobbole.com/25808/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress因为Ruby版本出现push不生效问题]]></title>
    <link href="http://triplecc.github.io/blog/2015-11-01-octopressyin-wei-rubyban-ben-chu-xian-pushbu-sheng-xiao-wen-ti/"/>
    <updated>2015-11-01T15:51:24+08:00</updated>
    <id>http://triplecc.github.io/blog/octopressyin-wei-rubyban-ben-chu-xian-pushbu-sheng-xiao-wen-ti</id>
    <content type="html"><![CDATA[<p>使用Octopress提交改的博客配置，但是发现配置并没有生效，然后本地预览也报以下错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Errno::ENOENT: No Such File or Directory - Jekyll </span></code></pre></td></tr></table></div></figure>


<p>上网搜了下资料，已经有人遇到过了<a href="http://schalkneethling.github.io/blog/2015/10/16/errno-enoent-no-such-file-or-directory-jekyll-octopress-el-capitan/">Errno::ENOENT: No Such File or Directory - Jekyll ~ Octopress and El Capitan</a></p>

<p>原因是OS-X升级到10.11，需要的ruby版本已经不是2.0.0了。执行<code>ruby -v</code>查看ruby版本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tripleCC:~ songruiwang$ ruby -v
</span><span class='line'>ruby 2.0.0p645 (2015-04-13 revision 50299) [universal.x86_64-darwin15]</span></code></pre></td></tr></table></div></figure>


<p>下载2.2.3即可以解决问题。</p>

<!--more-->


<p>总体的步骤如下：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 下载homebrow
</span><span class='line'>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</span><span class='line'>// 下载rbenv
</span><span class='line'>brew update
</span><span class='line'>brew install rbenv ruby-build
</span><span class='line'>// 下载ruby2.2.3版本
</span><span class='line'>rbenv install 2.2.3</span></code></pre></td></tr></table></div></figure>


<p>然后参考的博客中执行以下命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 在Octopress的根目录下执行，会生成.ruby-version 
</span><span class='line'>rbenv local 2.2.3
</span><span class='line'>// 然后查看ruby版本
</span><span class='line'>ruby --version</span></code></pre></td></tr></table></div></figure>


<p>这里我显示的还是2.0.0，但是博客作者就直接显示2.2.3了。可能是更新的ruby没有直接替换掉原来的ruby版本。我进入ruby的安装目录看下，的确还是2.0.0版本。<br></p>

<p>最后我就修改了<code>.bash_profile</code>（没有的话需要创建，MAC系统本来时没有这个文件的，Linux本身就有），直接指定下载的ruby版本可执行文件路径:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PATH=/Users/songruiwang/.rbenv/versions/2.2.3/bin:$PATH  </span></code></pre></td></tr></table></div></figure>


<p>把下载的ruby执行路径放在系统环境变量之前，这样执行对应命令时，就会先去指定的目录中查找bin文件了，而不是系统老的ruby版本。<br>
接下来执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>我在执行上面命令时，还出现了一个错误，改一下Gemfile的source即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// http改成https了
</span><span class='line'>source "http://ruby.taobao.org" =&gt;
</span><span class='line'>source "https://ruby.taobao.org"</span></code></pre></td></tr></table></div></figure>


<p>然后就可以正常使用博客了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识碎片二]]></title>
    <link href="http://triplecc.github.io/blog/2015-09-30-ioszhi-shi-sui-pian-er/"/>
    <updated>2015-09-30T23:08:45+08:00</updated>
    <id>http://triplecc.github.io/blog/ioszhi-shi-sui-pian-er</id>
    <content type="html"><![CDATA[<p>1、UITableView点击Cell不触发tableView: didSelectRowAtIndexPath:问题<br>
2、高德、百度地图定位不准确问题<br>
3、tableView在Group模式下section从1开始<br>
4、UIActionSheet和UIAlertView出现边角抖动情况<br>
5、WKWebView开启新页面时无法跳转</p>

<!--more-->


<h2>UITableView点击Cell不触发tableView: didSelectRowAtIndexPath:问题</h2>

<p>今天解决了一个奇怪的问题。老代码使用UITableView来进行类似网易新闻首页的TitleIndex的切换（UITableView旋转90度，cell也相应旋转，主要说是因为这样不用计算contentSize；个人比较喜欢直接用UIScrollView或者UICollectionView），然后会存在一个奇怪的bug：<br></p>

<p>当drag到顶部或者底部时，再drag一次或以上，然后点击对应的cell，会出现第一次点击没有效果（cell使用touchBegin可以捕获到），第二次才调用tableView: didSelectRowAtIndexPath:的情况。<br></p>

<p>找了一下午，也在stackoverflow上找了一些答案，但是大都是说UIScrollView和UITableView混用造成，而且问题现象也有点区别。<br></p>

<p>后来发现是因为设计了一个属性：bounces，UITableView设置了这个属性之后，就会出现以上现象，以下就是下午的DEMO：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UITableView</span> <span class="o">*</span><span class="n">tableView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITableView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">500</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">tableView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tableView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 就是因为这一句</span>
</span><span class='line'>    <span class="n">tableView</span><span class="p">.</span><span class="n">bounces</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">tableView</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">15</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITableViewCell</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithStyle</span><span class="p">:</span><span class="n">UITableViewCellStyleDefault</span> <span class="nl">reuseIdentifier</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">selectionStyle</span> <span class="o">=</span> <span class="n">UITableViewCellSelectionStyleNone</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%zd&quot;</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果设置bounces为NO，就会出现上面所说的bug。去除的话就会出现两边有弹性的情况。所以解决方案有以下几种：<br></p>

<ol>
<li>更改方案，不用UITableView，改用UICollection、UIScrollView<br></li>
<li>在cell中设置tap手势，点击时使用代理传出，然后进行手动调用<br></li>
<li>接受有弹性的情况</li>
</ol>


<p>最后我采用的情况3，因为最方便，也不会造成大影响～～</p>

<h2>高德、百度地图定位不准确问题</h2>

<p>APP中需要向百度和高德传递一个目的地坐标，但是发现百度和高德的定位坐标都是不准确的Bug，只有苹果自带地图才是正确的。然后搜索了下得知关于<code>火星坐标</code>、<code>地球坐标</code>、<code>百度坐标</code>的一些信息。<br></p>

<p>原先不知道后台传递过来的是火星坐标还是地球坐标，所以先将后台传递的坐标给打印出来，并且在网页高德地图中输入打印的坐标，然后和网页地图中搜索对应的地址相对比，发现基本无偏差，所以确认后台传递过来的是火星地图（高德地图用的火星坐标）<br></p>

<p>然后就是百度地图了，因为就使用一个地图坐标转换的功能，所以不想引入整个百度SDK。上网搜了下对应的坐标转换算法，如下：<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">x_pi</span> <span class="o">=</span> <span class="mf">3.14159265358979324</span> <span class="o">*</span> <span class="mf">3000.0</span> <span class="o">/</span> <span class="mf">180.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">bd_encrypt</span><span class="p">(</span><span class="kt">double</span> <span class="n">gg_lat</span><span class="p">,</span> <span class="kt">double</span> <span class="n">gg_lon</span><span class="p">,</span> <span class="kt">double</span> <span class="o">*</span><span class="n">bd_lat</span><span class="p">,</span> <span class="kt">double</span> <span class="o">*</span><span class="n">bd_lon</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x</span> <span class="o">=</span> <span class="n">gg_lon</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">gg_lat</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">z</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.00002</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">y</span> <span class="o">*</span> <span class="n">x_pi</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">atan2</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.000003</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x_pi</span><span class="p">);</span>
</span><span class='line'>    <span class="o">*</span><span class="n">bd_lon</span> <span class="o">=</span> <span class="n">z</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">theta</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.0065</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">bd_lat</span> <span class="o">=</span> <span class="n">z</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">theta</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.006</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是从火星坐标转换到百度坐标的函数（作者从百度SDK中逆向出来的代码）。<br></p>

<p>将后台传送的坐标通过如上函数的转换，就可以在百度地图APP中精确地进行显示了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">urlString</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;baidumap://map/direction?origin=latlng:%lf,%lf|name:我的位置&amp;destination=latlng:%f,%f|name:%@&amp;mode=driving&quot;</span><span class="p">,</span> <span class="n">location</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="n">location</span><span class="p">.</span><span class="n">coordinate</span><span class="p">.</span><span class="n">longitude</span><span class="p">,</span> <span class="n">bdlat</span><span class="p">,</span> <span class="n">bdlon</span><span class="p">,</span> <span class="n">title</span><span class="p">]</span> <span class="nl">stringByAddingPercentEscapesUsingEncoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">openURL</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="n">urlString</span><span class="p">]];</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是发现高德地图还是显示不正确，然后查看了高德地图的API文档，发现是老代码有一个参数传错了：dev=0，原来传的是1，表示再进行一次国测转换（如果传的是地球坐标，那么这里传1）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">urlString</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;iosamap://navi?sourceApplication=%@&amp;backScheme=%@&amp;poiname=%@&amp;lat=%lf&amp;lon=%lf&amp;dev=0&amp;style=2&quot;</span><span class="p">,</span> <span class="s">@&quot;FANCY&quot;</span><span class="p">,</span> <span class="s">@&quot;mudlab-manhattan&quot;</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">]</span> <span class="nl">stringByAddingPercentEscapesUsingEncoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">openURL</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="n">urlString</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下是相应资料：</p>

<p><a href="http://blog.csdn.net/coolypf/article/details/8569813">火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换算法</a></p>

<p><a href="http://blog.csdn.net/zhaoxy_thu/article/details/17033347">Objective-C上地球坐标系到火星坐标系转换算法</a></p>

<p><a href="http://blog.csdn.net/jiajiayouba/article/details/25140967">iOS 火星坐标相关整理及解决方案汇总</a></p>

<h2>tableView在Group模式下section从1开始</h2>

<p>在设置sectionHeaderHeight为固定值后，发现viewForHeaderInSection是从section为1开始的，很疑惑，然后google了下原因，stackoverflow上已经有了答案：<a href="http://stackoverflow.com/questions/18932476/in-ios-7-viewforheaderinsection-section-is-starting-from-1-not-from-0">解决方案</a></p>

<p>还有手册中对于这个方法的说明：
<img src="http://triplecc.github.io/images/Snip20151118_2.png" alt="" /></p>

<h2>UIActionSheet和UIAlertView出现边角抖动情况</h2>

<p>如下情况：</p>

<p><img src="http://triplecc.github.io/images/2015-11-19.gif" alt="" /></p>

<p>被这个问题困扰了很久，因为在iOS7和iOS8中，现象都没那么明显，所以忽略了，但是在iOS9中就特别明显，虽然不影响用户的正常使用，优先级并不高，但总归是需要解决的bug。在stackoverflow询问后之后，很久才有人回复，原因是<code>UIViewEdgeAntialiasing</code>，如果有设置过这个字段为true，就会出现这样的问题，所以只要把它设置为false即可。<a href="http://stackoverflow.com/questions/19960108/renders-with-edge-antialiasing-causes-delay-in-uialertview-in-ios-7">更多解释</a></p>

<h2>WKWebView开启新页面时无法跳转</h2>

<p>使用WKWebView发现某些界面无法跳转，然后试了下UIWebView是可以的，使用浏览器打开，发现是打开一个新界面。于是就去google了下，发现了以下解决方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">webView</span><span class="p">.</span><span class="n">UIDelegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">webView</span><span class="p">(</span><span class="nl">webView</span><span class="p">:</span> <span class="n">WKWebView</span><span class="p">,</span> <span class="n">createWebViewWithConfiguration</span> <span class="nl">configuration</span><span class="p">:</span> <span class="n">WKWebViewConfiguration</span><span class="p">,</span> <span class="n">forNavigationAction</span> <span class="nl">navigationAction</span><span class="p">:</span> <span class="n">WKNavigationAction</span><span class="p">,</span> <span class="nl">windowFeatures</span><span class="p">:</span> <span class="n">WKWindowFeatures</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">WKWebView</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">navigationAction</span><span class="p">.</span><span class="n">targetFrame</span><span class="o">?</span><span class="p">.</span><span class="n">mainFrame</span> <span class="o">??</span> <span class="nb">true</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">webView</span><span class="p">.</span><span class="n">loadRequest</span><span class="p">(</span><span class="n">navigationAction</span><span class="p">.</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是swift版本的，对应的<a href="http://stackoverflow.com/questions/25713069/why-is-wkwebview-not-opening-links-with-target-blank">stackoverflow上的回答</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP后台编程初探]]></title>
    <link href="http://triplecc.github.io/blog/2015-09-26-phphou-tai-bian-cheng-chu-tan/"/>
    <updated>2015-09-26T20:40:04+08:00</updated>
    <id>http://triplecc.github.io/blog/phphou-tai-bian-cheng-chu-tan</id>
    <content type="html"><![CDATA[<p>这一个星期主要需要理解的代码主要是实现这样的一个功能：<br></p>

<p><img src="http://triplecc.github.io/images/2015-09-27%2010_07_51.gif" alt="" /></p>

<p>这是一个分类网站的雏形，主要针对的是面向对象的应用和思想。</p>

<!--more-->


<h2>业务</h2>

<p>分类业务主要包括以下几点：</p>

<ul>
<li>核心信息是<code>广告</code></li>
<li>将广告按照类目、地区、用户进行了分类</li>
<li>广告具有所属类目、所属地区、所属用户以及对应评论特性</li>
<li>也可以从类目、地区、用户中获取对应的所有广告信息</li>
</ul>


<h2>核心代码层级构建</h2>

<ul>
<li>创建一个单例，管理数据库的连接（DataConnection）</li>
<li>根据表结构，创建一个共同的父类（Data），一个父类对象对应每个表中的特定行（table、key），这个父类提供主键查询（load），字段查询（find）功能。另外一点技巧是根据PHP动态创建属性的特性，创建一个数组属性，供外界传入各自拥有的字段映射（关联数组）</li>
<li>数据库中的部分表中存在父子节点关系，所以创建一个管理父子节点的子类（Tree），提供常用的树操作：查询子节点（children）、查询父节点（parent）、查询父族（getTree）</li>
<li>各个不同的表创建一个子类，并根据不同的字段，在构造时传入不同的<code>初始值</code>和<code>需要动态创建的属性及对应的查询字段</code></li>
</ul>


<h2>核心代码剖析</h2>

<h4>PHP部分基础语法</h4>

<p>变量：<br>
PHP是类型松散语言，会根据右边的数值决定左边的类型.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$color</span>    <span class="nv">$符号表示变量</span>
</span></code></pre></td></tr></table></div></figure>


<p>数组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// 创建数组</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 关联数组</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;b&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 添加数组</span>
</span><span class='line'><span class="nv">$o</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Object</span><span class="p">();</span>
</span><span class='line'><span class="nv">$a</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$o</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 关联数组的遍历(as)</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">columns</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;键:&quot;</span> <span class="o">.</span> <span class="nv">$key</span> <span class="o">.</span> <span class="s2">&quot;  &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">echo</span> <span class="s2">&quot;值:&quot;</span> <span class="o">.</span> <span class="nv">$value</span> <span class="o">.</span> <span class="s2">&quot;  &quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 普通数组的另一种遍历方式</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$a</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>字符串的基本运算：<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">.</span>      <span class="nx">串接</span>
</span><span class='line'><span class="o">.=</span>     <span class="nx">串接赋值</span>
</span></code></pre></td></tr></table></div></figure>


<p>clone对象复制（新对象）：<br>
对对象内的基本数值类型进行传值复制，对对象内对象型的成员变量，如果不重写__clone函数，显示clone这个对象成员变量，那么这个成员变量就是进行引用复制，不是生成一个新的对象</p>

<p>继承使用extends。<br></p>

<p>this、self、parent为分别指向当前对象、当前类、父类的指针。<br></p>

<h4>数据连接单例</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">DataConnection</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">private</span> <span class="k">static</span> <span class="nv">$dataConnection</span><span class="p">;</span>
</span><span class='line'>     <span class="k">public</span> <span class="nv">$connection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>         <span class="c1">// 连接数据库</span>
</span><span class='line'>         <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">connection</span> <span class="o">=</span> <span class="nb">mysql_connect</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">or</span> <span class="k">die</span><span class="p">(</span><span class="nb">mysql_error</span><span class="p">());</span>
</span><span class='line'>         <span class="c1">// 选取chaoge数据库</span>
</span><span class='line'>         <span class="nb">mysql_select_db</span><span class="p">(</span><span class="s2">&quot;chaoge&quot;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">connection</span><span class="p">)</span> <span class="k">or</span> <span class="k">die</span><span class="p">(</span><span class="nb">mysql_error</span><span class="p">());;</span>
</span><span class='line'>         <span class="c1">// 向数据库执行SET NAMES UTF8命令(执行数据库命令，设置字符集编码格式)</span>
</span><span class='line'>         <span class="nb">mysql_query</span><span class="p">(</span><span class="s2">&quot;SET NAMES UTF8&quot;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">connection</span><span class="p">)</span> <span class="k">or</span> <span class="k">die</span><span class="p">(</span><span class="nb">mysql_error</span><span class="p">());;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getInstance</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>         <span class="c1">// 为空创建</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$dataConnection</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>             <span class="nx">self</span><span class="o">::</span><span class="nv">$dataConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DataConnection</span><span class="p">();</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$dataConnection</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>共同父类Data</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="k">class</span> <span class="nc">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$sql</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="nv">$rs</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>        <span class="k">public</span> <span class="nv">$table</span><span class="p">;</span>
</span><span class='line'>        <span class="k">public</span> <span class="nv">$key</span><span class="p">;</span>
</span><span class='line'>        <span class="k">public</span> <span class="nv">$columns</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">init</span><span class="p">(</span><span class="nv">$option</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">table</span> <span class="o">=</span> <span class="nv">$option</span><span class="p">[</span><span class="s1">&#39;table&#39;</span><span class="p">];</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">key</span> <span class="o">=</span> <span class="nv">$option</span><span class="p">[</span><span class="s1">&#39;key&#39;</span><span class="p">];</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">columns</span> <span class="o">=</span> <span class="nv">$option</span><span class="p">[</span><span class="s1">&#39;columns&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">fetch</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 取得结果集中的一行作为关联数组</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">mysql_fetch_assoc</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rs</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">query</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$connection</span> <span class="o">=</span> <span class="nx">DataConnection</span><span class="o">::</span><span class="na">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">connection</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// 执行查询语句</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rs</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sql</span><span class="p">,</span> <span class="nv">$connection</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 返回查找到的行数</span>
</span><span class='line'>            <span class="c1">// mysql_num_rows返回实际结果集中获取的行数</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">mysql_affected_rows</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 查找主键所在行的数据</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">load</span><span class="p">(</span><span class="nv">$v</span><span class="o">=</span><span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 获取主键字段对应的属性名</span>
</span><span class='line'>            <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 获取主键值</span>
</span><span class='line'>                <span class="nv">$v</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$key</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 创建数据库查询语句</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM </span><span class="si">{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">table</span><span class="si">}</span><span class="s2"> WHERE </span><span class="si">{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">columns</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span><span class="si">}</span><span class="s2"> = </span><span class="si">{</span><span class="nv">$v</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>             <span class="c1">// 进行数据库查询                                                                                                                                                        </span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 获取主键所在行关联数组</span>
</span><span class='line'>                <span class="nv">$ar</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">columns</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 设置动态添加属性的值为对应数据库字段读取的值</span>
</span><span class='line'>                    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$key</span> <span class="o">=</span> <span class="nv">$ar</span><span class="p">[</span><span class="nv">$value</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 可以根据columns中的字段来进行查找</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">find</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 拼接where，WHERE 1=1是减少是否需要添加WHERE的麻烦</span>
</span><span class='line'>            <span class="nv">$where</span> <span class="o">=</span> <span class="s2">&quot; WHERE 1 = 1 &quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$limit</span> <span class="o">=</span> <span class="s2">&quot; LIMIT 0, 10 &quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">columns</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 如果对应的动态属性有值，就添加对应的查询条件</span>
</span><span class='line'>                    <span class="c1">// $value是数据库字段，$this-&gt;$key是模型属性的值</span>
</span><span class='line'>                    <span class="nv">$where</span> <span class="o">.=</span> <span class="s2">&quot;AND </span><span class="si">{</span><span class="nv">$value</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 拼接查询语句</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM </span><span class="si">{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">table</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="nv">$where</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="nv">$limit</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$ar</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// 进行数据库查询</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 获取查询的一行数据</span>
</span><span class='line'>                <span class="k">while</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 这里进行clone，表示只是想要查询，并不想要改变$this的相关属性值</span>
</span><span class='line'>                    <span class="c1">// 实现面向对象编程的方式，使用clone</span>
</span><span class='line'>                    <span class="nv">$o</span> <span class="o">=</span> <span class="k">clone</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">columns</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="c1">// 设置动态添加属性的值为对应数据库字段读取的值</span>
</span><span class='line'>                        <span class="nv">$o</span><span class="o">-&gt;</span><span class="nv">$key</span> <span class="o">=</span> <span class="nv">$a</span><span class="p">[</span><span class="nv">$value</span><span class="p">];</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="c1">// 将设置号查询数据的对象添加到数组中</span>
</span><span class='line'>                    <span class="nv">$ar</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$o</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>      <span class="c1">// 重写__get方法，获取属性时就先判断属性有没有,没有的话输出null</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">__get</span><span class="p">(</span><span class="nv">$property_name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// $this有$property_name属性的情况下返回属性值</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">property_exists</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="nv">$property_name</span><span class="p">)</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$property_name</span> <span class="o">:</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为一个Data对象对应着数据库中的一行数据，所以需要有以下对应的属性：<br>
1. table    ->对应的表<br>
2. key      ->对应行主键<br>
3. columns  ->对应每个表中各自的私有字段<br></p>

<p>并且其中涉及到了PHP动态<code>创建属性</code>的特性。<br></p>

<p>动态创建的属性默认是public的，要想动态创建私有的属性，可以这么做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">foo</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">private</span> <span class="nv">$a</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$_properties</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__set</span><span class="p">(</span><span class="nv">$var</span><span class="p">,</span> <span class="nv">$val</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_properties</span><span class="p">[</span><span class="nv">$var</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__get</span><span class="p">(</span><span class="nv">$var</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_properties</span><span class="p">[</span><span class="nv">$var</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">foo</span><span class="p">();</span>
</span><span class='line'><span class="nv">$a</span><span class="o">-&gt;</span><span class="na">__set</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;111&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">__get</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用一个private的数组，每次创建时可以往这个数组里面添加元素。<br></p>

<p>__set当给不可访问或不存在属性赋值时被使用。<br></p>

<p>__get当读取不可访问或不存在的属性时被调用。<br></p>

<p>可以在以上函数中设置错误抛出，当访问不存在属性时就抛出错误。<br></p>

<p>isset是在参数为null或者属性不存在时返回false，否则返回true。<br></p>

<p>其中有两个数据库的函数，我纠结了挺久，是关于执行SELECT返回的数据行数。</p>

<ul>
<li>mysql_affected_rows()

<ul>
<li>Retrieves the number of rows from a result set. This command is only valid for statements like SELECT or SHOW that return an actual result set.</li>
</ul>
</li>
<li>mysql_num_rows()

<ul>
<li>Get the number of affected rows by the last INSERT, UPDATE, REPLACE or DELETE query associated with link_identifier.</li>
</ul>
</li>
</ul>


<p>但是实际使用的时候，两者返回的值是一样的，个人感觉和手册上面说的有点不一样。最后在stackoverflow问了下，得出以下结论：</p>

<ul>
<li>mysql_affected_rows()返回查询到的数据行数</li>
<li>mysql_num_rows()返回实际返回的数据行数（结果集中）</li>
</ul>


<p>详细的讨论在这里：<a href="http://bytes.com/topic/php/answers/749156-difference-between-mysql_affected_rows-mysql_num_rows">mysql_affected_rows()和mysql_num_rows()</a></p>

<h2>管理树操作子类Tree</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Tree</span> <span class="k">extends</span> <span class="nx">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nv">$pkey</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">init</span><span class="p">(</span><span class="nv">$option</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pkey</span> <span class="o">=</span> <span class="nv">$option</span><span class="p">[</span><span class="s1">&#39;pkey&#39;</span><span class="p">];</span>
</span><span class='line'>            <span class="k">parent</span><span class="o">::</span><span class="na">init</span><span class="p">(</span><span class="nv">$option</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">children</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 获取主键字段对应的属性名</span>
</span><span class='line'>            <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">key</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// 获取父页节点主键对应的属性名</span>
</span><span class='line'>            <span class="nv">$pkey</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pkey</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 这里name属性还没有被创建，试一下__get</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;&lt;br&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">table</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 获取对象类名</span>
</span><span class='line'>            <span class="nv">$class</span> <span class="o">=</span> <span class="nb">get_class</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$o</span> <span class="o">=</span> <span class="k">new</span> <span class="nv">$class</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$o</span><span class="o">-&gt;</span><span class="nv">$pkey</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$key</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$o</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">parent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 获取主键字段对应的属性名</span>
</span><span class='line'>            <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">key</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// 获取父节点主键对应的属性名</span>
</span><span class='line'>            <span class="nv">$pkey</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pkey</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$class</span> <span class="o">=</span> <span class="nb">get_class</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$o</span> <span class="o">=</span> <span class="k">new</span> <span class="nv">$class</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$o</span><span class="o">-&gt;</span><span class="nv">$key</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$pkey</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$o</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">function</span> <span class="nf">getTree</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 获取父页面主键对应的属性名</span>
</span><span class='line'>            <span class="nv">$pkey</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pkey</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$ar</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// clone是产生一个和原来一样的新的对象，没有clone的话是一个对象引用</span>
</span><span class='line'>            <span class="c1">// 这里主要是规避$this不能被赋值问题</span>
</span><span class='line'>            <span class="c1">// 因为$o中的属性并不会被改变，所以这里也可以不使用clone</span>
</span><span class='line'>          <span class="c1">// $o = clone $this;</span>
</span><span class='line'>            <span class="nv">$o</span> <span class="o">=</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>            <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 将从本身开始，到最后层级的父节点添加到数组中</span>
</span><span class='line'>                <span class="nv">$ar</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$o</span><span class="p">;</span>
</span><span class='line'>                <span class="c1">// 获取父节点</span>
</span><span class='line'>                <span class="nv">$o</span> <span class="o">=</span> <span class="nv">$o</span><span class="o">-&gt;</span><span class="na">parent</span><span class="p">();</span>
</span><span class='line'>                <span class="c1">// 如果没有父节点对应的主键值，那么表示没有父节点，退出循环</span>
</span><span class='line'>            <span class="p">}</span><span class="k">while</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$o</span><span class="o">-&gt;</span><span class="nv">$pkey</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$o</span><span class="o">-&gt;</span><span class="nv">$pkey</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 将父节点排在最前面</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">array_reverse</span><span class="p">(</span><span class="nv">$ar</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>php实现面向对象的编程方式可以使用两种方式：</p>

<ol>
<li><code>clone</code>方式，这样不管实际类是哪种，都可以拷贝一个全新的对象出来。这种方式在这个上下文下需要对clone的类的部分属性进行清空。</li>
<li>使用另一种方式，即以上方式：通过<code>get_class</code>获取类名，然后重新创建一个。</li>
</ol>


<h2>详细子类</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>   <span class="k">class</span> <span class="nc">Category</span> <span class="k">extends</span> <span class="nx">Tree</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$option</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="c1">// 表格</span>
</span><span class='line'>                <span class="s1">&#39;table&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;babel_node&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="c1">// 主键</span>
</span><span class='line'>                <span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="c1">// 父节点主键</span>
</span><span class='line'>                <span class="s1">&#39;pkey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;pid&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="c1">// 表格对应的私有字段</span>
</span><span class='line'>                <span class="s1">&#39;columns&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                    <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;node_id&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;pid&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;nod_pid&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;nod_title&#39;</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>            <span class="k">parent</span><span class="o">::</span><span class="na">init</span><span class="p">(</span><span class="nv">$option</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">ads</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ad</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// 设置分类id</span>
</span><span class='line'>            <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">categoryId</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// 因为分类id被设置了，所以查找的时候就只有分类id这一个过滤条件</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Area</span> <span class="k">extends</span> <span class="nx">Tree</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$option</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;table&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;babel_area&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;pkey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;pid&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;columns&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                    <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;area_id&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;pid&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;area_pid&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;area_title&#39;</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>            <span class="k">parent</span><span class="o">::</span><span class="na">init</span><span class="p">(</span><span class="nv">$option</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">ads</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ad</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// 设置地区id</span>
</span><span class='line'>            <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">areaId</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// 因为地区id被设置了，所以查找的时候就只有地区id这一个过滤条件</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">User</span> <span class="k">extends</span> <span class="nx">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$option</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;table&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;babel_User&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;columns&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                    <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;usr_id&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;usr_email&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;usr_nick&#39;</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>            <span class="k">parent</span><span class="o">::</span><span class="na">init</span><span class="p">(</span><span class="nv">$option</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">ads</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ad</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// 设置用户id</span>
</span><span class='line'>            <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">userId</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// 因为用户id被设置了，所以查找的时候就只有用户id这一个过滤条件</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Comment</span> <span class="k">extends</span> <span class="nx">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$option</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;table&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;babel_reply&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;columns&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                    <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;rpl_id&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;adId&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;rpl_tpc_id&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;userId&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;rpl_post_usr_id&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;userName&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;rpl_post_nick&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;content&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;rpl_content&#39;</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>            <span class="k">parent</span><span class="o">::</span><span class="na">init</span><span class="p">(</span><span class="nv">$option</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Ad</span> <span class="k">extends</span> <span class="nx">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 广告里面包含了对应所属的分类，用户，地区信息</span>
</span><span class='line'>        <span class="k">public</span> <span class="nv">$category</span><span class="p">;</span>
</span><span class='line'>        <span class="k">public</span> <span class="nv">$user</span><span class="p">;</span>
</span><span class='line'>        <span class="k">public</span> <span class="nv">$area</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$option</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;table&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;babel_topic&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;columns&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                    <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tpc_id&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;categoryId&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tpc_pid&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;userId&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tpc_uid&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;areaId&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tpc_area&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tpc_title&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;content&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tpc_content&#39;</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>            <span class="k">parent</span><span class="o">::</span><span class="na">init</span><span class="p">(</span><span class="nv">$option</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">load</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">parent</span><span class="o">::</span><span class="na">load</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 设置分类、用户、地区属性对应的主键值</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">category</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Category</span><span class="p">();</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">category</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">categoryId</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">();</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">user</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">userId</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">area</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Area</span><span class="p">();</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">area</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">areaId</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">commments</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Comment</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// 设置评论id</span>
</span><span class='line'>            <span class="nv">$c</span><span class="o">-&gt;</span><span class="na">adId</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// 因为评论id被设置了，所以查找的时候就只有评论id这一个过滤条件</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这几个子类将自身的属性和数据库中的字段进行了映射，这样外部操作就可以脱离数据库了，只需要和模型交互即可。</p>

<h2>主页界面构建</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="c1">// 包含kijiji.php文件                                                                                                                                                                                </span>
</span><span class='line'>    <span class="k">require_once</span><span class="p">(</span><span class="s2">&quot;kijiji.php&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 在URL中捕获id参数的值</span>
</span><span class='line'>    <span class="nv">$id</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Category</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$c</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">=</span> <span class="nv">$id</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$c</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$d</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Data</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$d</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">=</span> <span class="nv">$id</span><span class="p">;</span>
</span><span class='line'><span class="c1">//    $d-&gt;load();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//   $d-&gt;song = 1;</span>
</span><span class='line'><span class="c1">//    var_dump(get_object_vars($d));</span>
</span><span class='line'><span class="c1">//    var_dump(get_object_vars($c));</span>
</span><span class='line'><span class="c1">//    var_dump(get_class_methods(&quot;Category&quot;));</span>
</span><span class='line'><span class="c1">//    var_dump(get_class_vars(&quot;Category&quot;));</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$c</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$o</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;&lt;hr&gt;&lt;a href=list.php?id=</span><span class="si">{</span><span class="nv">$o</span><span class="o">-&gt;</span><span class="na">id</span><span class="si">}</span><span class="s2">&gt;</span><span class="si">{</span><span class="nv">$o</span><span class="o">-&gt;</span><span class="na">name</span><span class="si">}</span><span class="s2">&lt;/a&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$o</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$oo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;&lt;li&gt;&lt;a href=list.php?id=</span><span class="si">{</span><span class="nv">$oo</span><span class="o">-&gt;</span><span class="na">id</span><span class="si">}</span><span class="s2">&gt;</span><span class="si">{</span><span class="nv">$oo</span><span class="o">-&gt;</span><span class="na">name</span><span class="si">}</span><span class="s2">&lt;/a&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>添加</h2>

<p>添加功能是后面新增的，主要需要有两点：<br>
1. 界面上需要一个输入框和一个确认键，确认后提交评论<br>
2. 提交的评论存入数据库</p>

<p>这个功能主要分成两部分：界面，数据库<br>
1. 界面使用PHP的表单来进行数据传输<br>
2. 数据库插入在Data类中添加一个无参，返回值为false/数据主键的方法</p>

<p>具体代码如下：<br>
界面代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// 从POST中获取评论数据</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;comment&#39;</span><span class="p">])){</span>
</span><span class='line'>    <span class="nv">$comment</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Comment</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$comment</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;comment&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nv">$comment</span><span class="o">-&gt;</span><span class="na">userName</span> <span class="o">=</span> <span class="s2">&quot;songruiwang&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$comment</span><span class="o">-&gt;</span><span class="na">userId</span> <span class="o">=</span> <span class="mi">2222</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$comment</span><span class="o">-&gt;</span><span class="na">adId</span> <span class="o">=</span> <span class="nv">$id</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;主键:&quot;</span> <span class="o">.</span> <span class="nv">$comment</span><span class="o">-&gt;</span><span class="na">insert</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 通过表单实现界面刷新，并且以POST的方式传递数据</span>
</span><span class='line'><span class="k">echo</span> <span class="s1">&#39;&lt;form method=&quot;post&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;comment&quot;&gt;</span>
</span><span class='line'><span class="s1">&lt;input type=&quot;submit&quot;  value=&quot;提交&quot;&gt;&lt;/form&gt;&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>数据库插入代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>  <span class="c1">// 插入数据</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">insert</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$keys</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$values</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">columns</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 不插入设置主键</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$key</span> <span class="o">!=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">key</span> <span class="o">&amp;&amp;</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$keys</span> <span class="o">.=</span> <span class="s2">&quot;</span><span class="si">{</span><span class="nv">$value</span><span class="si">}</span><span class="s2">,&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="nv">$values</span> <span class="o">.=</span> <span class="s2">&quot;&#39;</span><span class="si">{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$key</span><span class="si">}</span><span class="s2">&#39;,&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 去掉最后面的逗号</span>
</span><span class='line'>        <span class="nv">$keys</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$keys</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$keys</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$values</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$values</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$values</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 构造数据库sql语句</span>
</span><span class='line'>        <span class="nv">$databaseName</span> <span class="o">=</span> <span class="s2">&quot;chaoge&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sql</span> <span class="o">=</span> <span class="s2">&quot;INSERT INTO </span><span class="si">{</span><span class="nv">$databaseName</span><span class="si">}</span><span class="s2"> . </span><span class="si">{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">table</span><span class="si">}</span><span class="s2"> (</span><span class="si">{</span><span class="nv">$keys</span><span class="si">}</span><span class="s2">) VALUES (</span><span class="si">{</span><span class="nv">$values</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 执行数据库插入语句</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 返回上一步插入后产生的主键</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">mysql_insert_id</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于这一周总结]]></title>
    <link href="http://triplecc.github.io/blog/2015-09-26-ioszhi-shi-sui-pian-er/"/>
    <updated>2015-09-26T11:47:49+08:00</updated>
    <id>http://triplecc.github.io/blog/ioszhi-shi-sui-pian-er</id>
    <content type="html"><![CDATA[<p>进入了一个新的创业公司，公司的人数不是很多，COO是少楠，一个我很尊敬的前产品经理，而技术全部由CEO一人完成。我是以iOS工程师的身份进去的，不过还是需要先进行将近一个月的后台编程学习，使用的语言工具是php。<br>
刚进入公司，非常地累，并不是以往的那种累，一方面是来自CEO的压力，一方面是思想层面上的。CEO也不时指出我在开发过程中一些及其不好的习惯，还有一些思想层面上的东西，收获很多，虽然刚开始有点不习惯这种直白的方式吧，但是填的坑有点多了以后，发现其实这样也挺好，至少我记得更加深刻一些。<br>
以下就是这一个星期自己每天所得：<br></p>

<!--more-->


<p>1、自己在以前开发或者学习过程中没有充分实现对工具的利用（快捷键）</p>

<ul>
<li>这点是在第一天去公司的还没超过一小时被指出的，因为以前做iOS，接触的大部分是Xcode上的快捷键，然后对safari的快捷键一点没有了解，而且最为致命的一点是，我在切换程序的时候习惯性地会用触控板点，没有用tab+command。其实因为我以前使用ubuntu，不敢说对快捷键很依赖，但是也算是很追求这个的吧，至少vim编辑器使用地还是相对不错的，大部分情况也会用终端开程序。不过在mac系统上还是大意了吧。</li>
</ul>


<p>2、自己在以前不善于总结，比如Git，以为相对比较了解了，但是距离能讲出来给完全不会的人听还是有差距</p>

<ul>
<li><p>这点是在CEO让我在一个小时内熟悉Git开发的通常流程过程中被指出的。说实在话，第一天刚开始就被震住了，脑子思考有点断片，因为自己混github也有段时间了，也用OSChina上面的Git代码托管合作过一个项目，但是对一些常规操作也说不清楚。后来CEO给我说了下，顿时醍醐灌顶。以前自己只是知道了怎么用，而不会关心到底为什么会这样，这次是吸取到教训了。当时画的图类似下面图片：<img src="http://triplecc.github.io/images/Snip20150926_1.png" alt="" />。<br></p>

<ul>
<li>可以看到主体分成了四块：Remote、Local、Cache、File。<br></li>
<li>而平时我们Xcode打开的就是在File里面的，如果没有add进Cache里面，就会显示一个?符号。<br></li>
<li>当时checkout没怎么用过，也就表述不清，其实主要就是在Local仓库里面可能存在ABC三个分支，而File终只会有一个分支的代码，所以通过checkout来切换不同分支的代码。<br></li>
<li>还有一点，以前对pull request理解不是很清晰，其实就是给master Remote发送一个请求，请求master Remote对fork Remote进行pull。<br></li>
<li>使用fetch+merge＝pull，使用前者的好处是可以多次fetch最新代码到本地，但是没有merge，也就不会有冲突产生，而使用pull就得每次都得解决冲突。<br></li>
<li>抽象来说，这就是4个仓库，只不过是放在了不同的地方，他们之间的数据传输可以大体总结为两个方式pull+push。</li>
</ul>
</li>
</ul>


<p>3、遇到一些问题，尽量联想并结合以前相关的知识和代码进行解决</p>

<ul>
<li>这点是在php构造函数上面的一个疑问，代码如下

<ul>
<li>当时问的是为什么要另外弄一个init函数，而不是直接使用构造函数__construct，后来没有得到直接的回答。只是引导性的问我构造函数什么时候执行等等问题，后来得出的结论是这些问题其实我都知道，但是就没有联想到这个问题上面，就是init可能会在其他地方被调用，如果改为构造函数的话， 那就无法进行二次调用了。这就是“伸手党”。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="k">public</span> <span class="k">function</span> <span class="nf">init</span><span class="p">(</span><span class="nv">$options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">table</span> <span class="o">=</span> <span class="nv">$options</span><span class="p">[</span><span class="s1">&#39;table&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">columns</span> <span class="o">=</span> <span class="nv">$options</span><span class="p">[</span><span class="s1">&#39;columns&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">key</span> <span class="o">=</span> <span class="nv">$options</span><span class="p">[</span><span class="s1">&#39;key&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reset</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">-----------------</span><span class="nx">snip</span><span class="o">----------------</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="nv">$options</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>         <span class="s1">&#39;table&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;babel_node&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="s1">&#39;pkey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;pid&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="s1">&#39;columns&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>             <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;node_id&#39;</span><span class="p">,</span>
</span><span class='line'>             <span class="s1">&#39;pid&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;nod_pid&#39;</span><span class="p">,</span>
</span><span class='line'>             <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;nod_title&#39;</span>
</span><span class='line'>         <span class="p">));</span>
</span><span class='line'>     <span class="k">parent</span><span class="o">::</span><span class="na">init</span><span class="p">(</span><span class="nv">$options</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>4、架构的本质是分层和抽象，代码的本质是路由</p>

<ul>
<li>其实只要有一种语言工具，能提供基本的表达式和if else就能编写几乎所有业务了。</li>
</ul>


<p>5、工作外的时间尽量用来总结，提炼本质，而不是学习新知识，去跨界的阅读</p>

<ul>
<li>这点还是有些意外的，因为当时说是自己平时可能会上appcoda上面看些小demo，然后就得到了这样的一个建议，说是知识是学不完了，不总结一些本质性的东西，会离世界上最先进的技术越来越远。怎么说呢，现在还是体会不到吧。后来推荐的一些读物：<a href="http://www.ruanyifeng.com/blog/">阮一峰</a> , <a href="http://www.cnblogs.com/weidagang2046/p/the-nature-of-meta.html">程序本质</a></li>
</ul>


<p>6、看函数要看本质，理解这个函数从根本上要做什么事情，而不是更具部分调用的上下文来判定
7、如何对每个小任务按照知识点进行分块，每个分块应该如何进行学习或者设计，并且在这一步，分块的设计应该是面向接口的，而不是针对内部细节</p>

<ul>
<li><p>这一点真的是感触很深，因为以前可能只会对一些大任务进行模块的划分，而现在是要对一个小任务进行分块。比如现在有以下任务：给界面添加一个评论输入框，点击提交的时候将评论插入到数据库，然后界面更新出现评论。给10分钟进行分块。后来我的划分是这样的：</p>

<ul>
<li>1、针对界面，可能涉及到HTML的一些语句，还有与php传递数据的问题。因为这一块不是很熟悉，所以花20分钟进行学习</li>
<li>2、针对数据库操作，给根Data添加一个insert函数，函数无入参，返回false/主键值。用15分钟

<ul>
<li>这里当时没事先设计好，只是说要创建一个插入函数，其实这里要做的是进行面向接口设计，不必去在意细节</li>
</ul>
</li>
<li>3、最后花15分钟进行编码</li>
</ul>


<p>事实上，我花了肯定不止1小时来完成这个任务，但是这种分块技巧让我受益匪浅，知道了将每一步要做些什么具象出来，而不是想到哪里写哪里。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[翻译篇：实现Twitter个人详情动态效果]]></title>
    <link href="http://triplecc.github.io/blog/2015-09-08-fan-yi-pian-:shi-xian-twitterge-ren-xiang-qing-dong-tai-xiao-guo/"/>
    <updated>2015-09-08T01:32:07+08:00</updated>
    <id>http://triplecc.github.io/blog/fan-yi-pian-:shi-xian-twitterge-ren-xiang-qing-dong-tai-xiao-guo</id>
    <content type="html"><![CDATA[<p>原文由<a href="https://github.com/ariok">ariok</a>发表，地址是<a href="http://www.thinkandbuild.it/implementing-the-twitter-ios-app-ui/">implementing-the-twitter-ios-app-ui</a></p>

<p>效果图如下：<br>
<img src="http://triplecc.github.io/images/2015-09-08%2014_55_03.gif" alt="" /></p>

<p>原来作者的代码会存在一个Bug：<br></p>

<blockquote><p>当快速下拉时，个人头像并不会立刻显示在HeaderView上方，我已经向作者提交了Pull requests</p></blockquote>

<p>编译过程中会发生错误，因为swift更新了，所以需要自己解决下错误。</p>

<!--more-->


<h2>结构描述</h2>

<p>在编码之前，我将对UI的结构做一个简单的介绍。<br></p>

<p>打开Main.storyboard文件。在唯一的一个控制器view中，你可以发现两个主要的对象。第一个是显示Header的视图，第二个是一个包含个人头像(我们叫它Avatar)和其他与账号相关，比如用户名、follow按钮的ScrollView。Sizer控件只是用来确认ScrollView内容是否能进行垂直滚动。<br></p>

<p>就像你所看到的，这个结构非常简单。需要的注意的是，我将Header放在ScrollView外面，而不是把它和其他ScrollView子控件放在一起。因为这样做可以让这个结构具备更好的扩展性。<br></p>

<h2>开始编码</h2>

<p>如果你仔细看完动画，你会注意到你可以管理两个不同的动作：<br></p>

<p>1) 用户下拉（当ScrollView内容已经在屏幕的顶部时）<br></p>

<p>2) 用户上/下滚动<br></p>

<p>这个动作可以分解成四步：<br></p>

<p>2.1) 向上滚动，Header控件缩小直到它的尺寸和导航栏默认尺寸相等，然后这个Header控件就会粘在屏幕的上方<br></p>

<p>2.2) 向上滚动， Avatar（头像）逐渐变小<br></p>

<p>2.3) 当Header控件和ScrollView的子控件重叠时，Avatar（头像）在Header控件底部<br></p>

<p>2.4) 当用户名Label的顶部和Header控件底部重叠时，一个新的白色Label将会从Header控件的中底部显示。并且Header控件的图片变模糊。<br></p>

<p>打开ViewController.swift，让我们一步一步地实现这些功能<br></p>

<h2>设置控制器</h2>

<p>第一件需要去做的事是获取ScrollView的offset信息。通过实现UIScrollViewDelegate协议的scrollViewDidScroll方法，我们可以很容易地做到这一点。<br></p>

<p>一种最简单的展示一个view上变化的方式是使用CoreAnimation三维变换，并且设置新值给layer.transform属性。<br></p>

<p>这个关于CoreAnimation的教程可能会让它变得简便：<br>
<a href="http://www.thinkandbuild.it/playing-around-with-core-graphics-core-animation-and-touch-events-part-1/.">http://www.thinkandbuild.it/playing-around-with-core-graphics-core-animation-and-touch-events-part-1/.</a></p>

<p>以下是scrollViewDidScroll方法的第一部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'><span class="n">var</span> <span class="n">avatarTransform</span> <span class="o">=</span> <span class="n">CATransform3DIdentity</span>
</span><span class='line'><span class="n">var</span> <span class="n">headerTransform</span> <span class="o">=</span> <span class="n">CATransform3DIdentity</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以在这个方法里面获取当前的竖直偏移，并且初始化两个将要在方法后面设置的转换信息。</p>

<h2>下拉</h2>

<p>让我们对下拉动作进行处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">offset</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span> <span class="nl">headerScaleFactor</span><span class="p">:</span><span class="n">CGFloat</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">offset</span><span class="p">)</span> <span class="o">/</span> <span class="n">header</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">headerSizevariation</span> <span class="o">=</span> <span class="p">((</span><span class="n">header</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">headerScaleFactor</span><span class="p">))</span> <span class="o">-</span> <span class="n">header</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">height</span><span class="p">)</span><span class="o">/</span><span class="mf">2.0</span>
</span><span class='line'>    <span class="n">headerTransform</span> <span class="o">=</span> <span class="n">CATransform3DTranslate</span><span class="p">(</span><span class="n">headerTransform</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">headerSizevariation</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">headerTransform</span> <span class="o">=</span> <span class="n">CATransform3DScale</span><span class="p">(</span><span class="n">headerTransform</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">+</span> <span class="n">headerScaleFactor</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">+</span> <span class="n">headerScaleFactor</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">header</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">headerTransform</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，我们检查偏移量是否为负数，即ScrollView是否已出现弹性区域。<br></p>

<p>剩下的代码是一些简单的数学运算。<br></p>

<p>这个Header控件需要放大来保持它的上边缘和屏幕顶部相对固定，并且这个图片是从底部开始放大的。<br></p>

<p>总的来说，这个变换主要由缩放，然后转化view的尺寸变化为到顶部的距离构成。事实上，你可以朝屏幕顶端移动ImageView图层的中点并且进行缩放来相同的效果。<br></p>

<p><img src="http://triplecc.github.io/images/Snip20150908_3.png" alt="" /></p>

<p>使用一个属性来对头部缩放比例进行计算。我们希望Header控件参照偏移量进行适当的缩放。换种说法：当偏移量为Header视图控件的两倍时，头部缩放比例应该设置为2.0。<br></p>

<p>我们需要处理的第二个动作是上下滚动。让我们看看如何一步一步地完成主要视图的变换。<br></p>

<h2>Header（第一阶段）</h2>

<p>当前的偏移量应该大于0。Header控件应该根据以下的偏移量来进行竖直移动，直到它到达指定高度（我们下面将会对Header模糊进行讲解）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">headerTransform</span> <span class="o">=</span> <span class="n">CATransform3DTranslate</span><span class="p">(</span><span class="n">headerTransform</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">max</span><span class="p">(</span><span class="o">-</span><span class="n">offset_HeaderStop</span><span class="p">,</span> <span class="o">-</span><span class="n">offset</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码真的是很简单。我们只需要设置Header控件偏移一个最小值，Header控件将会在offset_HeaderStop这个点停止移动。<br></p>

<p>因为我比较懒，所以我写死了一些数值，比如offset_HeaderStop。我们可以通过更加优雅的方式，比如计算UI控件的位置来实现相同的效果。或许在下一次我会试试。<br></p>

<h2>AVATAR（头像）</h2>

<p>这个头像（图片）以和下拉相同的逻辑进行缩放，只是在这种情况下，图片是和底部贴合而不是顶部。这段代码和上面比较相似，除了减小缩放的比例为1.4。<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">avatarScaleFactor</span> <span class="o">=</span> <span class="p">(</span><span class="n">min</span><span class="p">(</span><span class="n">offset_HeaderStop</span><span class="p">,</span> <span class="n">offset</span><span class="p">))</span> <span class="o">/</span> <span class="n">avatarImage</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mf">1.4</span> <span class="c1">// Slow down the animation</span>
</span><span class='line'><span class="n">let</span> <span class="n">avatarSizeVariation</span> <span class="o">=</span> <span class="p">((</span><span class="n">avatarImage</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">avatarScaleFactor</span><span class="p">))</span> <span class="o">-</span> <span class="n">avatarImage</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="o">/</span> <span class="mf">2.0</span>
</span><span class='line'><span class="n">avatarTransform</span> <span class="o">=</span> <span class="n">CATransform3DTranslate</span><span class="p">(</span><span class="n">avatarTransform</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">avatarSizeVariation</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">avatarTransform</span> <span class="o">=</span> <span class="n">CATransform3DScale</span><span class="p">(</span><span class="n">avatarTransform</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="n">avatarScaleFactor</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="n">avatarScaleFactor</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>就像你看到的，当Header控件停止变化时，我们通过min函数来停止对个人头像的缩放（offset_HeaderStop）。<br></p>

<p>此时，我们根据当前的偏移量来设置最顶层的图层。除非偏移量大于等于offset_HeaderStop，否则顶部图层始终是个人头像。当偏移量大于offset_HeaderStop，这个图层就变成了Header控件。<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">offset</span> <span class="o">&lt;=</span> <span class="n">offset_HeaderStop</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">avatarImage</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">zPosition</span> <span class="o">&lt;</span> <span class="n">header</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">zPosition</span><span class="p">{</span>
</span><span class='line'>        <span class="n">header</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">zPosition</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">avatarImage</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">zPosition</span> <span class="o">&gt;=</span> <span class="n">header</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">zPosition</span><span class="p">{</span>
</span><span class='line'>        <span class="n">header</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">zPosition</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>白色Label</h2>

<p>以下是白色Label执行动画的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">labelTransform</span> <span class="o">=</span> <span class="n">CATransform3DMakeTranslation</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">max</span><span class="p">(</span><span class="o">-</span><span class="n">distance_W_LabelHeader</span><span class="p">,</span> <span class="n">offset_B_LabelHeader</span> <span class="o">-</span> <span class="n">offset</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">headerLabel</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">labelTransform</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里介绍两个新的变量：当偏移量等于offset_B_LabelHeader时，这个黑色的用户名Label刚好到达Header视图的底部。<br></p>

<p><img src="http://triplecc.github.io/images/Snip20150908_4.png" alt="" /><br></p>

<p>distance_W_LabelHeader是Header控件的底部和Header中的白色Label中点的距离。<br>
<img src="http://triplecc.github.io/images/Snip20150908_5.png" alt="" /><br></p>

<p>这个转换通过以下逻辑进行计算：黑色Label一旦喝Header控件相交，白色Label就立即显示，并且白色Label到达Header控件的中点时停止。所以使用以下代码来创建Y的偏移：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">max</span><span class="p">(</span><span class="o">-</span><span class="n">distance_W_LabelHeader</span><span class="p">,</span> <span class="n">offset_B_LabelHeader</span> <span class="o">-</span> <span class="n">offset</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>模糊</h2>

<p>最后一个效果是模糊Header控件。为了得到合适的解决方案，我使用了三个不同的库&hellip;我还尝试创建自己的OpenGL ES，但是实时更新模糊效果总是非常迟缓。<br></p>

<p>我了解到我可以只对模糊进行一次计算，让模糊和非模糊的图片进行重叠，并且改变透明度值。我很确定，这就是Twitter采用的方法。<br></p>

<p>在viewDidAppear中我们计算模糊的Header并且通过设置透明度为0来进行隐藏。<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">headerBlurImageView</span> <span class="o">=</span> <span class="bp">UIImageView</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="n">header</span><span class="p">.</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'><span class="n">headerBlurImageView</span><span class="o">?</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="s">&quot;header_bg&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">blurredImageWithRadius</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nl">iterations</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="nl">tintColor</span><span class="p">:</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">clearColor</span><span class="p">())</span>
</span><span class='line'><span class="n">headerBlurImageView</span><span class="o">?</span><span class="p">.</span><span class="n">contentMode</span> <span class="o">=</span> <span class="n">UIViewContentMode</span><span class="p">.</span><span class="n">ScaleAspectFill</span>
</span><span class='line'><span class="n">headerBlurImageView</span><span class="o">?</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="n">header</span><span class="p">.</span><span class="n">insertSubview</span><span class="p">(</span><span class="n">headerBlurImageView</span><span class="p">,</span> <span class="nl">belowSubview</span><span class="p">:</span> <span class="n">headerLabel</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>模糊的view可以使用<a href="https://github.com/nicklockwood/FXBlurView">FXBlurView</a>得到。<br></p>

<p>在scrollViewDidScroll方法中，我们只需要根据偏移量来更新透明度就行了。<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">headerBlurImageView</span><span class="o">?</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="n">min</span> <span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="p">(</span><span class="n">offset</span> <span class="o">-</span> <span class="n">offset_B_LabelHeader</span><span class="p">)</span><span class="o">/</span><span class="n">distance_W_LabelHeader</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上计算逻辑主要为：透明度最大值必须为1，模糊效果必须在黑色Label到达Header控件时出现，在白色Label停止后停止加深模糊。<br></p>

<p><a href="https://github.com/ariok/TB_TwitterUI">源码地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识碎片一]]></title>
    <link href="http://triplecc.github.io/blog/2015-09-06-ioszhi-shi-sui-pian-yi/"/>
    <updated>2015-09-06T00:04:36+08:00</updated>
    <id>http://triplecc.github.io/blog/ioszhi-shi-sui-pian-yi</id>
    <content type="html"><![CDATA[<p>学习工作中总会有那么几个注意点和困惑点，这些琐碎的知识点容易让我迷惑，所以决定做这么一个纪录，希望能持之以恒，积少成多</p>

<ol>
<li>解决同时设置阴影和裁剪，阴影消失问题</li>
<li>swift中使用字符串创建类及错误处理</li>
<li>swift中回调函数设置作用域注意</li>
<li>可视化界面调整图片拉伸</li>
<li>AFNetworking出现SSL错误</li>
</ol>


<!--more-->


<h1>解决同时设置阴影和裁剪，阴影消失问题</h1>

<h3>阴影注意点</h3>

<ul>
<li>图层的阴影是根据<code>内容外形</code>确定，不是根据边界和角半径确定</li>
<li>阴影通常在layer的边界之外</li>
</ul>


<h3>裁剪注意点</h3>

<ul>
<li>所有从图层中突出的内容都会被裁剪掉</li>
</ul>


<h3>引出问题</h3>

<ul>
<li>同时设置视图masksToBounds和图层的阴影，图层的阴影效果可能会失效。<br></li>
<li>原因是：图层阴影被裁剪掉了。</li>
</ul>


<h3>解决方案</h3>

<p>使用一个只画阴影的空视图，成为需要裁剪视图的父控件</p>

<p>原理：</p>

<ul>
<li>内部子控件进行裁剪后，外部父视图的内容就只有被裁剪的子控件，所以会在子控件周围绘制阴影，而子控件只对它以及它的子控件进行了裁剪</li>
</ul>


<h1>在Swift中使用字符串创建类</h1>

<p>在swift中有了命名空间这个概念（namespace），使用.self打印类名，会发现对应的类名带有namespace前缀如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">SwiftWB</span><span class="p">.</span><span class="nl">HomeViewController</span><span class="p">:</span> <span class="mh">0x7fbf81f4e5e0</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift还在不断改进，所以这里只针对Xcode7 Beta5（在beta4写出来貌似在这个测试版本上会出错）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">path</span> <span class="o">=</span> <span class="bp">NSBundle</span><span class="p">.</span><span class="n">mainBundle</span><span class="p">().</span><span class="n">pathForResource</span><span class="p">(</span><span class="s">&quot;MainVCSettings&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">jsonPath</span> <span class="o">=</span> <span class="n">path</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">data</span> <span class="o">=</span> <span class="bp">NSData</span><span class="p">(</span><span class="nl">contentsOfFile</span><span class="p">:</span> <span class="n">jsonPath</span><span class="p">)</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">dataArr</span> <span class="o">=</span> <span class="n">try</span> <span class="bp">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">data</span><span class="o">!</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">NSJSONReadingOptions</span><span class="p">.</span><span class="n">MutableContainers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 命名空间名</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">prefixStr</span> <span class="o">=</span> <span class="bp">NSBundle</span><span class="p">.</span><span class="n">mainBundle</span><span class="p">().</span><span class="n">infoDictionary</span><span class="o">!</span><span class="p">[</span><span class="s">&quot;CFBundleExecutable&quot;</span><span class="p">]</span> <span class="n">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">object</span> <span class="k">in</span> <span class="n">dataArr</span> <span class="n">as</span><span class="o">!</span> <span class="p">[[</span><span class="nl">String</span> <span class="p">:</span> <span class="n">String</span><span class="p">]]</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">let</span> <span class="nl">cls</span><span class="p">:</span> <span class="n">AnyClass</span><span class="o">?</span> <span class="o">=</span> <span class="n">NSClassFromString</span><span class="p">(</span><span class="n">prefixStr</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">object</span><span class="p">[</span><span class="s">&quot;vcName&quot;</span><span class="p">]</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 读取的名称不一定有对应的控制器，所以在这里做一个动态绑定</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">let</span> <span class="n">vcCls</span> <span class="o">=</span> <span class="n">cls</span> <span class="n">as</span><span class="o">?</span> <span class="bp">UIViewController</span><span class="p">.</span><span class="n">Type</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">vc</span> <span class="o">=</span> <span class="n">vcCls</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>                <span class="n">addChildViewController</span><span class="p">(</span><span class="n">vc</span><span class="p">,</span> <span class="nl">title</span><span class="p">:</span> <span class="n">object</span><span class="p">[</span><span class="s">&quot;title&quot;</span><span class="p">]</span><span class="o">!</span><span class="p">,</span> <span class="nl">imageName</span><span class="p">:</span> <span class="n">object</span><span class="p">[</span><span class="s">&quot;imageName&quot;</span><span class="p">]</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">addChildViewController</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码从MainVCSettings文件读取控制器的关联信息，并创建对应的控制器，详细信息已在注释中表明</p>

<p>从上面代码还可以看出，swift对于错误的处理有了一定的变化。在Objective-C中，对应的JSON解析是通过参数传出错误的方式来进行处理的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSJSONSerialization</span> <span class="nl">dataWithJSONObject</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span> <span class="nl">options</span><span class="p">:(</span><span class="n">NSJSONWritingOptions</span><span class="p">)</span> <span class="nl">error</span><span class="p">:(</span><span class="bp">NSError</span> <span class="o">*</span><span class="k">__autoreleasing</span> <span class="o">*</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而swift中采用了抛出异常的方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="n">func</span> <span class="n">JSONObjectWithData</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="bp">NSData</span><span class="p">,</span> <span class="n">options</span> <span class="nl">opt</span><span class="p">:</span> <span class="n">NSJSONReadingOptions</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">AnyObject</span>
</span></code></pre></td></tr></table></div></figure>


<p>模式的写法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="c1">// 注意需要使用try</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">dataArr</span> <span class="o">=</span> <span class="n">try</span> <span class="bp">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">data</span><span class="o">!</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">NSJSONReadingOptions</span><span class="p">.</span><span class="n">MutableContainers</span><span class="p">)</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 错误处理</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>swift中回调函数设置作用域注意</h1>

<p>在swift中，存在private修饰符，表示私有变量或者私有方法。一般只在本类中使用的，不暴露给外界的方法都会加上这个修饰符。<br>
但是在添加按钮点击回调函数时，却不能这么做。如果给按钮的回调函方法添加了private修饰符，程序会抛出找不到实例方法错误。<br>
原因如下：<br>
首先，在回调方法中添加一个断点：<br></p>

<p><img src="http://triplecc.github.io/images/Snip20150908_2.png" alt="" /></p>

<p>然后运行程序，会崩溃后会出现以下函数调用栈：<br>
<img src="http://triplecc.github.io/images/Snip20150908_1.png" alt="" /></p>

<p>可以看到，按钮的点击事件是通过<code>运行循环</code>进行监听，并且以Source0的形式让RunLoop执行处理(<a href="http://triplecc.github.io/blog/2015-09-04-runloopji-chu-yuan-su-jie-xi/">RunLoop基础元素解析</a>)。然后以<code>消息机制</code>传递，对方法进行调用，所以按钮的回调方法不能设置为private，否则外界会找不到对应的方法。</p>

<h1>可视化界面调整图片拉伸</h1>

<p>发现最近个版本的Xcode在调整图片拉伸情况时，还可以使用一种可视化界面调整。</p>

<p>详细步骤如下：<br></p>

<p>一般打开的图片显示如下:<br>
<img src="http://triplecc.github.io/images/Snip20150909_2.png" alt="" /><br></p>

<p>更改显示方式<br>
<img src="http://triplecc.github.io/images/Snip20150909_4.png" alt="" /></p>

<p>可视化调整拉伸方式<br>
<img src="http://triplecc.github.io/images/Snip20150909_5.png" alt="" /></p>

<p>开始拉伸<br>
<img src="http://triplecc.github.io/images/Snip20150909_6.png" alt="" /></p>

<p>调整对应的线来对局部进行拉伸
<img src="http://triplecc.github.io/images/Snip20150909_7.png" alt="" /></p>

<h1>AFNetworking出现SSL错误</h1>

<p>获取优酷视频信息数据时出现问题。</p>

<p>加载HTTPS网络数据时出现以下错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSURLSession</span><span class="o">/</span><span class="bp">NSURLConnection</span> <span class="n">HTTP</span> <span class="n">load</span> <span class="n">failed</span> <span class="p">(</span><span class="n">kCFStreamErrorDomainSSL</span><span class="p">,</span> <span class="o">-</span><span class="mi">9824</span><span class="p">)</span>
</span><span class='line'><span class="n">Error</span> <span class="n">Domain</span><span class="o">=</span><span class="n">NSURLErrorDomain</span> <span class="n">Code</span><span class="o">=-</span><span class="mi">1200</span> <span class="s">&quot;An SSL error has occurred and a secure connection to the server cannot be made.&quot;</span> <span class="n">UserInfo</span><span class="o">=</span><span class="p">{</span><span class="n">_kCFStreamErrorCodeKey</span><span class="o">=-</span><span class="mi">9824</span><span class="p">,</span> <span class="n">NSLocalizedRecoverySuggestion</span><span class="o">=</span><span class="n">Would</span> <span class="n">you</span> <span class="n">like</span> <span class="n">to</span> <span class="n">connect</span> <span class="n">to</span> <span class="n">the</span> <span class="n">server</span> <span class="n">anyway</span><span class="o">?</span><span class="p">,</span> <span class="n">NSUnderlyingError</span><span class="o">=</span><span class="mh">0x7fbdf1e2e870</span> <span class="p">{</span><span class="n">Error</span> <span class="n">Domain</span><span class="o">=</span><span class="n">kCFErrorDomainCFNetwork</span> <span class="n">Code</span><span class="o">=-</span><span class="mi">1200</span> <span class="s">&quot;(null)&quot;</span> <span class="n">UserInfo</span><span class="o">=</span><span class="p">{</span><span class="n">_kCFStreamPropertySSLClientCertificateState</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">_kCFNetworkCFStreamSSLErrorOriginalValue</span><span class="o">=-</span><span class="mi">9824</span><span class="p">,</span> <span class="n">_kCFStreamErrorDomainKey</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">_kCFStreamErrorCodeKey</span><span class="o">=-</span><span class="mi">9824</span><span class="p">}},</span> <span class="n">NSLocalizedDescription</span><span class="o">=</span><span class="n">An</span> <span class="n">SSL</span> <span class="n">error</span> <span class="n">has</span> <span class="n">occurred</span> <span class="n">and</span> <span class="n">a</span> <span class="n">secure</span> <span class="n">connection</span> <span class="n">to</span> <span class="n">the</span> <span class="n">server</span> <span class="n">cannot</span> <span class="n">be</span> <span class="n">made</span><span class="p">.,</span> <span class="n">NSErrorFailingURLKey</span><span class="o">=</span><span class="nl">https</span><span class="p">:</span><span class="c1">//openapi.youku.com/v2/videos/by_category.json?client_id=693bf79be3aee68f, NSErrorFailingURLStringKey=https://openapi.youku.com/v2/videos/by_category.json?client_id=693bf79be3aee68f, _kCFStreamErrorDomainKey=3}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在info.plist中添加以下字段就可以解决：</p>

<p><img src="http://triplecc.github.io/images/Snip20150915_1.png" alt="" /></p>

<p>最新的版本：</p>

<p><img src="http://triplecc.github.io/images/Snip20151101-1.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RunLoop基础元素解析]]></title>
    <link href="http://triplecc.github.io/blog/2015-09-04-runloopji-chu-yuan-su-jie-xi/"/>
    <updated>2015-09-04T21:58:21+08:00</updated>
    <id>http://triplecc.github.io/blog/runloopji-chu-yuan-su-jie-xi</id>
    <content type="html"><![CDATA[<p><a href="http://blog.ibireme.com">深入理解RunLoop</a>这篇文章写的很好！</p>

<h2>简介</h2>

<p>RunLoop顾名思义，就是<code>运行循环</code>的意思。<br>
基本作用：</p>

<ul>
<li>保持程序的持续运行</li>
<li>处理App中的各类事件（触摸事件、定时器事件、Selector事件）</li>
<li>节省CPU资源，提高程序性能：没有事件时就进行睡眠状态</li>
</ul>


<p>内部实现：</p>

<ul>
<li>do-while循环，在这个循环内部不断地处理各种任务（Source\Timeer\Observer）</li>
</ul>


<!--more-->


<p>注意点：</p>

<ul>
<li>一个线程对应一个RunLoop（采用字典存储，<code>线程号为key，RunLoop为value</code>）</li>
<li>主线程的RunLoop默认已经启动，子线程的RunLoop需要手动启动</li>
<li><p>RunLoop只能选择一个Mode启动，如果当前Mode没有任何Source、Timer、Observer，那么就不会进入RunLoop</p>

<ul>
<li>RunLoop的主要函数调用顺序为：<code>CFRunLoopRun-&gt;CFRunLoopRunSpecific-&gt;__CFRunLoopRun</code>
<img src="http://triplecc.github.io/images/Snip20150713_2.png" alt="" /><br></li>
<li><code>注意特殊情况</code>，事实上，在<code>只有</code>Observer的情况，也不一定会进入循环，因为源代码里面只会显式地检测两个东西：<code>Source和Timer</code>(这两个是主动向RunLoop发送消息的)；Observer是被动接收消息的<br>
<img src="http://triplecc.github.io/images/Snip20150713_11.png" alt="" /></li>
</ul>
</li>
<li><p>RunLoop在<code>第一次获取时创建</code>，在<code>线程结束时销毁</code></p></li>
</ul>


<p>RunLoop循环示意图:(针对上面的<code>__CFRunLoopRun</code>函数，Mode已经判断非空前提)</p>

<ul>
<li>图1<br><img src="http://triplecc.github.io/images/Snip20150712_39.png" alt="RunLoop循环示意图" /><br></li>
<li>图2<br><img src="http://triplecc.github.io/images/Snip20150713_3.png" alt="" /><br></li>
</ul>


<p>接触过微处理器编程的基本上都知道，在编写微处理器程序时，我通常会在main函数中写一个无限循环，然后在这个循环里面对外部事件进行监听，比如外部中断，一些传感器的数据等，在没有外部中断时，就让CPU进入低功耗模式。如果接收到了外部中断，就恢复到正常模式，对中断进行处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 根据中断决定是否切换模式执行任务</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 或者</span>
</span><span class='line'><span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>RunLoop和这个相似，也是在线程的main中增加了一个循环：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">running</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 执行各种任务，处理各种事件</span>
</span><span class='line'>             <span class="c1">// ......</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">running</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以线程在这种情况下，便不会退出。<br>
关于<code>MainRunLoop</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="k">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在viewDidLoad中设置断电，然后得到以下主线程栈信息：<br>
<img src="http://triplecc.github.io/images/Snip20150712_40.png" alt="" /><br>
可以看到，UIApplicationMain内部启动了一个和主线程相关联的RunLoop（_CFRunLoopRun）。在这里也可以推断，程序进入UIApplicationMain就不会退出了。我稍微对主函数进行了如下修改，并在return语句上打印了断点：<br>
<img src="http://triplecc.github.io/images/Snip20150712_41.png" alt="" /><br>
运行程序后，并不会在断点处停下，证实了上面的推断。</p>

<p>上面涉及了一个_CFRunLoopRun函数，接下来说明下iOS中访问和使用RunLoop的API：</p>

<ul>
<li>Foundation&ndash;NSRunLoop</li>
<li>Core Foundation&ndash;CFRunLoopRef(开源)</li>
</ul>


<p>因为后者是开源的，且前者是在后者上针对OC的封装，所以一般是对CFRunLoopRef进行研究。<br>
两套API对应获取RunLoop对象的方式：</p>

<ul>
<li>Foundation

<ul>
<li>[NSRunLoop currentRunLoop]; // 当前runloop</li>
<li>[NSRunLoop mainRunLoop];// 主线程runloop</li>
</ul>
</li>
<li>Core Foundation

<ul>
<li>CFRunLoopGetCurrent();// 当前runloop</li>
<li>CFRunLoopGetMain();// 主线程runloop</li>
</ul>
</li>
</ul>


<p>值得注意的是，获取当前RunLoop都是进行懒加载的，也就是调用时自动创建线程对应的RunLoop。<br></p>

<h3>RunLoop相关类：</h3>

<ul>
<li>CFRunLoopRef</li>
<li>CFRunLoopModeRef</li>
<li>CFRunLoopSourceRef</li>
<li>CFRunLoopTimerRef</li>
<li>CFRunLoopObserverRef</li>
</ul>


<p><img src="http://triplecc.github.io/images/Snip20150712_43.png" alt="类之间关系" /><br>
以上图片说明了各个类之间的关系。<br>
<code>CFRunLoopModeRef</code>说明：</p>

<ul>
<li>代表RunLoop的运行模式，一个RunLoop可以包含多个Mode，每个Mode可以包含多个Source、Timer、Observer</li>
<li>每次RunLoop启动时，只能指定其中一个Mode，这个Mode就变成了CurrentMode</li>
<li>当启动RunLoop时，如果所在Mode中没有Source、Timer、Observer，那么将不会进入RunLoop，会直接结束</li>
<li>如果要切换Mode，只能退出Loop，再重新制定一个Mode进入</li>
</ul>


<p>系统默认注册了5个Mode:</p>

<ul>
<li><code>NSDefaultRunLoopMode</code>：App的默认Mode，通常主线程是在这个Mode下运行</li>
<li><code>UITrackingRunLoopMode</code>：界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响</li>
<li>UIInitializationRunLoopMode: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用</li>
<li>GSEventReceiveRunLoopMode: 接受系统事件的内部 Mode，通常用不到</li>
<li><code>NSRunLoopCommonModes</code>: 这是一个占位用的Mode，不是一种真正的Mode</li>
</ul>


<p>关于<code>NSRunLoopCommonModes</code>：</p>

<ul>
<li>一个Mode可以将自己标记为“Common”属性，每当 RunLoop 的内容发生变化时，RunLoop会对标记有“Common”属性的Mode进行相适应的切换，并同步Source/Observer/Timer</li>
<li>在主线程中，kCFRunLoopDefaultMode 和 UITrackingRunLoopMode这两个Mode都是被默认标记为“Common”属性的，从输出的主线程RunLoop可以查看。<br><img src="http://triplecc.github.io/images/Snip20150712_42.png" alt="“Common”属性" /><br>
－ 结合上面两点，当使用NSRunLoopCommonModes占位时，会表明使用标记为“Common”属性的Mode，在一定层度上，可以说是“拥有了两个Mode”，可以在这两个Mode中的其中任意一个进行工作</li>
</ul>


<p><code>CFRunLoopTimerRef</code>说明：</p>

<ul>
<li>CFRunLoopTimerRef是基于时间的触发器，它包含了一个时间长度和一个回调函数指针。当它加入到RunLoop时，RunLoop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调</li>
<li>CFRunLoopTimerRef大部分指的是NSTimer，它受RunLoop的Mode影响</li>
<li><p>由于NSTimer在RunLoop中处理，所以受其影响较大，有时可能会不准确。还有一种定时器是GCD定时器，它并不在RunLoop中，所以不受其影响，也就比较精确
接下来说明各种Mode下，NSTimer的工作情况：</p></li>
<li><p>情况1</p>

<ul>
<li>在对创建的定时器进行模式修改前，scheduledTimerWithTimeInterval创建的定时器只在NSDefaultRunLoopMode模式下可以正常运行，当滚动UIScroolView时，模式转换成UITrackingRunLoopMode，定时器就失效了。</li>
<li>修改成NSRunLoopCommonModes后，定时器在两个模式下都可以正常运行</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建的定时器默认添加到当前的RunLoop中（没有就创建），而且是NSDefaultRunLoopMode模式</span>
</span><span class='line'><span class="bp">NSTimer</span> <span class="o">*</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSTimer</span> <span class="nl">scheduledTimerWithTimeInterval</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">target</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">run</span><span class="p">)</span> <span class="nl">userInfo</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">repeats</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 可以通过以下方法对模型进行修改</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">addTimer</span><span class="p">:</span><span class="n">timer</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSRunLoopCommonModes</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>情况2

<ul>
<li>timerWithTimeInterval创建的定时器并没有手动添加进RunLoop，所以需要手动进行添加。当添加为以下模式时，定时器只在UITrackingRunLoopMode模式下进行工作，也就是滑动UIScrollView时就会工作，停止滑动时就不工作</li>
<li>如果把UITrackingRunLoopMode换成NSDefaultRunLoopMode，那么效果就和情况1没修改Mode前的效果一样</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSTimer</span> <span class="o">*</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSTimer</span> <span class="nl">timerWithTimeInterval</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">target</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">run</span><span class="p">)</span> <span class="nl">userInfo</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">repeats</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在UITrackingRunLoopMode模式下定时器才会运行</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">addTimer</span><span class="p">:</span><span class="n">timer</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">UITrackingRunLoopMode</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>CFRunLoopSourceRef</code>说明：</p>

<ul>
<li>Source分类

<ul>
<li>按官方文档

<ul>
<li>Port-Based Sources</li>
<li>Custom Input Sources</li>
<li>Cocoa Perform Selector Sources</li>
</ul>
</li>
<li>按照函数调用栈

<ul>
<li>Source0：非基于Port的

<ul>
<li>Source0本身不能主动触发事件，只包含了一个回调函数指针</li>
</ul>
</li>
<li>Source1：基于Port的，通过内核和其他线程通信，接收、分发系统事件

<ul>
<li>包含了mach_port和一个回调函数指针，接收到相关消息后，会分发给Source0进行处理</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><code>CFRunLoopObserverRef</code>说明：
- CFRunLoopObserverRef是观察者，能够监听RunLoop的状态改变
- 能够监听的状态</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">CF_OPTIONS</span><span class="p">(</span><span class="n">CFOptionFlags</span><span class="p">,</span> <span class="n">CFRunLoopActivity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">kCFRunLoopEntry</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">),</span>        <span class="c1">// 进入RunLoop</span>
</span><span class='line'>        <span class="n">kCFRunLoopBeforeTimers</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">),</span> <span class="c1">//即将处理timer</span>
</span><span class='line'>        <span class="n">kCFRunLoopBeforeSources</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">),</span><span class="c1">//即将处理Sources</span>
</span><span class='line'>        <span class="n">kCFRunLoopBeforeWaiting</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">),</span><span class="c1">//即将进入休眠</span>
</span><span class='line'>        <span class="n">kCFRunLoopAfterWaiting</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">),</span> <span class="c1">//即将唤醒</span>
</span><span class='line'>        <span class="n">kCFRunLoopExit</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span><span class="p">),</span>         <span class="c1">//即将退出RunLoop</span>
</span><span class='line'>        <span class="n">kCFRunLoopAllActivities</span> <span class="o">=</span> <span class="mh">0x0FFFFFFFU</span><span class="c1">//所有活动</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加监听者步骤</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建监听着</span>
</span><span class='line'><span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span> <span class="o">=</span> <span class="n">CFRunLoopObserverCreateWithHandler</span><span class="p">(</span><span class="n">CFAllocatorGetDefault</span><span class="p">(),</span> <span class="n">kCFRunLoopBeforeTimers</span><span class="p">,</span> <span class="nb">YES</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span><span class="p">,</span> <span class="n">CFRunLoopActivity</span> <span class="n">activity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span> <span class="n">activity</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//    [[NSRunLoop currentRunLoop] getCFRunLoop]</span>
</span><span class='line'><span class="c1">// 向当前runloop添加监听者</span>
</span><span class='line'><span class="n">CFRunLoopAddObserver</span><span class="p">(</span><span class="n">CFRunLoopGetCurrent</span><span class="p">(),</span> <span class="n">observer</span><span class="p">,</span> <span class="n">kCFRunLoopDefaultMode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 释放内存</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">observer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>CF的内存管理（Core Foundation）：</p>

<ul>
<li>1.凡是带有Create、Copy、Retain等字眼的函数，创建出来的对象，都需要在最后做一次release</li>
<li>比如CFRunLoopObserverCreate</li>
<li>2.release函数：CFRelease(对象);</li>
</ul>


<h3>自动释放池释放的时间和RunLoop的关系：</h3>

<ul>
<li>注意，这里的自动释放池指的是<code>主线程的自动释放池</code>，我们看不见它的创建和销毁。自己<code>手动创建@autoreleasepool {}</code>是<code>根据代码块来的</code>，<code>出了这个代码块就释放了</code>。</li>
<li> App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 <code>_wrapRunLoopWithAutoreleasePoolHandler()</code>。</li>
<li>第一个 Observer 监视的事件是 Entry(<code>即将进入Loop</code>)，其回调内会调用 _objc_autoreleasePoolPush() <code>创建自动释放池</code>。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。
<br><img src="http://triplecc.github.io/images/Snip20150713_5.png" alt="" /></li>
<li>第二个 Observer 监视了两个事件： BeforeWaiting(<code>准备进入休眠</code>) 时调用<em>objc_autoreleasePoolPop() 和 </em>objc_autoreleasePoolPush() <code>释放旧的池并创建新池</code>；Exit(<code>即将退出Loop</code>) 时调用 _objc_autoreleasePoolPop() 来<code>释放自动释放池</code>。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。
<br><img src="http://triplecc.github.io/images/Snip20150713_4.png" alt="" /></li>
<li>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</li>
<li>在<code>自己创建线程</code>时，需要<code>手动创建</code>自动释放池<code>AutoreleasePool</code></li>
</ul>


<p>综合上面，可以得到以下结论：<br>
<img src="http://triplecc.github.io/images/Snip20150713_12.png" alt="" /></p>

<h3>@autoreleasepool {}内部实现</h3>

<p>有以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看编译转换后的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* @autoreleasepool */</span> <span class="p">{</span> <span class="n">__AtAutoreleasePool</span> <span class="n">__autoreleasepool</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>__AtAutoreleasePool是什么呢？找到其定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__AtAutoreleasePool</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__AtAutoreleasePool</span><span class="p">()</span> <span class="p">{</span><span class="n">atautoreleasepoolobj</span> <span class="o">=</span> <span class="n">objc_autoreleasePoolPush</span><span class="p">();}</span>
</span><span class='line'>  <span class="o">~</span><span class="n">__AtAutoreleasePool</span><span class="p">()</span> <span class="p">{</span><span class="n">objc_autoreleasePoolPop</span><span class="p">(</span><span class="n">atautoreleasepoolobj</span><span class="p">);}</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span> <span class="n">atautoreleasepoolobj</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到__AtAutoreleasePool是一个类：
  - 其构造函数使用objc_autoreleasePoolPush创建了一个线程池，并保存给成员变量atautoreleasepoolobj。
  - 其析构函数使用objc_autoreleasePoolPop销毁了线程池</p>

<p>结合以上信息，main函数里面的__autoreleasepool是一个局部变量。当其创建时，会调用构造函数创建线程池，出了{}代码块时，局部变量被销毁，调用其析构函数销毁线程池。</p>

<h2>RunLoop实际应用</h2>

<h3>常驻线程</h3>

<p>当创建一个线程，并且希望它一直存在时，就需要使用到RunLoop，否则线程一执行完任务就会停止。
要向线程存在，需要有强指针引用他，其他的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 属性</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSThread</span> <span class="o">*</span><span class="kr">thread</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 创建线程</span>
</span><span class='line'><span class="n">_thread</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSThread</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">_thread</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesBegan:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 点击时使线程_thread执行test方法</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:</span><span class="n">_thread</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;__test__&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就单单以上代码，是不起效果的，因为线程没有RunLoop，执行完test后就停止了，无法再让其执行任务（强制start会崩溃）。<br>
通过在<code>子线程中给RunLoop添加监听者</code>，可以了解下<code>performSelector:onThread:</code>内部做的事情：</p>

<ul>
<li>调用performSelector:onThread: 时，实际上它会创建一个<code>Source0</code>加到<code>对应线程的RunLoop</code>里去，所以，如果对应的线程没有RunLoop，这个方法就会失效<br>
<img src="http://triplecc.github.io/images/Snip20150716_5.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 这句在主线程中调用</span>
</span><span class='line'><span class="c1">// _thread就是下面的线程</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">run</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:</span><span class="n">_thread</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>performSelecter:afterDelay:也是一样的内部操作方法，只是创建的<code>Timer</code>添加到<code>当前线程</code>的RunLoop中了<br>
<img src="http://triplecc.github.io/images/Snip20150716_6.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建RunLoop即将唤醒监听者</span>
</span><span class='line'><span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span> <span class="o">=</span> <span class="n">CFRunLoopObserverCreateWithHandler</span><span class="p">(</span><span class="n">CFAllocatorGetDefault</span><span class="p">(),</span> <span class="n">kCFRunLoopBeforeTimers</span><span class="p">,</span> <span class="nb">YES</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="n">CFRunLoopObserverRef</span> <span class="n">observer</span><span class="p">,</span> <span class="n">CFRunLoopActivity</span> <span class="n">activity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 打印唤醒前的RunLoop</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld--%@&quot;</span><span class="p">,</span> <span class="n">activity</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 向当前runloop添加监听者</span>
</span><span class='line'><span class="n">CFRunLoopAddObserver</span><span class="p">(</span><span class="n">CFRunLoopGetCurrent</span><span class="p">(),</span> <span class="n">observer</span><span class="p">,</span> <span class="n">kCFRunLoopDefaultMode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 释放内存</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">observer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setView</span><span class="p">:)</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">afterDelay</span><span class="p">:</span><span class="mf">2.0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 使model不为空</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">addPort</span><span class="p">:[</span><span class="bp">NSPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>综合上面的解释，可以知道performSelector:onThread:没有起作用，是因为_thread线程内部没有RunLoop，所以需要在线程内部创建RunLoop。<br>
创建RunLoop并使对应线程成为常驻线程的常见方式有2:</p>

<ul>
<li>方式1

<ul>
<li><p>向创建的RunLoop添加NSPort（Sources），让Mode不为空，RunLoop能进入循环不会退出</p>

<pre><code class="objc">[[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];
[[NSRunLoop currentRunLoop] run];
</code></pre></li>
</ul>
</li>
<li>方式2

<ul>
<li><p>让RunLoop一直尝试运行，判断Mode是否为空，不是为空就进入RunLoop循环</p>

<pre><code class="objc">while (1) {
    [[NSRunLoop currentRunLoop] run];
}
</code></pre></li>
</ul>
</li>
</ul>


<p><code>AFNetWorking</code>就使用到了常驻线程：</p>

<ul>
<li>创建常驻线程</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">networkRequestThreadEntryPoint:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">__unused</span> <span class="n">object</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="bp">NSThread</span> <span class="n">currentThread</span><span class="p">]</span> <span class="nl">setName</span><span class="p">:</span><span class="s">@&quot;AFNetworking&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 创建RunLoop并向Mode添加NSMachPort，使RunLoop不会退出</span>
</span><span class='line'>        <span class="bp">NSRunLoop</span> <span class="o">*</span><span class="n">runLoop</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">runLoop</span> <span class="nl">addPort</span><span class="p">:[</span><span class="bp">NSMachPort</span> <span class="n">port</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">runLoop</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="bp">NSThread</span> <span class="o">*</span><span class="p">)</span><span class="n">networkRequestThread</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="bp">NSThread</span> <span class="o">*</span><span class="n">_networkRequestThread</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">oncePredicate</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">oncePredicate</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">_networkRequestThread</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSThread</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">networkRequestThreadEntryPoint</span><span class="p">:)</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_networkRequestThread</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_networkRequestThread</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用常驻线程</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">start</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">lock</span> <span class="n">lock</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="n">isCancelled</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">cancelConnection</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:[[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]</span> <span class="n">networkRequestThread</span><span class="p">]</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">modes</span><span class="p">:[</span><span class="nb">self</span><span class="p">.</span><span class="n">runLoopModes</span> <span class="n">allObjects</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="n">isReady</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">AFOperationExecutingState</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">operationDidStart</span><span class="p">)</span> <span class="nl">onThread</span><span class="p">:[[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]</span> <span class="n">networkRequestThread</span><span class="p">]</span> <span class="nl">withObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">waitUntilDone</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">modes</span><span class="p">:[</span><span class="nb">self</span><span class="p">.</span><span class="n">runLoopModes</span> <span class="n">allObjects</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">lock</span> <span class="n">unlock</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>给子线程开启定时器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">_thread</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSThread</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="nl">object</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">_thread</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 子线程添加定时器</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">subTimer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 默认创建RunLoop并向其model添加timer，所以后续只需要让RunLoop run起来即可</span>
</span><span class='line'>    <span class="p">[</span><span class="bp">NSTimer</span> <span class="nl">scheduledTimerWithTimeInterval</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">target</span><span class="p">:</span><span class="nb">self</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">run</span><span class="p">)</span> <span class="nl">userInfo</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">repeats</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 貌似source1不为空，source0就不为空</span>
</span><span class='line'><span class="c1">//    [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];</span>
</span><span class='line'>    <span class="p">[[</span><span class="bp">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>让某些事件（行为、任务）在特定模式下执行</h3>

<p>比如图片的设置，在UIScrollView滚动的情况下，我不希望设置图片，等停止滚动了再设置图片，可以用以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 图片只在NSDefaultRunLoopMode模式下会进行设置显示</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageView</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setImage</span><span class="p">:)</span> <span class="nl">withObject</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;Snip20150712_39&quot;</span><span class="p">]</span> <span class="nl">afterDelay</span><span class="p">:</span><span class="mf">2.0</span> <span class="nl">inModes</span><span class="p">:</span><span class="l">@[</span><span class="n">NSDefaultRunLoopMode</span><span class="l">]</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>先设置任务在NSDefaultRunLoopMode模式在执行，这样，在滚动使RunLoop进入UITrackingRunLoopMode时，就不会进行图片的设置了。</p>

<h3>控制定时器在特定模式下执行</h3>

<p>上文的《<code>CFRunLoopTimerRef</code>说明：》中已经指出</p>

<h3>添加Observer监听RunLoop的状态</h3>

<p>监听点击事件的处理（在所有点击事件之前做一些事情）<br>
具体步骤在《<code>CFRunLoopObserverRef</code>说明：》中已写明</p>

<h1>GCD定时器</h1>

<p>注意：</p>

<ul>
<li>dispatch_source_t是个类，这点比较特殊</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//    dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, dispatch_get_main_queue());</span>
</span><span class='line'>    <span class="kt">dispatch_source_t</span> <span class="n">timer</span> <span class="o">=</span> <span class="n">dispatch_source_create</span><span class="p">(</span><span class="n">DISPATCH_SOURCE_TYPE_TIMER</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>    <span class="n">dispatch_source_set_timer</span><span class="p">(</span><span class="n">timer</span><span class="p">,</span> <span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">,</span> <span class="mi">0</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_source_set_event_handler</span><span class="p">(</span><span class="n">timer</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;__&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSThread</span> <span class="n">currentThread</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">static</span> <span class="bp">NSInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">count</span><span class="o">++</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 为什么dispatch_cancel不能用_timer?/</span>
</span><span class='line'>            <span class="c1">// Controlling expression type &#39;__strong dispatch_source_t&#39; (aka &#39;NSObject&lt;OS_dispatch_source&gt; *__strong&#39;) not compatible with any generic association type</span>
</span><span class='line'>            <span class="c1">// 类型错误，可能dispatch_cancel是宏定义，需要的就是方法调用，而不是变量</span>
</span><span class='line'><span class="c1">//            dispatch_cancel(self.timer);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">dispatch_source_cancel</span><span class="p">(</span><span class="n">_timer</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="c1">// 定时器默认是停止的，需要手动恢复</span>
</span><span class='line'>    <span class="n">dispatch_resume</span><span class="p">(</span><span class="n">timer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 需要一个强引用保证timer不被释放</span>
</span><span class='line'>    <span class="n">_timer</span> <span class="o">=</span> <span class="n">timer</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后一点需要说明的是，SDWebImage框架的下载图片业务中也使用到了RunLoop，老确保图片下载成功后才关闭任务子线程</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView右侧滚动标签]]></title>
    <link href="http://triplecc.github.io/blog/2015-09-01-tableviewyou-ce-biao-qian-suo-yin-xu-qiu/"/>
    <updated>2015-09-01T20:30:39+08:00</updated>
    <id>http://triplecc.github.io/blog/tableviewyou-ce-biao-qian-suo-yin-xu-qiu</id>
    <content type="html"><![CDATA[<p>看到有些APP在tableView右侧增加了一个滚动标签，并且显示滑条所指向的cell的部分数据。这里写下自己的想法，实现还是简单的。</p>

<h4>效果图</h4>

<p><img src="http://triplecc.github.io/images/2015-08-29%2021_16_47.gif" alt="" /><br></p>

<!--more-->


<h4>需求</h4>

<p>需求点大意是在tableView的右侧实现一个类似标签索引的东西，标签索引显示对应cell的时间。</p>

<h4>解决方法</h4>

<p>想到的方法一：</p>

<ul>
<li>刚开始打算自己创建一个UILabel索引标签，然后监听tableView的contentOffset来实现索引标签的移动：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scrollViewDidScroll:</span><span class="p">(</span><span class="bp">UIScrollView</span> <span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 在这里根据scrollView.contentOffset.y来改变标签索引的坐标</span>
</span><span class='line'>  <span class="c1">// contentSize的高度，和屏幕高度是成固定比例的，所以可以计算出来</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>后来感觉这样太麻烦，于是就打算监听scrollview内部的导航view决定索引标签的移动。由于是scrollView的内部控件，所以就通过断点的方式获取控件的成员变量名:<br>
<img src="http://triplecc.github.io/images/Snip20150829_4.png" alt="" /></p>

<p>看出成员变量名如下：<br>
<img src="http://triplecc.github.io/images/Snip20150829_3.png" alt="" /></p>

<p>由此可以引出方法二和三。</p>

<p>方法二：</p>

<ul>
<li>还是采用创建UILabel，不过是加到控制器的view上，然后根据其中的_verticalScrollIndicator的左边，来进行相应的移动。</li>
</ul>


<p>由于此标签索引不需要交互，所以我采用了方法三。<br>
方法三：</p>

<ul>
<li>将创建的UILabel添加到<em>verticalScrollIndicator上，成为它的子控件。然后通过indexPathForRowAtPoint:获取对应的cell的行号。因为</em>verticalScrollIndicator本身是和tableView在同一个坐标系，所以也不需要做转换。</li>
</ul>


<p>主要代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="bp">UITableViewDataSource</span><span class="p">,</span> <span class="bp">UITableViewDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UITableView</span> <span class="o">*</span><span class="n">tableView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UILabel</span> <span class="o">*</span><span class="n">indicatorView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIView</span> <span class="o">*</span><span class="n">scrollIndicator</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">reuseIndentifier</span> <span class="o">=</span> <span class="s">@&quot;testCell&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">rowHeight</span> <span class="o">=</span> <span class="mi">150</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier</span><span class="p">:</span><span class="n">reuseIndentifier</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">cell</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cell</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITableViewCell</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithStyle</span><span class="p">:</span><span class="n">UITableViewCellStyleDefault</span> <span class="nl">reuseIdentifier</span><span class="p">:</span><span class="n">reuseIndentifier</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">backgroundColor</span>  <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithRed</span><span class="p">:</span><span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green</span><span class="p">:</span><span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue</span><span class="p">:</span><span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha</span><span class="p">:</span><span class="mf">0.5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;just a function test--%ld!&quot;</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scrollViewDidScroll:</span><span class="p">(</span><span class="bp">UIScrollView</span> <span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">UITableView</span> <span class="o">*</span><span class="n">tableView</span> <span class="o">=</span> <span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">scrollView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 在这里根据_verticalScrollIndicator的中点，来获取对应的cell行号，从而可以获取对应行的数据来进行显示</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">indicatorView</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">indexPathForRowAtPoint</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollIndicator</span><span class="p">.</span><span class="n">center</span><span class="p">].</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scrollViewWillBeginDragging:</span><span class="p">(</span><span class="bp">UIScrollView</span> <span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 这里注意要在点击时获取，如果在view加载完成时设置标签索引的中点，那么获取的_verticalScrollIndicator的frame是不对的</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">indicatorView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">scrollIndicator</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="s">@&quot;verticalScrollIndicator&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">UILabel</span> <span class="o">*</span><span class="n">indicatorView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="o">-</span><span class="mi">50</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">)];</span>
</span><span class='line'>        <span class="n">indicatorView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">orangeColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">CGPoint</span> <span class="n">center</span> <span class="o">=</span> <span class="n">indicatorView</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
</span><span class='line'>        <span class="n">center</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">scrollIndicator</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>        <span class="n">indicatorView</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">center</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">scrollIndicator</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">indicatorView</span><span class="p">];</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">indicatorView</span> <span class="o">=</span> <span class="n">indicatorView</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITextFiled文字抖动效果]]></title>
    <link href="http://triplecc.github.io/blog/2015-07-27-uitextfiledwen-zi-dou-dong-xiao-guo/"/>
    <updated>2015-07-27T20:17:49+08:00</updated>
    <id>http://triplecc.github.io/blog/uitextfiledwen-zi-dou-dong-xiao-guo</id>
    <content type="html"><![CDATA[<p>最终设置UITextField的placeholder效果：<br></p>

<p><img src="http://triplecc.github.io/images/2015-07-28%2016_46_41.gif" alt="" /><br></p>

<p>有需求1如下：</p>

<ul>
<li>未点击时UITextField的placeholder为浅灰色</li>
<li>点击后，还未进行输入时，UITextField的placeholder变为深灰色</li>
</ul>


<!--more-->


<p>这个实现并不难：</p>

<ul>
<li>通过通知或者重写UITextField的响应者处理方法，都可以实现捕获点击时间</li>
<li>UITextField设置placeholder可以使用以下属性：

<ul>
<li>通过设置这个富文本属性，可以得到丰富多彩的placeholder<br></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="bp">NSCopying</span> <span class="k">var</span> <span class="nl">attributedPlaceholder</span><span class="p">:</span> <span class="bp">NSAttributedString</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 附带光标颜色属性</span>
</span><span class='line'><span class="k">var</span> <span class="nl">tintColor</span><span class="p">:</span> <span class="bp">UIColor</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是需求2加了点东西：</p>

<ul>
<li>点击后，还未进行输入时，UITextField的placeholder文字左右进行小幅度抖动<br></li>
</ul>


<p>可以看到通过设置attributedPlaceholder，可以改变一些静态的属性，如颜色和文字大小。<br>
但是如果需要里面的文字做一些简单的抖动效果貌似就不行了，UITextField没有提供相关属性，我们也不知道placeholder是在何种控件中显示的。<br>
既然不知道laceholder是在何种控件中显示，那就通过以下代码打印出UITextField中所有的成员变量（函数参考<a href="http://triplecc.github.io/blog/2015-01-10-runtimeji-chu/">runtime基础元素解析</a>），看看是否会有什么发现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">Ivar</span> <span class="o">*</span><span class="n">ivars</span> <span class="o">=</span> <span class="n">class_copyIvarList</span><span class="p">([</span><span class="bp">UITextField</span> <span class="k">class</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">outCount</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">outCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Ivar</span> <span class="n">ivar</span> <span class="o">=</span> <span class="n">ivars</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%s&quot;</span><span class="p">,</span> <span class="n">ivar_getName</span><span class="p">(</span><span class="n">ivar</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">free</span><span class="p">(</span><span class="n">ivars</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>截取关键部分如下：<br></p>

<p><img src="http://triplecc.github.io/images/Snip20150728_2.png" alt="" /><br></p>

<p>从字面上看，上面的<code>_placeholderLabel</code>是否就是显示placeholder的控件？<br>
测试实际结果的确是显示placeholder的控件。<br>
只要有了这个控件，那要做一些小抖动的动画那就没什么问题了，先获取这个UILabel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">private</span> <span class="k">var</span> <span class="nl">tpcPlaceholderLabel</span><span class="p">:</span><span class="bp">UILabel</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">valueForKey</span><span class="p">(</span><span class="s">&quot;_placeholderLabel&quot;</span><span class="p">)</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UILabel</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后重写UITextField的响应者处理函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 成为第一响应者</span>
</span><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">becomeFirstResponder</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 存储正常颜色</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">normalColor</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">normalColor</span> <span class="o">=</span> <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">textColor</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// 存储选中颜色</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">selectedColor</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">selectedColor</span> <span class="o">=</span> <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">textColor</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">selectedColor</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 执行placeholder动画函数</span>
</span><span class='line'>    <span class="n">placeholderLabelDoAnimationWithType</span><span class="p">(</span><span class="n">animationType</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">super</span><span class="p">.</span><span class="n">becomeFirstResponder</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 放弃第一响应者</span>
</span><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">resignFirstResponder</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="n">animationType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">TPCAnimationTypeUpDown</span> <span class="p">:</span>
</span><span class='line'>        <span class="k">fallthrough</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">TPCAnimationTypeBlowUp</span> <span class="p">:</span>
</span><span class='line'>        <span class="k">fallthrough</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">TPCAnimationTypeLeftRight</span> <span class="p">:</span>
</span><span class='line'>        <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformIdentity</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">TPCAnimationTypeEasyInOut</span> <span class="p">:</span>
</span><span class='line'>        <span class="bp">UIView</span><span class="p">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">TPCAnimationTypeNone</span> <span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">operate</span> <span class="o">=</span> <span class="n">operateWhenResignFirstResponder</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">operate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置为初始颜色</span>
</span><span class='line'>    <span class="n">tpcPlaceholderLabel</span><span class="o">?</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">normalColor</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">super</span><span class="p">.</span><span class="n">resignFirstResponder</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后通过以下函数，传入相应的动作就可以得到抖动的效果了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">private</span> <span class="k">func</span> <span class="nf">doAnimation</span><span class="p">(</span><span class="nl">action</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">UIView</span><span class="p">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">usingSpringWithDamping</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span> <span class="nl">initialSpringVelocity</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptions</span><span class="p">.</span><span class="n">CurveEaseInOut</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">action</span><span class="p">()</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一点，根据上面打印的UITextField成员变量，看到了<code>_displayLabel</code>，这个就是在键盘输入后显示文字的UILabel了。这个属性可以用来干嘛？<br>
我想，<code>可能会有这么一种需求（不过可能没有），就是用户输入错误时，UITextField中已经输入的文字做左右抖动，以间接的形式，辅助提醒用户，这一栏输错了，而不是弹出一个HUB</code>。<br>
由于UITextField内部做了某些处理，所以无法在成为第一响应者时做一些动作，那么，就在放弃第一响应者函数中。<br></p>

<p>相关代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 设置一个在放弃第一响应者的闭包属性</span>
</span><span class='line'><span class="k">var</span> <span class="nl">operateWhenResignFirstResponder</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="p">())</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在func resignFirstResponder() -&gt; Bool函数中调用</span>
</span><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">operate</span> <span class="o">=</span> <span class="n">operateWhenResignFirstResponder</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">operate</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码地址</h4>

<p><a href="https://github.com/tripleCC/TPCDynamicTextFiled/blob/master/README.md">UITextFiled文字抖动效果</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UINavigationBar属性小结及返回按钮更改]]></title>
    <link href="http://triplecc.github.io/blog/2015-07-23-uinavigationbarshu-xing-xiao-jie-ji-fan-hui-an-niu-geng-gai/"/>
    <updated>2015-07-23T20:17:32+08:00</updated>
    <id>http://triplecc.github.io/blog/uinavigationbarshu-xing-xiao-jie-ji-fan-hui-an-niu-geng-gai</id>
    <content type="html"><![CDATA[<h2>UINavigationBar属性</h2>

<ul>
<li>如果想统一设置，可以通过以下方法，获取当前类下的所有对象的导航条，然后进行设置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="bp">UINavigationBar</span> <span class="nl">appearanceWhenContainedIn</span><span class="p">:</span><span class="nb">self</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>背景图片<br>
<img src="http://triplecc.github.io/images/Snip20150724_4.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="c1">// barMetrics需要设置成UIBarMetricsDefault</span>
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setBackgroundimages</span><span class="p">:(</span><span class="n">UIimages</span> <span class="o">*</span><span class="p">)</span><span class="n">backgroundimages</span> <span class="nl">forBarMetrics</span><span class="p">:(</span><span class="n">UIBarMetrics</span><span class="p">)</span><span class="n">barMetrics</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>背景阴影图片<br>
<img src="http://triplecc.github.io/images/Snip20150724_5.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">retain</span><span class="p">)</span> <span class="n">UIimages</span> <span class="o">*</span><span class="n">shadowimages</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<ul>
<li>隐藏底部1px下划线（<a href="http://stackoverflow.com/questions/19226965/how-to-hide-ios7-uinavigationbar-1px-bottom-line">详细讨论</a>）<br>
<img src="http://triplecc.github.io/images/Snip20151116_1.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 注意，阴影生效，必须要有背景图片</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span> <span class="nl">setBackgroundImage</span><span class="p">:[[</span><span class="bp">UIImage</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="nl">forBarMetrics</span><span class="p">:</span><span class="n">UIBarMetricsDefault</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span><span class="p">.</span><span class="n">shadowImage</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImage</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下方法可以在不设置背景图片的情况下实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 传入navigationBar可以找出下划线控件</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UIImageView</span> <span class="o">*</span><span class="p">)</span><span class="nf">findHairlineImageViewUnder:</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">view</span> <span class="nl">isKindOfClass</span><span class="p">:</span><span class="bp">UIImageView</span><span class="p">.</span><span class="k">class</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">&lt;=</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="bp">UIImageView</span> <span class="o">*</span><span class="p">)</span><span class="n">view</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="k">in</span> <span class="n">view</span><span class="p">.</span><span class="n">subviews</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">findHairlineImageViewUnder</span><span class="p">:</span><span class="n">subview</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">imageView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">imageView</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>背景颜色<br>
<img src="http://triplecc.github.io/images/Snip20150724_6.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">retain</span><span class="p">)</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">barTintColor</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>标题文字属性<br>
<img src="http://triplecc.github.io/images/Snip20150724_10.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">copy</span><span class="p">)</span> <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">titleTextAttributes</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>系统类型按钮文字颜色<br>
<img src="http://triplecc.github.io/images/Snip20150724_9.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">retain</span><span class="p">)</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">tintColor</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>返回按钮图片<br>
<img src="http://triplecc.github.io/images/Snip20150724_11.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="c1">// 必须要两个都设置，并且图片要设置成不渲染</span>
</span><span class='line'>  <span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">retain</span><span class="p">)</span> <span class="n">UIimages</span> <span class="o">*</span><span class="n">backIndicatorimages</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">retain</span><span class="p">)</span> <span class="n">UIimages</span> <span class="o">*</span><span class="n">backIndicatorTransitionMaskimages</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>标题垂直偏移<br>
<img src="http://triplecc.github.io/images/Snip20150724_12.png" alt="" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setTitleVerticalPositionAdjustment</span><span class="p">:(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">adjustment</span> <span class="nl">forBarMetrics</span><span class="p">:(</span><span class="n">UIBarMetrics</span><span class="p">)</span><span class="n">barMetrics</span>
</span></code></pre></td></tr></table></div></figure>


<h2>返回按钮更改</h2>

<p>系统原装效果:<br>
<img src="http://triplecc.github.io/images/Snip20150724_13.png" alt="" /><br></p>

<p>如果有以下需求:</p>

<ul>
<li>去除上面返回按钮上“我是标题”字样，并设置返回图片为白色</li>
</ul>


<h6>分析</h6>

<ul>
<li>图片修改

<ul>
<li>方式1：设置返回图片颜色</li>
<li>方式2：直接设置返回图片</li>
<li>方式3：使用按钮覆盖返回图片(这种方式会使返回箭头图片和左边距离加大，但可以用取巧的方式调整)</li>
</ul>
</li>
<li>文字修改

<ul>
<li>方式1：设置控制器navigationItem的backBarButtonItem显示文字为""</li>
<li>方式2：设置返回按钮文字偏移量，使其移出屏幕</li>
<li>方式3：采用控制器navigationItem的leftBarButtonItem进行覆盖</li>
</ul>
</li>
</ul>


<h6>解决</h6>

<p>综合以上说明，这里给出三种方式(都是针对的自定义UINavigationController)：</p>

<ul>
<li>方式1:在<code>-pushViewController:animated:</code>中设置文字 ，在<code>+initialize</code>方法中设置返回图片或改变返回图片颜色

<ul>
<li>注意导航栏对图片的渲染</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">pushViewController</span><span class="p">:(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">backBarButtonItem</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle</span><span class="p">:</span><span class="s">@&quot;&quot;</span> <span class="nl">style</span><span class="p">:</span><span class="n">UIBarButtonItemStyleDone</span> <span class="nl">target</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">action</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取特定类的所有导航条</span>
</span><span class='line'><span class="bp">UINavigationBar</span> <span class="o">*</span><span class="n">navigationBar</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UINavigationBar</span> <span class="nl">appearanceWhenContainedIn</span><span class="p">:</span><span class="nb">self</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 方式1：使用自己的图片替换原来的返回图片</span>
</span><span class='line'><span class="n">navigationBar</span><span class="p">.</span><span class="n">backIndicatorImage</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;NavBack&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">navigationBar</span><span class="p">.</span><span class="n">backIndicatorTransitionMaskImage</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;NavBack&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 方式2：设置返回图片颜色</span>
</span><span class='line'><span class="n">navigationBar</span><span class="p">.</span><span class="n">tintColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方式2:在<code>+initialize</code>方法中设置所有返回按钮文字的偏移量，其他设置和方式1一致</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="p">[[</span><span class="bp">UIBarButtonItem</span> <span class="n">appearance</span><span class="p">]</span> <span class="nl">setBackButtonTitlePositionAdjustment</span><span class="p">:</span><span class="n">UIOffsetMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">100</span><span class="p">)</span> <span class="nl">forBarMetrics</span><span class="p">:</span><span class="n">UIBarMetricsDefault</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方式3.重写<code>-pushViewController:animated:</code>方法,使用控制器的<code>navigationItem的leftBarButtonItem</code>覆盖返回按钮

<ul>
<li>需要判断是否为根控制器，如果是根控制器就不添加

<ul>
<li>导航控制器的<code>viewControllers.count</code>不为0即表示传入的为非根控制器</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pushViewController:</span><span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">viewControllers</span><span class="p">.</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">viewController</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">leftBarButtonItem</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;NavBack&quot;</span><span class="p">]</span> <span class="nl">style</span><span class="p">:</span><span class="n">UIBarButtonItemStyleDone</span> <span class="nl">target</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">back</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">super</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">back</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">popViewControllerAnimated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>方案对比</h6>

<ul>
<li>方案1和方案2改动较小，对系统自带的返回功能无影响。<br></li>
<li>方式3灵活性最高，但是会<code>使系统的滑动返回失效</code>，需要自己实现，具体实现参照<a href="https://github.com/forkingdog/FDFullscreenPopGesture">forkingdog全屏手势分类</a><br></li>
<li>方式3还会使按钮更加偏向右边：</li>
</ul>


<p><img src="http://triplecc.github.io/images/Snip20150722_10.png" alt="" /><br>
通过以下方式可以使按钮向左边靠：
<img src="http://triplecc.github.io/images/Snip20150722_11.png" alt="" /><br>
- 采用customView，<code>添加自己定义的UIButton</code><br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// 返回按钮内容左靠</span>
</span><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">contentHorizontalAlignment</span> <span class="o">=</span> <span class="n">UIControlContentHorizontalAlignmentLeft</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 让返回按钮内容继续向左边偏移10</span>
</span><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">contentEdgeInsets</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">viewController</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">leftBarButtonItem</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCustomView</span><span class="p">:</span><span class="n">button</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
