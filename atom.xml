<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tripleCC的技术博客]]></title>
  <link href="http://triplecc.github.io/atom.xml" rel="self"/>
  <link href="http://triplecc.github.io/"/>
  <updated>2017-08-04T10:09:57+08:00</updated>
  <id>http://triplecc.github.io/</id>
  <author>
    <name><![CDATA[tripleCC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 Block 实现委托方法]]></title>
    <link href="http://triplecc.github.io/blog/2017-07-28-blockhe-nsmethodsignature/"/>
    <updated>2017-07-28T19:05:22+08:00</updated>
    <id>http://triplecc.github.io/blog/blockhe-nsmethodsignature</id>
    <content type="html"><![CDATA[<p>Block 和 Delegate 是对象间传递消息的常用机制，这两个机制可以说是各有千秋。 Delegate 可以很方便把目标动作的执行过程划分为多个方法，以展现不同时间节点下特定的操作； Block 则擅长处理一个回调多个落点的情况，并且它可以通过捕捉上下文信息，来达到减少创建额外变量，集中消息处理逻辑的目的。</p>

<p>结合以上两种通信方式的特点，我们可以添加一些额外的桥接处理，让 Delegate 机制也能享有 Block 机制所拥有的部分优点。桥接处理的核心就是用 Block 实现委托方法。</p>

<!--more-->


<p>由于 Runtime 的存在，在消息转发的最后一步，开发者可以轻松地拦截对未定义方法的调用，并且针对当前消息做一些额外的处理，比如改变它的入参、设置另一个消息接受者等。借助于这一特性，我们可以创建一个统一的 Delegate 对象，并在这个对象的 <code>-forwardInvocation:</code> 方法中，用预先设置的 Block 替换对委托方法的调用，以达到用 Block 实现委托方法的目的。</p>

<h2>NSInvocation 基本使用</h2>

<blockquote><p>NSInvocation objects are used to store and forward messages between objects and between applications</p></blockquote>

<p>这是苹果官方对 NSInvocation 的用途给出的解释。一个 NSInvocation 对象包含了 Objective-C 消息的所有要素：消息接收对象、 方法选择器 (SEL) 、参数以及返回值，并且这些要素都可以由开发者直接设置。以下是使用 NSInvocation 的一个简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">foo</span> <span class="o">=</span> <span class="s">@&quot;foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="n">signature</span> <span class="o">=</span> <span class="p">[</span><span class="n">foo</span> <span class="nl">methodSignatureForSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">stringByAppendingString</span><span class="p">:)];</span>
</span><span class='line'><span class="bp">NSInvocation</span> <span class="o">*</span><span class="n">invocation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSInvocation</span> <span class="nl">invocationWithMethodSignature</span><span class="p">:</span><span class="n">signature</span><span class="p">];</span>
</span><span class='line'><span class="n">invocation</span><span class="p">.</span><span class="n">selector</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">stringByAppendingString</span><span class="p">:);</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">bar</span> <span class="o">=</span> <span class="s">@&quot;bar&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">setArgument</span><span class="p">:</span><span class="o">&amp;</span><span class="n">bar</span> <span class="nl">atIndex</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">invokeWithTarget</span><span class="p">:</span><span class="n">foo</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">getReturnValue</span><span class="p">:</span><span class="o">&amp;</span><span class="n">result</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">resultString</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="bp">NSString</span> <span class="o">*</span><span class="p">)(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">resultString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码块输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">01</span> <span class="mi">15</span><span class="o">:</span><span class="mo">07</span><span class="o">:</span><span class="mf">51.131489</span><span class="o">+</span><span class="mi">0800</span> <span class="p">[</span><span class="mi">33240</span><span class="o">:</span><span class="mi">7029681</span><span class="p">]</span> <span class="n">foobar</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，以上结果和执行 <code>[foo stringByAppendingString:bar]</code>  的结果是一致的。</p>

<p>关于 NSInvocation 的使用，需要留意以下两点：</p>

<p>1、一般方法的自定义参数从索引 2 开始，前两个分别是对象自身以及发送方法的 SEL 。<br>
2、从 <code>-getArgument:atIndex:</code> 和 <code>-getReturnValue:</code> 方法中获取的对象是不会被 retain 的，所以如果使用了 ARC ，那么以下代码都是错误的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">bar</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">getArgument</span><span class="p">:</span><span class="o">&amp;</span><span class="n">bar</span> <span class="nl">atIndex</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">getReturnValue</span><span class="p">:</span><span class="o">&amp;</span><span class="n">result</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>ARC 编译环境下局部对象默认具有 <code>__strong</code> 属性，它会针对这个对象添加 release 代码，所以这样的代码可能会因为 release 已经释放的对象而崩溃。正确代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">bar</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="c1">//__unsafe_unretained NSString *bar = nil;</span>
</span><span class='line'><span class="c1">//__weak NSString *bar = nil;</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">getArgument</span><span class="p">:</span><span class="o">&amp;</span><span class="n">bar</span> <span class="nl">atIndex</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="c1">//__unsafe_unretained NSString *result = nil;</span>
</span><span class='line'><span class="c1">//__weak NSString *result = nil;</span>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">getReturnValue</span><span class="p">:</span><span class="o">&amp;</span><span class="n">result</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、如果是在两个 NSInvocation 对象间传递参数 /  返回值，那么可以直接传入指针获取并设置目标地址，以返回值为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">....</span>
</span><span class='line'><span class="bp">NSInvocation</span> <span class="o">*</span><span class="n">invocation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSInvocation</span> <span class="nl">invocationWithMethodSignature</span><span class="p">:</span><span class="n">signature</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSInvocation</span> <span class="o">*</span><span class="n">shadowInvocation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSInvocation</span> <span class="nl">invocationWithMethodSignature</span><span class="p">:</span><span class="n">signature</span><span class="p">];</span>
</span><span class='line'><span class="p">....</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">resultBuffer</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">invocation</span><span class="p">.</span><span class="n">methodSignature</span><span class="p">.</span><span class="n">methodReturnLength</span><span class="p">);</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span><span class="n">resultBuffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">invocation</span><span class="p">.</span><span class="n">methodSignature</span><span class="p">.</span><span class="n">methodReturnLength</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">invocation</span> <span class="nl">getReturnValue</span><span class="p">:</span><span class="n">resultBuffer</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">shadowInvocation</span> <span class="nl">setReturnValue</span><span class="p">:</span><span class="n">resultBuffer</span><span class="p">];</span>
</span><span class='line'><span class="p">....</span>
</span><span class='line'><span class="n">free</span><span class="p">(</span><span class="n">resultBuffer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时，如果返回值是一个 NSString 对象，那么 <code>resultBuffer</code> 实际上是指向 NSString 对象指针的指针，这时可以这样读取实际内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="bp">NSString</span> <span class="o">*</span><span class="p">)(</span><span class="o">*</span><span class="p">(</span><span class="kt">void</span> <span class="o">**</span><span class="p">)</span><span class="n">resultBuffer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过在已经知道返回值是一个对象时，一般会直接传入对象指针的地址，以便直接读取对象。</p>

<h2>获取方法签名</h2>

<p>NSMethodSignature 是创建一个有效 NSInvocation 对象的必要成分，它提供了方法调用所必须的参数和返回值信息。</p>

<h4>从对象中获取方法签名</h4>

<p>NSObject 类用以下两个方法获取实例方法的方法签名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">methodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span> <span class="n">OBJC_SWIFT_UNAVAILABLE</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">instanceMethodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span> <span class="n">OBJC_SWIFT_UNAVAILABLE</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>既然类也是对象，那么类方法的方法签名也就可以通过 <code>-methodSignatureForSelector:</code> 方法获取了。</p>

<h4>从协议中获取方法签名</h4>

<p>由于协议定义了接口的参数和返回值信息，所以从协议中也可以获取到特定方法的方法签名。利用 <code>protocol_getMethodDescription</code> 函数，可以获取到描述类型的 C 字符串，再通过这个字符串构造方法签名。针对协议中的接口有 <code>required</code> 和 <code>optional</code> 两种，并且不允许重复这一特点，可以创建构造方法签名的函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="nf">tbv_getProtocolMethodSignature</span><span class="p">(</span><span class="n">Protocol</span> <span class="o">*</span><span class="n">protocol</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">selector</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">isInstanceMethod</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">objc_method_description</span> <span class="n">methodDescription</span> <span class="o">=</span> <span class="n">protocol_getMethodDescription</span><span class="p">(</span><span class="n">protocol</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="nb">YES</span><span class="p">,</span> <span class="n">isInstanceMethod</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">methodDescription</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">methodDescription</span> <span class="o">=</span> <span class="n">protocol_getMethodDescription</span><span class="p">(</span><span class="n">protocol</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="nb">NO</span><span class="p">,</span> <span class="n">isInstanceMethod</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="bp">NSMethodSignature</span> <span class="nl">signatureWithObjCTypes</span><span class="p">:</span><span class="n">methodDescription</span><span class="p">.</span><span class="n">types</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>从 Block 中获取方法签名</h4>

<p>苹果并没有提供一个开放的接口，供开发者获取 Block 的方法签名。不过根据 <a href="https://clang.llvm.org/docs/Block-ABI-Apple.html">LLVM 对 Block 结构的描述</a>，我们可以通过操作指针获取签名字符串。以下是 Block 的结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Block internals.</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">NS_OPTIONS</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">TBVBlockFlags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TBVBlockFlagsHasCopyDisposeHelpers</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">25</span><span class="p">),</span>
</span><span class='line'>    <span class="n">TBVBlockFlagsHasSignature</span>          <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">30</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">tbv_block</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">__unused</span> <span class="kt">Class</span> <span class="n">isa</span><span class="p">;</span>
</span><span class='line'>    <span class="n">TBVBlockFlags</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__unused</span> <span class="kt">int</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="n">__unused</span> <span class="o">*</span><span class="n">invoke</span><span class="p">)(</span><span class="k">struct</span> <span class="n">tbv_block</span> <span class="o">*</span><span class="n">block</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>    <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// requires TBVBlockFlagsHasCopyDisposeHelpers</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="k">copy</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// requires TBVBlockFlagsHasSignature</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">signature</span><span class="p">;</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">layout</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="o">*</span><span class="n">descriptor</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// imported variables</span>
</span><span class='line'><span class="p">}</span> <span class="o">*</span><span class="n">TBVBlockRef</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，只要获取 <code>descriptor</code> 指针，然后根据不同条件添加特定的偏移量，就可以获取到 <code>signature</code> 了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="nf">tbv_signatureForBlock</span><span class="p">(</span><span class="kt">id</span> <span class="n">block</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TBVBlockRef</span> <span class="n">layout</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">TBVBlockRef</span><span class="p">)(</span><span class="n">block</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 没有签名，直接返回空</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">layout</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">TBVBlockFlagsHasSignature</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 获取 descriptor 指针</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">desc</span> <span class="o">=</span> <span class="n">layout</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 跳过 reserved 和 size 成员</span>
</span><span class='line'>    <span class="n">desc</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 如果有 Helpers 函数， 跳过 copy 和 dispose 成员</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">layout</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">TBVBlockFlagsHasCopyDisposeHelpers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">desc</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// desc 为 signature 指针的地址，转换下给 objcTypes</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">objcTypes</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="p">)</span><span class="n">desc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="bp">NSMethodSignature</span> <span class="nl">signatureWithObjCTypes</span><span class="p">:</span><span class="n">objcTypes</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>方法调用 -> Block 调用</h2>

<p>经过上文的探索，已经可以获取到 Block 和接口方法的签名信息了，下面要做的就是根据这个签名信息，结合方法对应的 NSInvocation 对象，创建和 Block 关联的 NSInvocation 对象。</p>

<h4>存储 Block 信息</h4>

<p>首先要做的是，存储 Block 的签名信息，并且和接口方法的签名信息做匹配处理。因为在调用前，需要将接口方法得到的参数转换成 Block 的入参，调用之后，需要将 Block 的返回值重新传给接口方法，所以必须确保两者的签名信息在一定程度上是兼容的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithMethodSignature:</span><span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nv">methodSignature</span> <span class="nf">block:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">block</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">initWithMethodSignature</span><span class="p">:</span><span class="n">methodSignature</span> <span class="nl">blockSignature</span><span class="p">:</span><span class="n">tbv_signatureForBlock</span><span class="p">(</span><span class="n">block</span><span class="p">)</span> <span class="nl">block</span><span class="p">:</span><span class="n">block</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithMethodSignature:</span><span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nv">methodSignature</span> <span class="nf">blockSignature:</span><span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nv">blockSignature</span> <span class="nf">block:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">block</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">tbv_isCompatibleBlockSignature</span><span class="p">(</span><span class="n">blockSignature</span><span class="p">,</span> <span class="n">methodSignature</span><span class="p">),</span> <span class="s">@&quot;Block signature %@ is not compatible with method signature %@&quot;</span><span class="p">,</span> <span class="n">blockSignature</span><span class="p">,</span> <span class="n">methodSignature</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_methodSignature</span> <span class="o">=</span> <span class="n">methodSignature</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_blockSignature</span> <span class="o">=</span> <span class="n">blockSignature</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_block</span> <span class="o">=</span> <span class="n">block</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>签名匹配</h4>

<p>Block 的签名信息相较于方法的签名信息，只在参数类型上少了 SEL 。方法的签名信息如果要获取自定义参数类型的话，需要从索引 2 开始，而 Block 的自定义参数类型信息则从索引 1 开始。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">BOOL</span> <span class="nf">tbv_isCompatibleBlockSignature</span><span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="n">blockSignature</span><span class="p">,</span> <span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="n">methodSignature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSCParameterAssert</span><span class="p">(</span><span class="n">blockSignature</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSCParameterAssert</span><span class="p">(</span><span class="n">methodSignature</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">blockSignature</span> <span class="nl">isEqual</span><span class="p">:</span><span class="n">methodSignature</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// block 参数个数需要小于 method 的参数个数 (针对 block 调用替换 method 调用)</span>
</span><span class='line'>    <span class="c1">// 两者返回类型需要一致</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">blockSignature</span><span class="p">.</span><span class="n">numberOfArguments</span> <span class="o">&gt;=</span> <span class="n">methodSignature</span><span class="p">.</span><span class="n">numberOfArguments</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">blockSignature</span><span class="p">.</span><span class="n">methodReturnType</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">methodSignature</span><span class="p">.</span><span class="n">methodReturnType</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 参数类型需要一致</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">compatibleSignature</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 自定义参数从第二个开始</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">blockSignature</span><span class="p">.</span><span class="n">numberOfArguments</span><span class="p">;</span> <span class="n">idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// block 相比 method ，默认参数少了 SEL</span>
</span><span class='line'>        <span class="c1">// method: id(@) SEL(:) ....</span>
</span><span class='line'>        <span class="c1">// block: block(@?) ....</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">methodArgument</span> <span class="o">=</span> <span class="p">[</span><span class="n">methodSignature</span> <span class="nl">getArgumentTypeAtIndex</span><span class="p">:</span><span class="n">idx</span><span class="p">];</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">blockArgument</span> <span class="o">=</span> <span class="p">[</span><span class="n">blockSignature</span> <span class="nl">getArgumentTypeAtIndex</span><span class="p">:</span><span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">methodArgument</span> <span class="o">||</span> <span class="o">!</span><span class="n">blockArgument</span> <span class="o">||</span> <span class="n">methodArgument</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">blockArgument</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">compatibleSignature</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">compatibleSignature</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Invocation 调用</h4>

<p>得到了有效的 Block 签名信息，就可以构造 NSInvocation 对象了，不过还需要接口方法的实参信息，这可以通过让外部传入接口方法的 NSInvocation 对象实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">invokeWithMethodInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">methodInvocation</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSParameterAssert</span><span class="p">(</span><span class="n">methodInvocation</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">methodSignature</span> <span class="nl">isEqual</span><span class="p">:</span><span class="n">methodInvocation</span><span class="p">.</span><span class="n">methodSignature</span><span class="p">],</span> <span class="s">@&quot;Method invocation&#39;s signature is not compatible with block signature&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="n">methodSignature</span> <span class="o">=</span> <span class="n">methodInvocation</span><span class="p">.</span><span class="n">methodSignature</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSInvocation</span> <span class="o">*</span><span class="n">blockInvocation</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSInvocation</span> <span class="nl">invocationWithMethodSignature</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">blockSignature</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">argumentBuffer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">methodSignature</span><span class="p">.</span><span class="n">numberOfArguments</span><span class="p">;</span> <span class="n">idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 获取参数类型</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">type</span> <span class="o">=</span> <span class="p">[</span><span class="n">methodSignature</span> <span class="nl">getArgumentTypeAtIndex</span><span class="p">:</span><span class="n">idx</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSUInteger</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 获取参数大小</span>
</span><span class='line'>        <span class="n">NSGetSizeAndAlignment</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 参数缓存</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">argumentBuffer</span> <span class="o">=</span> <span class="n">reallocf</span><span class="p">(</span><span class="n">argumentBuffer</span><span class="p">,</span> <span class="n">size</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 把 method 的参数传递给 block</span>
</span><span class='line'>        <span class="p">[</span><span class="n">methodInvocation</span> <span class="nl">getArgument</span><span class="p">:</span><span class="n">argumentBuffer</span> <span class="nl">atIndex</span><span class="p">:</span><span class="n">idx</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">blockInvocation</span> <span class="nl">setArgument</span><span class="p">:</span><span class="n">argumentBuffer</span> <span class="nl">atIndex</span><span class="p">:</span><span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 调用 block</span>
</span><span class='line'>    <span class="p">[</span><span class="n">blockInvocation</span> <span class="nl">invokeWithTarget</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">block</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 返回值缓存</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">methodSignature</span><span class="p">.</span><span class="n">methodReturnLength</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="p">(</span><span class="n">argumentBuffer</span> <span class="o">=</span> <span class="n">reallocf</span><span class="p">(</span><span class="n">argumentBuffer</span><span class="p">,</span> <span class="n">methodSignature</span><span class="p">.</span><span class="n">methodReturnLength</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 把 block 的返回值传递给 method</span>
</span><span class='line'>        <span class="p">[</span><span class="n">blockInvocation</span> <span class="nl">getReturnValue</span><span class="p">:</span><span class="n">argumentBuffer</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">methodInvocation</span> <span class="nl">setReturnValue</span><span class="p">:</span><span class="n">argumentBuffer</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 释放缓存</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">argumentBuffer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>顺带说下 <code>reallocf</code> 函数是 <code>realloc</code> 函数的增强版，它可以在后者无法申请到堆空间时，释放旧的堆空间：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">reallocf</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">=</span> <span class="n">realloc</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span> <span class="k">return</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以直接用 <code>argumentBuffer = reallocf(argumentBuffer, size)</code> 形式的语句，否则如果使用 <code>realloc</code>, 一旦返回的是 <code>NULL</code>，会造成旧的堆空间无法释放的问题。</p>

<h2>实现委托方法</h2>

<p>现在已经可以构造 Block 的 NSInvocation 对像，就缺携带参数和返回值信息的接口方法 NSInvocation 对象了。接下来就针对实例方法，简单地实现动态委托类。</p>

<h4>储存 Block Invocation 信息</h4>

<p>这里简单地以接口方法选择器对应的字符串为 Key，以 Block 对应的 Invocation 封装类为 Value 储存调用信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithProtocol:</span><span class="p">(</span><span class="n">Protocol</span> <span class="o">*</span><span class="p">)</span><span class="nv">protocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_protocol</span> <span class="o">=</span> <span class="n">protocol</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_selectorInvocationMap</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">implementInstanceMethodOfSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span> <span class="nf">withBlock:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">block</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="n">methodSignature</span> <span class="o">=</span> <span class="n">tbv_getProtocolMethodSignature</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">protocol</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="nb">YES</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TBVBlockInvocation</span> <span class="o">*</span><span class="n">invocation</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBVBlockInvocation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithMethodSignature</span><span class="p">:</span><span class="n">methodSignature</span> <span class="nl">block</span><span class="p">:</span><span class="n">block</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">selectorInvocationMap</span><span class="p">[</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">selector</span><span class="p">)]</span> <span class="o">=</span> <span class="n">invocation</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>消息转发</h4>

<p>向动态委托类发送委托消息后，会触发消息转发机制。在消息转发的最后一步，可以构造委托方法对应的 NSInvocation 对象，这个对像可供<strong>Invocation 调用</strong>一节中描述的 Block Invocation 使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">forwardInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">invocation</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TBVBlockInvocation</span> <span class="o">*</span><span class="n">blockInvocation</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">selectorInvocationMap</span><span class="p">[</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">invocation</span><span class="p">.</span><span class="n">selector</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">blockInvocation</span> <span class="nl">invokeWithMethodInvocation</span><span class="p">:</span><span class="n">invocation</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">methodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">selectorInvocationMap</span><span class="p">[</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">sel</span><span class="p">)].</span><span class="n">methodSignature</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">respondsToSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">!!</span><span class="nb">self</span><span class="p">.</span><span class="n">selectorInvocationMap</span><span class="p">[</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">aSelector</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>实例</h2>

<p>最后看下如何使用这个动态委托类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@class</span> <span class="nc">Computer</span>;
</span><span class='line'><span class="k">@protocol</span> <span class="nc">ComputerDelegate</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@required</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">computerWillStart</span><span class="p">:(</span><span class="n">Computer</span> <span class="o">*</span><span class="p">)</span><span class="n">computer</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">computerShouldBeLocked:</span><span class="p">(</span><span class="n">Computer</span> <span class="o">*</span><span class="p">)</span><span class="nv">computer</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Computer</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">id</span> <span class="o">&lt;</span><span class="n">ComputerDelegate</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">start</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">lock</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Computer</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">start</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">computerWillStart</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// start</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">lock</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">__unused</span> <span class="kt">BOOL</span> <span class="n">locked</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">computerShouldBeLocked</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;computer should be locked: %d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">locked</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// lock</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是应用代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">TBVDynamicDelegate</span> <span class="o">&lt;</span><span class="n">ComputerDelegate</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">dynamicDelegate</span> <span class="o">=</span> <span class="p">(</span><span class="kt">id</span><span class="p">)[[</span><span class="n">TBVDynamicDelegate</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProtocol</span><span class="p">:@</span><span class="n">protocol</span><span class="p">(</span><span class="n">ComputerDelegate</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">dynamicDelegate</span> <span class="nl">implementInstanceMethodOfSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">computerWillStart</span><span class="p">:)</span> <span class="nl">withBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">Computer</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@ will start&quot;</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="p">[</span><span class="n">dynamicDelegate</span> <span class="nl">implementInstanceMethodOfSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">computerShouldBeLocked</span><span class="p">:)</span> <span class="nl">withBlock</span><span class="p">:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">Computer</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@ should not be locked&quot;</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="n">Computer</span> <span class="o">*</span><span class="n">computer</span> <span class="o">=</span> <span class="p">[</span><span class="n">Computer</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">computer</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">dynamicDelegate</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">computer</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">computer</span> <span class="n">lock</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">01</span> <span class="mi">14</span><span class="o">:</span><span class="mi">44</span><span class="o">:</span><span class="mf">29.814871</span><span class="o">+</span><span class="mi">0800</span> <span class="p">[</span><span class="mi">19950</span><span class="o">:</span><span class="mi">6944265</span><span class="p">]</span> <span class="o">&lt;</span><span class="nl">Computer</span><span class="p">:</span> <span class="mh">0x100405ce0</span><span class="o">&gt;</span> <span class="n">will</span> <span class="n">start</span>
</span><span class='line'><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">01</span> <span class="mi">14</span><span class="o">:</span><span class="mi">44</span><span class="o">:</span><span class="mf">29.815827</span><span class="o">+</span><span class="mi">0800</span> <span class="p">[</span><span class="mi">19950</span><span class="o">:</span><span class="mi">6944265</span><span class="p">]</span> <span class="o">&lt;</span><span class="nl">Computer</span><span class="p">:</span> <span class="mh">0x100405ce0</span><span class="o">&gt;</span> <span class="n">should</span> <span class="n">not</span> <span class="n">be</span> <span class="n">locked</span>
</span><span class='line'><span class="n">computer</span> <span class="n">should</span> <span class="n">be</span> <span class="nl">locked</span><span class="p">:</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>小结</h2>

<p>其实用 Block 实现委托方法的开源方案在比较早的时候就已经出来了，本文的实现就是 <a href="https://github.com/BlocksKit/BlocksKit">BlocksKit</a> 的 A2BlockInvocation 和 A2DynamicDelegate 类的简易版本，其中省略了类方法以及一些边界条件的处理，不过大体的思路基本是一致的，还是围绕 NSInvocation 和消息转发在走。</p>

<h2>参考</h2>

<p><a href="https://github.com/steipete/Aspects">Aspects</a><br>
<a href="https://github.com/BlocksKit/BlocksKit">BlocksKit</a><br>
<a href="http://www.informit.com/articles/article.aspx?p=1620076&amp;seqNum=3">Hands-On Objective-C 2.0: Blocks</a><br>
<a href="https://www.mikeash.com/pyblog/friday-qa-2011-10-28-generic-block-proxying.html">Generic Block Proxying</a><br>
<a href="https://stackoverflow.com/questions/22018272/nsinvocation-returns-value-but-makes-app-crash-with-exc-bad-access">NSInvocation returns value but makes app crash with EXC_BAD_ACCESS</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C 消息转发应用场景摘录]]></title>
    <link href="http://triplecc.github.io/blog/2017-07-09-objective-cxiao-xi-zhuan-fa-ying-yong-zhi-ji-chu/"/>
    <updated>2017-07-09T14:20:30+08:00</updated>
    <id>http://triplecc.github.io/blog/objective-cxiao-xi-zhuan-fa-ying-yong-zhi-ji-chu</id>
    <content type="html"><![CDATA[<p>说起 Objective-C runtime 在实际项目中的应用，可能很多人第一时间联想到的是黑魔法 method swizzling 、 associated objects 、 KVC / KVO 以及各种灵活的 runtime api 。这几种技术在开发过程中或多或少都会涉及到 ，也的确为开发者立下了汗马功劳，尤其在解决一些棘手问题时，屡试不爽。不过同样是 runtime 重要组成部分的<strong>消息转发</strong>却较少听人提及，这篇文章就来扒一扒它在不同应用场景中的精彩表现。</p>

<!--more-->




<!-- ## 目录

1、简说消息转发 <br>
2、简化代理方法的调用 <br>
3、部分代理方法转发<br>
4、多播代理<br>
5、代理强引用转弱引用<br>
6、NSUndoManager 中的应用<br>
7、依靠协议的依赖注入<br>
8、小结<br>
9、参考<br> -->


<h2>简说消息转发</h2>

<p>在开始之前，先简单温习下消息转发是怎么一回事。</p>

<p>举一个不恰当的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">o</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">o</span> <span class="n">lastObject</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行上面代码，程序会崩溃并抛出以下异常：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="bp">NSObject</span> <span class="n">lastObject</span><span class="p">]</span><span class="o">:</span> <span class="n">unrecognized</span> <span class="n">selector</span> <span class="n">sent</span> <span class="n">to</span> <span class="n">instance</span> <span class="mh">0x100200160</span>
</span></code></pre></td></tr></table></div></figure>


<p>错误显而易见，实例对象 <code>o</code> 无法响应 <code>lastObject</code> 方法。 那么问题来了， Objetive-C 作为一门动态语言，更有强大的 runtime 大佬在背后撑腰，它会让程序没有任何预警地直接狗带么？当然不会，Object-C 的 runtime 不但提供了挽救机制，而且还是三部曲：</p>

<p>1、Lazy method resolution <br>
2、Fast forwarding path <br>
3、Normal forwarding path <br></p>

<p>上述程序崩溃的根本原因在于没有找到方法的实现，也就是通常所说的 IMP 不存在。结合以下源码，可以知道消息转发三部曲是由 _objc_msgForward 函数发起的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">IMP</span> <span class="nf">class_getMethodImplementation</span><span class="p">(</span><span class="n">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="n">SEL</span> <span class="n">sel</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IMP</span> <span class="n">imp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cls</span>  <span class="o">||</span>  <span class="o">!</span><span class="n">sel</span><span class="p">)</span> <span class="k">return</span> <span class="n">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">imp</span> <span class="o">=</span> <span class="n">lookUpImpOrNil</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">sel</span><span class="p">,</span> <span class="n">nil</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">YES</span><span class="cm">/*initialize*/</span><span class="p">,</span> <span class="n">YES</span><span class="cm">/*cache*/</span><span class="p">,</span> <span class="n">YES</span><span class="cm">/*resolver*/</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Translate forwarding function to C-callable external version</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">imp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_objc_msgForward</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">imp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Lazy method resolution</h3>

<p>在这一步， <code>_objc_msgForward</code> 直接或间接调用了以下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">/// 针对类方法</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">resolveClassMethod:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span><span class="p">;</span>
</span><span class='line'><span class="c1">/// 针对对象方法</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">resolveInstanceMethod:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于形参中传入了无法找到对应 IMP 的 SEL ，我们就可以在这个方法中动态添加 SEL 的实现，并返回 YES 重新启动一次消息发送动作。如果方法返回 NO ，那么就进行消息转发的下个流程 Fast forwarding path 。</p>

<p>这种方式能够方便地实现 <code>@dynamic</code> 属性， CoreData 中模型定义中就广泛使用到了 <code>@dynamic</code> 属性。</p>

<h3>Fast forwarding path</h3>

<p>在这一步， <code>_objc_msgForward</code> 直接或间接调用了以下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">forwardingTargetForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法还是只附带了无法找到对应 IMP 的 SEL，我们可以根据这个 SEL ，判断是否有其它对象可以响应它，然后选择将消息转发给这个对象。如果返回除 nil / self 之外的对象，那么会重启一次消息发送动作给返回的对象，否则进入下个流程 Normal forwarding path。</p>

<h3>Normal forwarding path</h3>

<p>在这一步， <code>_objc_msgForward</code> 直接或间接调用了以下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">methodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">forwardInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">anInvocation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个消息转发的最后一步，首先会调用的是 <code>-methodSignatureForSelector:</code> 方法，这个方法返回一个方法签名，用以构造 NSInvocation 并作为实参传入 <code>-forwardInvocation:</code> 方法中。如果 <code>-methodSignatureForSelector:</code> 返回 nil ，将会抛出 unrecognized selector 异常。</p>

<p>由于在 <code>-forwardInvocation:</code> 方法中可以获取到 NSInvocation ，而 NSInvocation 包含了参数、发送目标以及 SEL 等信息，尤其是参数信息，所以这一步也是可操作性最强的一步。我们可以选择直接执行传入的 NSInvocation 对象，也可以通过 <code>-invokeWithTarget:</code> 指定新的发送目标。</p>

<p>一般来说，既然走到这一步，这个对象都是没有 SEL 对应的 IMP 的，所以通常来说都必须要重写 <code>-methodSignatureForSelector:</code> 方法以返回有效的方法签名，否则就会抛出异常。不过有种例外，当对象实现了相应的方法，但还是走到了 Normal forwarding path 这一步时，就可以不重写 <code>-methodSignatureForSelector:</code> 方法。</p>

<p>理解这种操作需要知晓 method swizzling 技术中的一个知识点，<strong><em>替换 IMP 是不会影响到 SEL 和 参数信息的</em></strong>。所以当把某个方法的实现替换成 <code>_objc_msgForward</code> / <code>_objc_msgForward_stret</code> 以启动消息转发时，即使不重写 <code>-methodSignatureForSelector:</code> ，这个方法依旧能返回有效的方法签名信息。举个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSArray</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">Method</span> <span class="n">old</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">arr</span> <span class="k">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">objectAtIndex</span><span class="p">:));</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;old type: %s, imp: %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">old</span><span class="p">),</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">old</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">class_replaceMethod</span><span class="p">([</span><span class="n">arr</span> <span class="k">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">objectAtIndex</span><span class="p">:),</span> <span class="n">_objc_msgForward</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Method</span> <span class="n">new</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">arr</span> <span class="k">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">objectAtIndex</span><span class="p">:));</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;new type: %s, imp: %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">new</span><span class="p">),</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">new</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面程序输出如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">old</span> <span class="nl">type</span><span class="p">:</span> <span class="mi">@24@0</span><span class="o">:</span><span class="mi">8</span><span class="n">Q16</span><span class="p">,</span> <span class="nl">imp</span><span class="p">:</span> <span class="mh">0x7fffb5fc31e0</span>
</span><span class='line'><span class="n">new</span> <span class="nl">type</span><span class="p">:</span> <span class="mi">@24@0</span><span class="o">:</span><span class="mi">8</span><span class="n">Q16</span><span class="p">,</span> <span class="nl">imp</span><span class="p">:</span> <span class="mh">0x7fffcada5cc0</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，更改的只有方法实现 IMP 。并且从源码层面看，method swizzling 在方法已存在的情况下，只是设置了对应的 Method 的 IMP，当方法不存在时，才会设置额外的一些属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">IMP</span>
</span><span class='line'><span class="nf">class_replaceMethod</span><span class="p">(</span><span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">name</span><span class="p">,</span> <span class="kt">IMP</span> <span class="n">imp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">types</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cls</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rwlock_write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">runtimeLock</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">old</span> <span class="o">=</span> <span class="n">addMethod</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">imp</span><span class="p">,</span> <span class="n">types</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nb">YES</span><span class="p">);</span>
</span><span class='line'>    <span class="n">rwlock_unlock_write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">runtimeLock</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">old</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="kt">IMP</span>
</span><span class='line'><span class="nf">addMethod</span><span class="p">(</span><span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">name</span><span class="p">,</span> <span class="kt">IMP</span> <span class="n">imp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">types</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">replace</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">result</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rwlock_assert_writing</span><span class="p">(</span><span class="o">&amp;</span><span class="n">runtimeLock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">types</span><span class="p">);</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">cls</span><span class="o">-&gt;</span><span class="n">isRealized</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">method_t</span> <span class="o">*</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 方法是否存在</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">m</span> <span class="o">=</span> <span class="n">getMethodNoSuper_nolock</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">name</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// already exists</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">replace</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 不替换返回已存在方法实现IMP</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">_method_getImplementation</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 直接替换类cls的m函数指针为imp</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">_method_setImplementation</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">imp</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// fixme optimize</span>
</span><span class='line'>        <span class="c1">// 申请方法列表内存</span>
</span><span class='line'>        <span class="kt">method_list_t</span> <span class="o">*</span><span class="n">newlist</span><span class="p">;</span>
</span><span class='line'>        <span class="n">newlist</span> <span class="o">=</span> <span class="p">(</span><span class="kt">method_list_t</span> <span class="o">*</span><span class="p">)</span><span class="n">_calloc_internal</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">newlist</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">newlist</span><span class="o">-&gt;</span><span class="n">entsize_NEVER_USE</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">method_t</span><span class="p">)</span> <span class="o">|</span> <span class="n">fixed_up_method_list</span><span class="p">;</span>
</span><span class='line'>        <span class="n">newlist</span><span class="o">-&gt;</span><span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 赋值名字，类型，方法实现（函数指针）</span>
</span><span class='line'>        <span class="n">newlist</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>        <span class="n">newlist</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">.</span><span class="n">types</span> <span class="o">=</span> <span class="n">strdup</span><span class="p">(</span><span class="n">types</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ignoreSelector</span><span class="p">(</span><span class="n">name</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newlist</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">.</span><span class="n">imp</span> <span class="o">=</span> <span class="n">imp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newlist</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">.</span><span class="n">imp</span> <span class="o">=</span> <span class="p">(</span><span class="kt">IMP</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_objc_ignored_method</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 向类添加方法列表</span>
</span><span class='line'>        <span class="n">attachMethodLists</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">newlist</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">NO</span><span class="p">,</span> <span class="nb">NO</span><span class="p">,</span> <span class="nb">YES</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>消息转发流程大体如此，如果想了解具体的转发原理、<code>_objc_msgForward</code> 内部是如何实现的，可以阅读<a href="http://yulingtianxia.com/">玉令天下</a>写的 <a href="http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/">Objective-C 消息发送与转发机制原理</a>，文章会以反汇编地角度剖析消息转发的实现，能捋清不少疑惑。<br></p>

<p>聊完消息转发的基本流程，再来说说它的一些应用场景。</p>

<h2>Week Proxy</h2>

<p>NSTimer、CADisplayLink 是实际项目中常用的计时器类，它们都使用 target - action 机制设置目标对象以及回调方法。相信很多人都遇到过 NSTimer 或者 CADisplayLink 对象造成的循环引用问题。实际上，这两个对象是强引用 target 的，如果使用者管理不当，轻则造成 target 对象的延迟释放，重则导致与 target 对象的循环引用。</p>

<p>假如有个 UIViewController 持有了一个 NSTimer 对象，正确的管理方式是在控制器退出回调中手动 invalidate 并释放对 NSTimer 对象的引用 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">popViewController</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_timer</span> <span class="n">invalidate</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_timer</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过正所谓“人有失手，马有失蹄”，这种分散的管理方式，总会让使用者在某些场景下忘记了将 <code>_timer</code> 清空。那么有没有更加优雅的管理机制呢？下面就来看看 FLAnimatedImage 是如何管理 CADisplayLink 对象的。</p>

<p>FLAnimatedImage 创建了以下弱引用代理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">FLWeakProxy</span> : <span class="bp">NSProxy</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">weakProxyForObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">targetObject</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">FLWeakProxy</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">id</span> <span class="n">target</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">FLWeakProxy</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark Life Cycle</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This is the designated creation method of an `FLWeakProxy` and</span>
</span><span class='line'><span class="c1">// as a subclass of `NSProxy` it doesn&#39;t respond to or need `-init`.</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">weakProxyForObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">targetObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">FLWeakProxy</span> <span class="o">*</span><span class="n">weakProxy</span> <span class="o">=</span> <span class="p">[</span><span class="n">FLWeakProxy</span> <span class="n">alloc</span><span class="p">];</span>
</span><span class='line'>    <span class="n">weakProxy</span><span class="p">.</span><span class="n">target</span> <span class="o">=</span> <span class="n">targetObject</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">weakProxy</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark Forwarding Messages</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">forwardingTargetForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Keep it lightweight: access the ivar directly</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_target</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - NSWeakProxy Method Overrides</span>
</span><span class='line'><span class="cp">#pragma mark Handling Unimplemented Methods</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">forwardInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">invocation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fallback for when target is nil. Don&#39;t do anything, just return 0/NULL/nil.</span>
</span><span class='line'>    <span class="c1">// The method signature we&#39;ve received to get here is just a dummy to keep `doesNotRecognizeSelector:` from firing.</span>
</span><span class='line'>    <span class="c1">// We can&#39;t really handle struct return types here because we don&#39;t know the length.</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">nullPointer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">invocation</span> <span class="nl">setReturnValue</span><span class="p">:</span><span class="o">&amp;</span><span class="n">nullPointer</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">methodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// We only get here if `forwardingTargetForSelector:` returns nil.</span>
</span><span class='line'>    <span class="c1">// In that case, our weak target has been reclaimed. Return a dummy method signature to keep `doesNotRecognizeSelector:` from firing.</span>
</span><span class='line'>    <span class="c1">// We&#39;ll emulate the Obj-c messaging nil behavior by setting the return value to nil in `forwardInvocation:`, but we&#39;ll assume that the return value is `sizeof(void *)`.</span>
</span><span class='line'>    <span class="c1">// Other libraries handle this situation by making use of a global method signature cache, but that seems heavier than necessary and has issues as well.</span>
</span><span class='line'>    <span class="c1">// See https://www.mikeash.com/pyblog/friday-qa-2010-02-26-futures.html and https://github.com/steipete/PSTDelegateProxy/issues/1 for examples of using a method signature cache.</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="nl">instanceMethodSignatureForSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">init</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面代码，可以看出 FLWeakProxy 是弱引用 target 的，而且它在消息转发的第二步，将所有的消息都转发给了 target 对象。以下是调用方使用此弱引用代理的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">FLAnimatedImageView</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">CADisplayLink</span> <span class="o">*</span><span class="n">displayLink</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">FLAnimatedImageView</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">startAnimating</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">FLWeakProxy</span> <span class="o">*</span><span class="n">weakProxy</span> <span class="o">=</span> <span class="p">[</span><span class="n">FLWeakProxy</span> <span class="nl">weakProxyForObject</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">displayLink</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CADisplayLink</span> <span class="nl">displayLinkWithTarget</span><span class="p">:</span><span class="n">weakProxy</span> <span class="nl">selector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">displayDidRefresh</span><span class="p">:)];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">displayLink</span> <span class="nl">addToRunLoop</span><span class="p">:[</span><span class="bp">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">forMode</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">runLoopMode</span><span class="p">];</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其对象间的引用关系可以用下图表示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">---&gt;</span> <span class="err">强引用</span>  <span class="o">~~~&gt;</span> <span class="err">弱引用</span>
</span><span class='line'>
</span><span class='line'><span class="n">FLAnimatedImageView</span><span class="p">(</span><span class="n">object</span><span class="p">)</span> <span class="o">---&gt;</span> <span class="n">displayLink</span> <span class="o">---&gt;</span> <span class="n">weakProxy</span> <span class="o">~~~&gt;</span> <span class="n">FLAnimatedImageView</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>这样一来， <code>displayLink</code> 间接弱引用了 FLAnimatedImageView 对象，它们之间也就不存在循环引用问题了。而且由于 <code>weakProxy</code> 将消息全部转发给了 FLAnimatedImageView 对象，<code>-displayDidRefresh:</code> 也得以正确地回调。</p>

<p>此外，苹果私有库 MIME.framework 中就有这种机制的应用 &mdash;- MFWeakProxy ；YYKit 的 YYAnimatedImageView 也使用了相同的机制管理 CADisplayLink，其对应类为 YYWeakProxy 。</p>

<h2>Delegate Proxy</h2>

<p>Delegate Proxy 主要实现部分代理方法的转发，顾名思义，就是封装者使用了被封装对象代理的一部分方法，然后将剩余的方法通过新的代理转发给调用者。这种机制在二次封装第三方框架或者原生控件时，能减少不少胶水代码。</p>

<p>接下来，我会以 IGListKit 中的 IGListAdapterProxy 为例，描述如何利用这种机制来简化代码。在开始之前先了解下与 IGListAdapterProxy 直接相关的 IGListAdapter 。 IGListAdapter 是 UICollectionView 的数据源和代理实现者，以下是它与本主题相关联的两个属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">IGListAdapter</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> The object that receives `UICollectionViewDelegate` events.</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> @note This object *will not* receive `UIScrollViewDelegate` events. Instead use scrollViewDelegate.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="n">nullable</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UICollectionViewDelegate</span><span class="o">&gt;</span> <span class="n">collectionViewDelegate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> The object that receives `UIScrollViewDelegate` events.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="n">nullable</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIScrollViewDelegate</span><span class="o">&gt;</span> <span class="n">scrollViewDelegate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用者可以成为 IGListAdapter 的代理，获得和 UICollectionView 原生代理一致的编写体验。实际上， IGListAdapter 只是使用并实现了部分代理方法，那么它又是如何编写有关这两个属性的代码，让使用者实现的代理方法能正确地执行呢？可能有些人会这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - UICollectionViewDelegateFlowLayout</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">collectionView</span><span class="p">:(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="n">collectionView</span> <span class="nl">canFocusItemAtIndexPath</span><span class="p">:(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionViewDelegate</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span><span class="nl">canFocusItemAtIndexPath</span><span class="p">:)])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionViewDelegate</span> <span class="nl">collectionView</span><span class="p">:</span><span class="n">collectionView</span> <span class="nl">canFocusItemAtIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">collectionView</span><span class="p">:(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="n">collectionView</span> <span class="nl">shouldShowMenuForItemAtIndexPath</span><span class="p">:(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionViewDelegate</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span><span class="nl">shouldShowMenuForItemAtIndexPath</span><span class="p">:)])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionViewDelegate</span> <span class="nl">collectionView</span><span class="p">:</span><span class="n">collectionView</span> <span class="nl">shouldShowMenuForItemAtIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>当代理方法较少的时候，这种写法是可以接受的。不过随着代理方法的增多，编写这种胶水代码就有些烦人了，侵入性的修改方式也不符合开放闭合原则。我们来看下 IGListKit 是如何利用 IGListAdapterProxy 解决这个问题的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">IGListAdapterProxy</span> : <span class="bp">NSProxy</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithCollectionViewTarget:</span><span class="p">(</span><span class="n">nullable</span> <span class="kt">id</span><span class="o">&lt;</span><span class="bp">UICollectionViewDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">collectionViewTarget</span>
</span><span class='line'>                            <span class="nf">scrollViewTarget:</span><span class="p">(</span><span class="n">nullable</span> <span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIScrollViewDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">scrollViewTarget</span>
</span><span class='line'>                                 <span class="nf">interceptor:</span><span class="p">(</span><span class="n">IGListAdapter</span> <span class="o">*</span><span class="p">)</span><span class="nv">interceptor</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">init</span> <span class="n">NS_UNAVAILABLE</span><span class="p">;</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">new</span> <span class="n">NS_UNAVAILABLE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">BOOL</span> <span class="n">isInterceptedSelector</span><span class="p">(</span><span class="kt">SEL</span> <span class="n">sel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>            <span class="c1">// UICollectionViewDelegate</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span><span class="nl">didSelectItemAtIndexPath</span><span class="p">:)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span><span class="nl">willDisplayCell</span><span class="p">:</span><span class="nl">forItemAtIndexPath</span><span class="p">:)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span><span class="nl">didEndDisplayingCell</span><span class="p">:</span><span class="nl">forItemAtIndexPath</span><span class="p">:)</span> <span class="o">||</span>
</span><span class='line'>            <span class="c1">// UICollectionViewDelegateFlowLayout</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span><span class="nl">layout</span><span class="p">:</span><span class="nl">sizeForItemAtIndexPath</span><span class="p">:)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span><span class="nl">layout</span><span class="p">:</span><span class="nl">insetForSectionAtIndex</span><span class="p">:)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span><span class="nl">layout</span><span class="p">:</span><span class="nl">minimumInteritemSpacingForSectionAtIndex</span><span class="p">:)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span><span class="nl">layout</span><span class="p">:</span><span class="nl">minimumLineSpacingForSectionAtIndex</span><span class="p">:)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span><span class="nl">layout</span><span class="p">:</span><span class="nl">referenceSizeForFooterInSection</span><span class="p">:)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">collectionView</span><span class="p">:</span><span class="nl">layout</span><span class="p">:</span><span class="nl">referenceSizeForHeaderInSection</span><span class="p">:)</span> <span class="o">||</span>
</span><span class='line'>            <span class="c1">// UIScrollViewDelegate</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">scrollViewDidScroll</span><span class="p">:)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">scrollViewWillBeginDragging</span><span class="p">:)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">sel</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">scrollViewDidEndDragging</span><span class="p">:</span><span class="nl">willDecelerate</span><span class="p">:)</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">IGListAdapterProxy</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">__weak</span> <span class="kt">id</span> <span class="n">_collectionViewTarget</span><span class="p">;</span>
</span><span class='line'>    <span class="k">__weak</span> <span class="kt">id</span> <span class="n">_scrollViewTarget</span><span class="p">;</span>
</span><span class='line'>    <span class="k">__weak</span> <span class="n">IGListAdapter</span> <span class="o">*</span><span class="n">_interceptor</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">IGListAdapterProxy</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithCollectionViewTarget:</span><span class="p">(</span><span class="n">nullable</span> <span class="kt">id</span><span class="o">&lt;</span><span class="bp">UICollectionViewDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">collectionViewTarget</span>
</span><span class='line'>                            <span class="nf">scrollViewTarget:</span><span class="p">(</span><span class="n">nullable</span> <span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIScrollViewDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">scrollViewTarget</span>
</span><span class='line'>                                 <span class="nf">interceptor:</span><span class="p">(</span><span class="n">IGListAdapter</span> <span class="o">*</span><span class="p">)</span><span class="nv">interceptor</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">IGParameterAssert</span><span class="p">(</span><span class="n">interceptor</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// -[NSProxy init] is undefined</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_collectionViewTarget</span> <span class="o">=</span> <span class="n">collectionViewTarget</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_scrollViewTarget</span> <span class="o">=</span> <span class="n">scrollViewTarget</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_interceptor</span> <span class="o">=</span> <span class="n">interceptor</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">respondsToSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">isInterceptedSelector</span><span class="p">(</span><span class="n">aSelector</span><span class="p">)</span>
</span><span class='line'>    <span class="o">||</span> <span class="p">[</span><span class="n">_collectionViewTarget</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">aSelector</span><span class="p">]</span>
</span><span class='line'>    <span class="o">||</span> <span class="p">[</span><span class="n">_scrollViewTarget</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">aSelector</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">forwardingTargetForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isInterceptedSelector</span><span class="p">(</span><span class="n">aSelector</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_interceptor</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">_scrollViewTarget</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">aSelector</span><span class="p">]</span> <span class="o">?</span> <span class="nl">_scrollViewTarget</span> <span class="p">:</span> <span class="n">_collectionViewTarget</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">forwardInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">invocation</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">nullPointer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">invocation</span> <span class="nl">setReturnValue</span><span class="p">:</span><span class="o">&amp;</span><span class="n">nullPointer</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">methodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="nl">instanceMethodSignatureForSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">init</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个类总共有三个自定义属性，分别是用来支持外界代理方法回调的 <code>_collectionViewTarget</code> 、 <code>_scrollViewTarget</code>，以及用以支持 AOP 的拦截者 <code>_interceptor</code>（IGListAdapter 在调用外界实现的代理方法前，插入了自己的实现，所以可视为拦截者）。 <code>isInterceptedSelector</code> 函数表明拦截者使用到了哪些代理方法，而 <code>-respondsToSelector:</code> 和 <code>-forwardingTargetForSelector:</code> 则根据这个函数的返回值决定是否能响应方法，以及应该把消息转发给拦截者还是外部代理。 事实上，外部代理就是本小节开头所说的使用者可以访问的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">IGListAdapter</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">delegateProxy</span> <span class="o">=</span> <span class="p">[[</span><span class="n">IGListAdapterProxy</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCollectionViewTarget</span><span class="p">:</span><span class="n">_collectionViewDelegate</span>
</span><span class='line'>                                                                 <span class="nl">scrollViewTarget</span><span class="p">:</span><span class="n">_scrollViewDelegate</span>
</span><span class='line'>                                                                      <span class="nl">interceptor</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过这种转发机制，即使后续有新的代理方法，也不用手动添加胶水代码了。一些流行的开源库中也可以看到这种做法的身影，比如 AsyncDisplayKit 就有对应的 <code>_ASCollectionViewProxy</code> 来转发未实现的代理方法。</p>

<h2>Multicast Delegate</h2>

<p>通知和代理是解耦对象间消息传递的两种重要方式，其中通知主要针对一对多的单向通信，而代理则主要提供一对一的双向通信。</p>

<p>通常来说， IM 应用在底层模块接受到新消息后，都会进行一次广播处理，让各模块能根据新消息来更新状态。当接收模块不需要向发送模块反馈任何信息时，使用 NSNotificationCenter 就可以实现上述需求。但是一旦发送模块需要根据接收模块返回的信息做一些额外处理，也就是实现一对多的双向通信， NSNotificationCenter 就不满足要求了。</p>

<p>最直接的解决方案是，针对这个业务场景自定义一个消息转发中心，让遵守特定协议的外围模块主动注册成为消息接收者。不过既然涉及到了特定协议，就注定了这个消息转发中心缺少通用性。这时候就可以参考下业界现成的方案了，让我们来看看 XMPPFramework 是如何解决这个问题的。</p>

<p>从文档中可以看出，作者希望 XMPPFramework 具备以下几个特性 ：</p>

<p>1、 将事件广播给多个监听者<br>
2、 易于扩展<br>
3、 选择的机制要支持返回值<br>
4、 选择的机制要易于编写线程安全代码<br></p>

<p>但是代理或者通知机制都不能很好地满足上述需求，所以 GCDMulticastDelegate 类应运而生。 使用这个类时，广播类需要初始化 GCDMulticastDelegate 对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">GCDMulticastDelegate</span> <span class="o">&lt;</span><span class="n">MyPluginDelegate</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">multicastDelegate</span><span class="p">;</span>
</span><span class='line'><span class="n">multicastDelegate</span> <span class="o">=</span> <span class="p">(</span><span class="n">GCDMulticastDelegate</span> <span class="o">&lt;</span><span class="n">MyPluginDelegate</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)[[</span><span class="n">GCDMulticastDelegate</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且添加增删代理的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addDelegate:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">delegate</span> <span class="nf">delegateQueue:</span><span class="p">(</span><span class="kt">dispatch_queue_t</span><span class="p">)</span><span class="nv">delegateQueue</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">multicastDelegate</span> <span class="nl">addDelegate</span><span class="p">:</span><span class="n">delegate</span> <span class="nl">delegateQueue</span><span class="p">:</span><span class="n">delegateQueue</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeDelegate:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">delegate</span> <span class="nf">delegateQueue:</span><span class="p">(</span><span class="kt">dispatch_queue_t</span><span class="p">)</span><span class="nv">delegateQueue</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">multicastDelegate</span> <span class="nl">removeDelegate</span><span class="p">:</span><span class="n">delegate</span> <span class="nl">delegateQueue</span><span class="p">:</span><span class="n">delegateQueue</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当广播对象需要向所有注册的代理发送消息时，可以用以下方式调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">multicastDelegate</span> <span class="nl">worker</span><span class="p">:</span><span class="nb">self</span> <span class="nl">didFinishSubTask</span><span class="p">:</span><span class="n">subtask</span> <span class="nl">inDuration</span><span class="p">:</span><span class="n">elapsed</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>只要注册的代理实现了这个方法，就可以接收到发送的信息。</p>

<p>接下来看下 GCDMulticastDelegate 的实现原理 。首先， GCDMulticastDelegate 会在外界添加代理时，创建 GCDMulticastDelegateNode 对象封装传入的代理以及回调执行队列，然后保存在 <code>delegateNodes</code> 数组中。当外界向 GCDMulticastDelegate 对象发送无法响应的消息时，它会针对此消息启动转发机制，并在 <code>Normal forwarding path</code> 这一步转发给所有能响应此消息的注册代理。以下是消息转发相关的源码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">methodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">GCDMulticastDelegateNode</span> <span class="o">*</span><span class="n">node</span> <span class="k">in</span> <span class="n">delegateNodes</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">id</span> <span class="n">nodeDelegate</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">delegate</span><span class="p">;</span>
</span><span class='line'>        <span class="cp">#if __has_feature(objc_arc_weak) &amp;&amp; !TARGET_OS_IPHONE</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">nodeDelegate</span> <span class="o">==</span> <span class="p">[</span><span class="bp">NSNull</span> <span class="n">null</span><span class="p">])</span>
</span><span class='line'>            <span class="n">nodeDelegate</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">unsafeDelegate</span><span class="p">;</span>
</span><span class='line'>        <span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">nodeDelegate</span> <span class="nl">methodSignatureForSelector</span><span class="p">:</span><span class="n">aSelector</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This causes a crash...</span>
</span><span class='line'>    <span class="c1">// return [super methodSignatureForSelector:aSelector];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This also causes a crash...</span>
</span><span class='line'>    <span class="c1">// return nil;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="nb">self</span> <span class="k">class</span><span class="p">]</span> <span class="nl">instanceMethodSignatureForSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">doNothing</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">forwardInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">origInvocation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">selector</span> <span class="o">=</span> <span class="p">[</span><span class="n">origInvocation</span> <span class="n">selector</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">foundNilDelegate</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">GCDMulticastDelegateNode</span> <span class="o">*</span><span class="n">node</span> <span class="k">in</span> <span class="n">delegateNodes</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">id</span> <span class="n">nodeDelegate</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">delegate</span><span class="p">;</span>
</span><span class='line'>        <span class="cp">#if __has_feature(objc_arc_weak) &amp;&amp; !TARGET_OS_IPHONE</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">nodeDelegate</span> <span class="o">==</span> <span class="p">[</span><span class="bp">NSNull</span> <span class="n">null</span><span class="p">])</span>
</span><span class='line'>            <span class="n">nodeDelegate</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">unsafeDelegate</span><span class="p">;</span>
</span><span class='line'>        <span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">nodeDelegate</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">selector</span><span class="p">])</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// All delegates MUST be invoked ASYNCHRONOUSLY.</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">NSInvocation</span> <span class="o">*</span><span class="n">dupInvocation</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">duplicateInvocation</span><span class="p">:</span><span class="n">origInvocation</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">dispatch_async</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">delegateQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span> <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">[</span><span class="n">dupInvocation</span> <span class="nl">invokeWithTarget</span><span class="p">:</span><span class="n">nodeDelegate</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">nodeDelegate</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">foundNilDelegate</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">foundNilDelegate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// At lease one weak delegate reference disappeared.</span>
</span><span class='line'>        <span class="c1">// Remove nil delegate nodes from the list.</span>
</span><span class='line'>        <span class="c1">// </span>
</span><span class='line'>        <span class="c1">// This is expected to happen very infrequently.</span>
</span><span class='line'>        <span class="c1">// This is why we handle it separately (as it requires allocating an indexSet).</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">NSMutableIndexSet</span> <span class="o">*</span><span class="n">indexSet</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableIndexSet</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">NSUInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">GCDMulticastDelegateNode</span> <span class="o">*</span><span class="n">node</span> <span class="k">in</span> <span class="n">delegateNodes</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">id</span> <span class="n">nodeDelegate</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">delegate</span><span class="p">;</span>
</span><span class='line'>            <span class="cp">#if __has_feature(objc_arc_weak) &amp;&amp; !TARGET_OS_IPHONE</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">nodeDelegate</span> <span class="o">==</span> <span class="p">[</span><span class="bp">NSNull</span> <span class="n">null</span><span class="p">])</span>
</span><span class='line'>                <span class="n">nodeDelegate</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">unsafeDelegate</span><span class="p">;</span>
</span><span class='line'>            <span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">nodeDelegate</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">indexSet</span> <span class="nl">addIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">delegateNodes</span> <span class="nl">removeObjectsAtIndexes</span><span class="p">:</span><span class="n">indexSet</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doesNotRecognizeSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Prevent NSInvalidArgumentException</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doNothing</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到， <code>-methodSignatureForSelector:</code> 方法遍历了 <code>delegateNodes</code> ，并返回首个有效的方法签名。当没有找到有效的方法签名时，会返回 <code>-doNothing</code> 方法的签名，以规避未知方法导致的崩溃。在得到方法签名并构造 NSInvocation 对象后， <code>-forwardInvocation:</code> 同样遍历了 <code>delegateNodes</code> ，并在特定的任务队列中执行代理回调。如果发现已被销毁的代理，则删除它对应的 GCDMulticastDelegateNode 对象。</p>

<h2>Record Message Call</h2>

<p>NSUndoManager 是 Foundation 框架中，一个基于命令模式设计的撤消栈管理类。通过这个类可以很方便地实现撤消、重做功能，比如以下苹果官方 Demo ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setMyObjectWidth:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">newWidth</span> <span class="nf">height:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">newHeight</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">float</span> <span class="n">currentWidth</span> <span class="o">=</span> <span class="p">[</span><span class="n">myObject</span> <span class="n">size</span><span class="p">].</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">currentHeight</span> <span class="o">=</span> <span class="p">[</span><span class="n">myObject</span> <span class="n">size</span><span class="p">].</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">newWidth</span> <span class="o">!=</span> <span class="n">currentWidth</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">newHeight</span> <span class="o">!=</span> <span class="n">currentHeight</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">undoManager</span> <span class="nl">prepareWithInvocationTarget</span><span class="p">:</span><span class="nb">self</span><span class="p">]</span>
</span><span class='line'>                <span class="nl">setMyObjectWidth</span><span class="p">:</span><span class="n">currentWidth</span> <span class="nl">height</span><span class="p">:</span><span class="n">currentHeight</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">undoManager</span> <span class="nl">setActionName</span><span class="p">:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Size Change&quot;</span><span class="p">,</span> <span class="s">@&quot;size undo&quot;</span><span class="p">)];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">myObject</span> <span class="nl">setSize</span><span class="p">:</span><span class="n">NSMakeSize</span><span class="p">(</span><span class="n">newWidth</span><span class="p">,</span> <span class="n">newHeight</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过调用代码块中 NSUndoManager 对象的 <code>undo</code> ， 可以“撤销”以上方法对 myObject 相关属性的设置。其中需要关注的是， NSUndoManager 是如何记录目标对象接收发生改变的信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">undoManager</span> <span class="nl">prepareWithInvocationTarget</span><span class="p">:</span><span class="nb">self</span><span class="p">]</span> <span class="nl">setMyObjectWidth</span><span class="p">:</span><span class="n">currentWidth</span> <span class="nl">height</span><span class="p">:</span><span class="n">currentHeight</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>NSUndoManager 是如何通过这种方式存储调用 <code>-setMyObjectWidth:height:</code> 这一动作呢？背后的关键在于 <code>-prepareWithInvocationTarget:</code>
所返回的对象，也就是 NSUndoManagerProxy 。 NSUndoManagerProxy 是 NSProxy 的子类，而 NSProxy 除了重载消息转发机制外，基本上就没有其他用法了。结合苹果官方文档， NSUndoManagerProxy 重载了 <code>-forwardInvocation:</code> 来帮助 NSUndoManager 获取目标的方法调用信息。到目前为止，这个应用场景并不难理解，不过为了能切合 NSUndoManagerProxy 的实际实现，这里还是结合 Foundation 框架反汇编出的代码，简单地实现这个功能。</p>

<p>首先，创建 TBVUndoProxy ， 重写它的消息转发机制：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">TBVUndoProxy</span> : <span class="bp">NSProxy</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">TBVUndoManager</span> <span class="o">*</span><span class="n">manager</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TBVUndoProxy</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">forwardInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">invocation</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_manager</span> <span class="nl">_forwardTargetInvocation</span><span class="p">:</span><span class="n">invocation</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">methodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">_manager</span> <span class="nl">_methodSignatureForTargetSelector</span><span class="p">:</span><span class="n">sel</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>结合 LLDB 中的调试信息， TBVUndoProxy 只是简单地把信息传送给了 TBVUndoManager 。再来看下将原生逻辑简化后的 TBVUndoManager 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">TBVUndoManager</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">_invocations</span><span class="p">;</span>
</span><span class='line'>    <span class="n">TBVUndoProxy</span> <span class="o">*</span><span class="n">_proxy</span><span class="p">;</span>
</span><span class='line'>    <span class="k">__weak</span> <span class="kt">id</span> <span class="n">_target</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">prepareWithInvocationTarget:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">target</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">undo</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">TBVUndoManager</span> <span class="nl">(Private)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">_forwardTargetInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">invocation</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">_methodSignatureForTargetSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TBVUndoManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_invocations</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">prepareWithInvocationTarget:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">target</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_target</span> <span class="o">=</span> <span class="n">target</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_proxy</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVUndoProxy</span> <span class="n">alloc</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_proxy</span><span class="p">.</span><span class="n">manager</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_proxy</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">undo</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_invocations</span><span class="p">.</span><span class="n">lastObject</span> <span class="n">invoke</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_invocations</span> <span class="nl">removeObject</span><span class="p">:</span><span class="n">_invocations</span><span class="p">.</span><span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">_forwardTargetInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">invocation</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">invocation</span> <span class="nl">setTarget</span><span class="p">:</span><span class="n">_target</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_invocations</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">invocation</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">_methodSignatureForTargetSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span> <span class="p">{</span>
</span><span class='line'>   <span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="n">signature</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">methodSignatureForSelector</span><span class="p">:</span><span class="n">sel</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">signature</span> <span class="o">&amp;&amp;</span> <span class="n">_target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">signature</span> <span class="o">=</span> <span class="p">[</span><span class="n">_target</span> <span class="nl">methodSignatureForSelector</span><span class="p">:</span><span class="n">sel</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">signature</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>TBVUndoManager 通过 <code>-prepareWithInvocationTarget:</code> 方法将发送消息对象保存为 <code>_target</code> 成员变量，然后创建了代理类 TBVUndoProxy 并返回给方法调用者。当外部调用者用这个返回值作为消息发送对象时， TBVUndoProxy 并没有对应的方法实现，于是就触发了消息转发机制， TBVUndoManager 则利用保存的 <code>_target</code> 返回有效的方法签名，并且保存重组了  TBVUndoProxy 回传的 NSInvocation。最终，当外界调用 <code>undo</code> 时，执行的就是保有 <code>_target</code> 和 <code>-prepareWithInvocationTarget:</code>  信息的 NSInvocation 。（原生代码将 NSInvocation 包装成 <code>_NSUndoInvocation</code> 、 <code>_NSUndoObject</code> 压入 <code>_NSUndoStack</code> 栈中）</p>

<h2>Intercept Any Message Call</h2>

<p>Aspects 是一个提供面向切片编程的库，它可以让开发者以无侵入的方式添加额外的功能。它提供了两个简单易用的入口，用于 hook 特定类或者特定对象的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">/// Adds a block of code before/instead/after the current `selector` for a specific class.</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">AspectToken</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">aspect_hookSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span>
</span><span class='line'>                           <span class="nf">withOptions:</span><span class="p">(</span><span class="n">AspectOptions</span><span class="p">)</span><span class="nv">options</span>
</span><span class='line'>                            <span class="nf">usingBlock:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">block</span>
</span><span class='line'>                                 <span class="nf">error:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Adds a block of code before/instead/after the current `selector` for a specific instance.</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">AspectToken</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">aspect_hookSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span>
</span><span class='line'>                           <span class="nf">withOptions:</span><span class="p">(</span><span class="n">AspectOptions</span><span class="p">)</span><span class="nv">options</span>
</span><span class='line'>                            <span class="nf">usingBlock:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">block</span>
</span><span class='line'>                                 <span class="nf">error:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">error</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>开发者可以用以下方式 hook 所有 UIViewController 实例对象的 <code>-viewWillAppear:</code> 方法 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="bp">UIViewController</span> <span class="nl">aspect_hookSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">viewWillAppear</span><span class="p">:)</span> <span class="nl">withOptions</span><span class="p">:</span><span class="n">AspectPositionAfter</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">AspectInfo</span><span class="o">&gt;</span> <span class="n">aspectInfo</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">animated</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;View Controller %@ will appear animated: %tu&quot;</span><span class="p">,</span> <span class="n">aspectInfo</span><span class="p">.</span><span class="n">instance</span><span class="p">,</span> <span class="n">animated</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="nl">error</span><span class="p">:</span><span class="nb">NULL</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为不知道使用者会 hook 什么方法，所以就无法像传统的 swizzling method 一样，预先编写对应的 IMP 去替换传入的方法。这时就需要内部实现一个统一调用机制，这个机制需要满足以下两点：</p>

<p>1、 为了能进行切片操作，需要让所有被 hook 方法的调用都通过一个统一的入口完成。<br>
2、 为了给原始实现和切片操作提供参数/返回值信息，这个入口要能获取被 hook 方法完整的签名信息。<br></p>

<p>综合上述两点以及 Normal forwarding path 的执行过程，可以比较轻松地联想到 <code>-forwardInvocation:</code> 方法非常适合作为这个入口。结合 Aspects 源码，来看下其实现中，和消息转发相关的两个步骤：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">aspect_prepareClassAndHookSelector</span><span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">selector</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">**</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSCParameterAssert</span><span class="p">(</span><span class="n">selector</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">klass</span> <span class="o">=</span> <span class="n">aspect_hookClass</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">targetMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">selector</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">targetMethodIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">targetMethod</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">aspect_isMsgForwardIMP</span><span class="p">(</span><span class="n">targetMethodIMP</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Make a method alias for the existing method implementation, it not already copied.</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">typeEncoding</span> <span class="o">=</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">targetMethod</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">SEL</span> <span class="n">aliasSelector</span> <span class="o">=</span> <span class="n">aspect_aliasForSelector</span><span class="p">(</span><span class="n">selector</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">klass</span> <span class="nl">instancesRespondToSelector</span><span class="p">:</span><span class="n">aliasSelector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">__unused</span> <span class="kt">BOOL</span> <span class="n">addedAlias</span> <span class="o">=</span> <span class="n">class_addMethod</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">aliasSelector</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">targetMethod</span><span class="p">),</span> <span class="n">typeEncoding</span><span class="p">);</span>
</span><span class='line'>            <span class="n">NSCAssert</span><span class="p">(</span><span class="n">addedAlias</span><span class="p">,</span> <span class="s">@&quot;Original implementation for %@ is already copied to %@ on %@&quot;</span><span class="p">,</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">selector</span><span class="p">),</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">aliasSelector</span><span class="p">),</span> <span class="n">klass</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// We use forwardInvocation to hook in.</span>
</span><span class='line'>        <span class="n">class_replaceMethod</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="n">aspect_getMsgForwardIMP</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">),</span> <span class="n">typeEncoding</span><span class="p">);</span>
</span><span class='line'>        <span class="n">AspectLog</span><span class="p">(</span><span class="s">@&quot;Aspects: Installed hook for -[%@ %@].&quot;</span><span class="p">,</span> <span class="n">klass</span><span class="p">,</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">selector</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">Class</span> <span class="nf">aspect_hookClass</span><span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="nb">self</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">**</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSCParameterAssert</span><span class="p">(</span><span class="nb">self</span><span class="p">);</span>
</span><span class='line'>   <span class="p">...</span>
</span><span class='line'>        <span class="n">aspect_swizzleForwardInvocation</span><span class="p">(</span><span class="n">subclass</span><span class="p">);</span>
</span><span class='line'>   <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">aspect_swizzleForwardInvocation</span><span class="p">(</span><span class="kt">Class</span> <span class="n">klass</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSCParameterAssert</span><span class="p">(</span><span class="n">klass</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// If there is no method, replace will act like class_addMethod.</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">originalImplementation</span> <span class="o">=</span> <span class="n">class_replaceMethod</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">forwardInvocation</span><span class="p">:),</span> <span class="p">(</span><span class="kt">IMP</span><span class="p">)</span><span class="n">__ASPECTS_ARE_BEING_CALLED__</span><span class="p">,</span> <span class="s">&quot;v@:@&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">originalImplementation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">class_addMethod</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="n">AspectsForwardInvocationSelectorName</span><span class="p">),</span> <span class="n">originalImplementation</span><span class="p">,</span> <span class="s">&quot;v@:@&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">AspectLog</span><span class="p">(</span><span class="s">@&quot;Aspects: %@ is now aspect aware.&quot;</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">(</span><span class="n">klass</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__ASPECTS_ARE_BEING_CALLED__</span><span class="p">(</span><span class="n">__unsafe_unretained</span> <span class="bp">NSObject</span> <span class="o">*</span><span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">selector</span><span class="p">,</span> <span class="bp">NSInvocation</span> <span class="o">*</span><span class="n">invocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSCParameterAssert</span><span class="p">(</span><span class="nb">self</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSCParameterAssert</span><span class="p">(</span><span class="n">invocation</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Before hooks.</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">classContainer</span><span class="p">.</span><span class="n">beforeAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">beforeAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Instead hooks.</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">respondsToAlias</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">.</span><span class="n">count</span> <span class="o">||</span> <span class="n">classContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">classContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>        <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">Class</span> <span class="n">klass</span> <span class="o">=</span> <span class="n">object_getClass</span><span class="p">(</span><span class="n">invocation</span><span class="p">.</span><span class="n">target</span><span class="p">);</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">respondsToAlias</span> <span class="o">=</span> <span class="p">[</span><span class="n">klass</span> <span class="nl">instancesRespondToSelector</span><span class="p">:</span><span class="n">aliasSelector</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">invocation</span> <span class="n">invoke</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">respondsToAlias</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">klass</span> <span class="o">=</span> <span class="n">class_getSuperclass</span><span class="p">(</span><span class="n">klass</span><span class="p">)));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// After hooks.</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">classContainer</span><span class="p">.</span><span class="n">afterAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">afterAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里在忽略掉 Aspects 创建子类等操作后，可以看出以上代码总共做了两件事：</p>

<p>1、对原始 <code>-forwardInvocation:</code> 方法执行 swizzling method ，将实现替换成 <code>__ASPECTS_ARE_BEING_CALLED__</code> ，以便在 <code>__ASPECTS_ARE_BEING_CALLED__</code> 函数中执行了额外的切片操作。<br>
2、对被 hook 的方法执行 swizzling method ，将实现替换成 <code>_objc_msgForward</code> / <code>_objc_msgForward_stret</code> ，以便触发被 hook 方法的消息转发机制，然后在步骤 1 的 <code>__ASPECTS_ARE_BEING_CALLED__</code> 函数中，进行切片操作。<br></p>

<p>值得一提的是， JSPatch 也是利用相似的机制，实现用 <code>defineClass</code> 接口任意替换一个类的方法的功能，不同的是 JSPatch 在它的 <code>__ASPECTS_ARE_BEING_CALLED__</code> 函数中，直接把参数传给了 JavaScript 的实现。</p>

<!-- ## Dependency Injection -->




<!-- ## 依靠协议的依赖注入 -->


<h2>小结</h2>

<p>消息转发有三步，分别是 Lazy method resolution （动态添加方法）、 Fast forwarding path （转发至可响应对象）、 Normal forwarding path （获取 NSInvocation 信息）。关于消息转发的应用，本文主要摘录了以下几个例子：</p>

<ul>
<li>Week Proxy</li>
<li>Delegate Proxy</li>
<li>Multicast Delegate</li>
<li>Record Message Call</li>
<li>Intercept Any Message Call</li>
</ul>


<p>可以看出，在这些例子中，都创建了一个代理类，并且这个代理类几乎没有实现自定义方法，或者直接是 NSProxy 的子类。这样，基本上所有的发送给代理类对象的消息，都会触发消息转发机制，而这个代理类就可以对拦截的消息做额外处理。</p>

<p>其中大部分应用场景都涉及到消息转发的第二三步，即 Fast forwarding path、Normal forwarding path 。特别是 Normal forwarding path ，配合 <code>_objc_msgForward</code> / <code>_objc_msgForward_stret</code> 函数强行进行消息转发，可以获取携带完整调用信息的 NSInvocation 。借助于 NSInvocation 的灵活性，开发者就可以完成一些非常有意思的事情了。</p>

<h2>参考</h2>

<p><a href="https://github.com/robbiehanson/XMPPFramework/wiki/MulticastDelegate">MulticastDelegate</a><br>
<a href="http://petersteinberger.com/blog/2013/smart-proxy-delegation/">Smart Proxy Delegation</a><br>
<a href="https://mikeash.com/pyblog/friday-qa-2009-03-27-objective-c-message-forwarding.html">Objective-C Message Forwarding</a><br>
<a href="http://blog.ibireme.com/2013/11/26/objective-c-messaging/">Objective-C 中的消息与消息转发</a> <br>
<a href="http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/">Objective-C 消息发送与转发机制原理</a><br>
<a href="https://codeshaker.blogspot.jp/2012/01/aop-delivered.html">AOP. Delivered</a> <br>
<a href="https://wereadteam.github.io/2016/06/30/Aspects/">面向切面编程之 Aspects 源码解析及应用</a><br>
<a href="https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3">JSPatch 实现原理详解</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[闲谈 IGListKit]]></title>
    <link href="http://triplecc.github.io/blog/2017-06-23-ru-he-kuai-su-da-jian-biao-dan-jie-mian/"/>
    <updated>2017-06-23T16:13:46+08:00</updated>
    <id>http://triplecc.github.io/blog/ru-he-kuai-su-da-jian-biao-dan-jie-mian</id>
    <content type="html"><![CDATA[<p>IGListKit 是 Instagram 在 16 年出品的一款针对 UICollectionView 的<strong><em>数据驱动</em></strong>框架，旨在帮助开发者更加快速、灵活地构建列表页面。</p>

<p>现存的绝大部分 Objective-C 框架，在集成进 Swift 项目中后，编写的代码依然会透出一股浓浓的 Objective-C 味，总感觉不纯正。而 IGListKit 虽然使用 Objective-C/C++ 开发，但是很好地照顾到了日渐增多的 Swift 开发者，不仅提供了大量 Swift 编写的 Demo （绝大部份），而且在 3.0.0 版本之后去除了 <code>IG</code> 前缀，更好地兼容了现版本 Swift 简洁的代码风格。所以，不管是 Swift 项目，还是 Objective-C 项目，引入 IGListKit 都是个不错的选择， 一来方便<strong><em>分离</em></strong>业务代码以降低复杂度，再者可以更好地编写<strong><em>粒度更大</em></strong>的复用单元目的，更多好处，只能在使用中体验了。</p>

<!--more-->


<h2>初识 IGListKit</h2>

<p>去年初次使用 IGListKit 时，除了数据驱动，它对传统 UICollectionView 所做的封装方式，以及流畅的编写体验同样让我感到惊艳和意外。</p>

<p>下面是 IGListKit 的层级结构图：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>                                  |---- Cell
</span><span class='line'>      |---- SectionController ----|
</span><span class='line'>      |                           |---- Cell      
</span><span class='line'>      |
</span><span class='line'>      |                           |---- Cell
</span><span class='line'>Adpter|---- SectionController ----|
</span><span class='line'>      |                           |---- Cell
</span><span class='line'>      |
</span><span class='line'>      |                           |---- Cell
</span><span class='line'>      |---- SectionController ----|
</span><span class='line'>                                  |---- Cell</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>刚入手 IGListKit ，可能会感觉这种分层似曾相识 &mdash;&mdash; UITableView 的 dataSource：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                              |---- Cell
</span><span class='line'>            |---- Section ----|
</span><span class='line'>            |                 |---- Cell      
</span><span class='line'>            |
</span><span class='line'>            |                 |---- Cell
</span><span class='line'>dataSource  |---- Section ----|
</span><span class='line'>            |                 |---- Cell
</span><span class='line'>            |
</span><span class='line'>            |                 |---- Cell
</span><span class='line'>            |---- Section ----|
</span><span class='line'>                              |---- Cell</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>但是上面的分层只是概念上的，并没有直接在 UITableViewSource ，也就是在代码的层面体现出来，编写业务代码时，Cell 和 Section 的 View 只是分散在两个不同代理方法中。如果要进行分层，需要手动对 UITableView 进行一层封装。</p>

<p>IGListKit 恰好替开发者封装了这层接口，在编写代码时， Cell 是挂在 SectionController 类中的。当存在多个不同类型的 SectionController 时，每个 SectionController 类管理属于自己的 Cell，这样做有利于开发者进行业务代码的分离，更进一步讲，有利于大粒度单元的复用。</p>

<p>IGListKit 十分强调<strong><em>页面粒度的细化</em></strong>，所以 SectionController <strong><em>只能</em></strong>挂载一个 unique Object ，然后根据这个 Object 去生成一个或多个 Cell 。一般情况下，一个（种） Object 只会填充一个（种） Cell ，一个（种） Cell 的业务由一个 SectionContoller 进行管理。 SectionController 还对应了一个 supplementaryViewSource ，用以提供 Section 的头尾视图。</p>

<p>不过也正是因为这种严格的机制，加上 <code>objectsForListAdapter:</code> 返回的必须是承载 unique 的 Object 的数组，通常也就是扁平的一维数组，导致 IGListKit 无法像 UITableView 的 dataSource 一样，通过嵌套的数据对象数组来描述 Section 。这也就造成了 IGListKit 在构建某些 Section 边界比较模糊的界面时，需要开发者做出比原生控件更多的配置和包装才能实现。比如以下情况：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">class</span> <span class="n">Message</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="nl">timestamp</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">let</span> <span class="nl">text</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="nl">timestamp</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">text</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">timestamp</span> <span class="o">=</span> <span class="n">timestamp</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要求列表以相同的 timestamp 为基准来划分 Section ，并在 Section 头部加上时间的 supplementaryView ，用 IGListKit 实现就会有点麻烦。对于多个不同 SectionController 的组合，虽然 IGListKit 专门提供了StackedSectionController ，不过同样的，StackedSectionController 对应的还是一个 Object，换句话说，其下多个 SectionController 绑定了同个 Object 。</p>

<p>不过瑕不掩瑜，IGListKit 还是提供了很多好用的特性，不管是 WorkRange，还是数据驱动的更新机制，都是值得一试的理由。</p>

<h2>使用 IGListKit 构建表单</h2>

<p>前面说的是可复用性强的列表页面，那么元素可复用性较差的表单界面 IGListKit 能够规避使用原生控件 dataSource 时 <code>if else</code> 判断过多的情况么？</p>

<p>目前的答案是不能，SectionController 只是打散了 Section 层面的业务逻辑，当一个 SectionController 中有许多种不同类型的 Cell 时，其表现出来的业务复杂度和使用原生控件的 dataSource 并没有显著差别。不过我们可以参照 RETableViewManager 给 IGListKit 再做一层简易的包装。</p>

<p><a href="https://github.com/romaonthego/RETableViewManager">RETableViewManager</a> 也是一个数据驱动的库，只不过针对的是 UITableView ，但是此数据驱动和 IGListKit 的数据驱动还是有比较明显的区别的。</p>

<p>在我看来，RETableViewManager 的强调的是<strong><em>展示固化样式</em></strong>，通过绑定各式各样的 Item 和 Cell ，来达到数据驱动的目的，开发者只要操纵 Item 即可构建界面。而 IGListKit 的强调的则是 <strong><em>操作Object 的唯一性</em></strong>，利用这个唯一性对特定 UICollectionView 进行增删改，凡是可以获取到 Object 的地方，就可以摒弃以前通过 NSIndexPaths 操作 UICollectionView 的方式，不过开发者还是需要和 Cell 打交道。</p>

<h2>包装 IGListKit</h2>

<p>以下代码，可以在 <a href="https://github.com/tobevoid/TBVListAdapterManager">TBVListAdapterManager</a> 中查看。</p>

<p>在包装 IGListKit 之前，先来看下 RETableViewManager 的层级结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>                                  <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span><span class='line'>                <span class="o">|----</span> <span class="n">Section</span> <span class="o">----|</span>
</span><span class='line'>                <span class="o">|</span>                 <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>     
</span><span class='line'>                <span class="o">|</span>
</span><span class='line'>                <span class="o">|</span>                 <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span><span class='line'><span class="n">TableViewManager</span><span class="o">|----</span> <span class="n">Section</span> <span class="o">----|</span>
</span><span class='line'>                <span class="o">|</span>                 <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span><span class='line'>                <span class="o">|</span>
</span><span class='line'>                <span class="o">|</span>                 <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span><span class='line'>                <span class="o">|----</span> <span class="n">Section</span> <span class="o">----|</span>
</span><span class='line'>                                  <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span></code></pre></td></tr></table></div></figure>


<p>上方的 Item 和 Cell 是互相绑定关系，在获取到数据对象 Object 后，可以通过设置 Item 去渲染 Cell。也就是说， Item 和 Object 是一对一，甚至是多对一的关系，这个和 IGListKit 刚好切合，因为它的 Cell 和 Object 就是一对一或者多对一的关系。结合上图， RETableViewManager 的 Section 可以对应多个 Object ，而 IGListKit 的 SectionController 只能对应一个 Object ，这就造成了无法将 SectionControler 直接封装成 Section 的窘境。</p>

<p>事实上，我更愿意把 SectionControler 描述成一组 Cell 的集合，而非传统意义上的 Section 。既然 SectionControler 和 Object 是一对一关系，那么 SectionController 本身是否也可以遵守 <code>IGListDiffable</code> 而成为一个 unique Object呢 ？从这个角度出发，可以初步看下封装后的层级结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>                                                      <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span><span class='line'>                                  <span class="o">|----</span> <span class="n">ItemBunch</span> <span class="o">----|</span>
</span><span class='line'>                                  <span class="o">|</span>                   <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span><span class='line'>                                  <span class="o">|</span>
</span><span class='line'>                <span class="o">|----</span> <span class="n">Section</span> <span class="o">----|</span>
</span><span class='line'>                <span class="o">|</span>                 <span class="o">|</span>         
</span><span class='line'>                <span class="o">|</span>                 <span class="o">|</span>                   <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span><span class='line'>                <span class="o">|</span>                 <span class="o">|----</span> <span class="n">ItemBunch</span> <span class="o">----|</span>
</span><span class='line'>                <span class="o">|</span>                                     <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span><span class='line'>                <span class="o">|</span>
</span><span class='line'>                <span class="o">|</span>
</span><span class='line'><span class="n">AdapterManager</span>  <span class="o">|</span>
</span><span class='line'>                <span class="o">|</span>
</span><span class='line'>                <span class="o">|</span>
</span><span class='line'>                <span class="o">|</span>
</span><span class='line'>                <span class="o">|</span>                                     <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span><span class='line'>                <span class="o">|</span>                 <span class="o">|----</span> <span class="n">ItemBunch</span> <span class="o">----|</span>
</span><span class='line'>                <span class="o">|</span>                 <span class="o">|</span>                   <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span><span class='line'>                <span class="o">|</span>                 <span class="o">|</span>
</span><span class='line'>                <span class="o">|----</span> <span class="n">Section</span> <span class="o">----|</span>
</span><span class='line'>                                  <span class="o">|</span>            
</span><span class='line'>                                  <span class="o">|</span>                   <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span><span class='line'>                                  <span class="o">|----</span> <span class="n">ItemBunch</span> <span class="o">----|</span>
</span><span class='line'>                                                      <span class="o">|----</span> <span class="n">Item</span> <span class="o">~~~~</span> <span class="n">Cell</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来看下具体的接口定义， ItemBunch 接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NS_ASSUME_NONNULL_BEGIN</span>
</span><span class='line'><span class="k">@class</span> <span class="nc">TBVListSection</span>;
</span><span class='line'><span class="k">@class</span> <span class="nc">TBVListItemBunch</span>;
</span><span class='line'><span class="k">@class</span> <span class="nc">TBVListItem</span>;
</span><span class='line'>
</span><span class='line'><span class="n">NS_SWIFT_NAME</span><span class="p">(</span><span class="n">ListItemBunchViewSource</span><span class="p">)</span>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">TBVListItemBunchViewSource</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@required</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">&lt;</span><span class="bp">NSString</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nl">supportedElementKindsForBunch</span><span class="p">:(</span><span class="n">TBVListItemBunch</span> <span class="o">*</span><span class="p">)</span><span class="n">bunch</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">__kindof</span> <span class="bp">UICollectionReusableView</span> <span class="o">*</span><span class="p">)</span><span class="nf">bunch:</span><span class="p">(</span><span class="n">TBVListItemBunch</span> <span class="o">*</span><span class="p">)</span><span class="nv">bunch</span> <span class="nf">viewForSupplementaryElementOfKind:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">elementKind</span> <span class="nf">atIndex:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">index</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nf">bunch:</span><span class="p">(</span><span class="n">TBVListItemBunch</span> <span class="o">*</span><span class="p">)</span><span class="nv">bunch</span> <span class="nf">sizeForSupplementaryViewOfKind:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">elementKind</span> <span class="nf">atIndex:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">index</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="n">NS_SWIFT_NAME</span><span class="p">(</span><span class="n">ListItemBunch</span><span class="p">)</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">TBVListItemBunch</span> : <span class="nc">IGListSectionController</span> <span class="o">&lt;</span><span class="n">IGListDiffable</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">@</span><span class="n">package</span>
</span><span class='line'>    <span class="k">__weak</span> <span class="n">TBVListSection</span> <span class="o">*</span><span class="n">_associatedSection</span><span class="p">;</span>
</span><span class='line'>    <span class="k">__weak</span> <span class="kt">id</span> <span class="o">&lt;</span><span class="n">TBVListItemBunchViewSource</span><span class="o">&gt;</span> <span class="n">_bunchViewSource</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nullable</span><span class="p">,</span> <span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="n">TBVListSection</span> <span class="o">*</span><span class="n">associatedSection</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nullable</span><span class="p">,</span> <span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">items</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSInteger</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithItem:</span><span class="p">(</span><span class="n">nullable</span> <span class="n">TBVListItem</span> <span class="o">*</span><span class="p">)</span><span class="nv">item</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addItem:</span><span class="p">(</span><span class="n">nonnull</span> <span class="n">TBVListItem</span> <span class="o">*</span><span class="p">)</span><span class="nv">item</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeItem:</span><span class="p">(</span><span class="n">nonnull</span> <span class="n">TBVListItem</span> <span class="o">*</span><span class="p">)</span><span class="nv">item</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reload</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reloadAnimated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reloadAnimated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="nf">completion:</span><span class="p">(</span><span class="n">nullable</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">))</span><span class="nv">completion</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="n">NS_ASSUME_NONNULL_END</span>
</span></code></pre></td></tr></table></div></figure>


<p>Item 的接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NS_ASSUME_NONNULL_BEGIN</span>
</span><span class='line'><span class="k">@class</span> <span class="nc">TBVListItemBunch</span>;
</span><span class='line'><span class="k">@class</span> <span class="nc">TBVListItem</span>;
</span><span class='line'>
</span><span class='line'><span class="n">NS_SWIFT_NAME</span><span class="p">(</span><span class="n">ListItemSelectBlock</span><span class="p">)</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">TBVListItemSelectBlock</span><span class="p">)(</span><span class="n">TBVListItem</span> <span class="o">*</span> <span class="n">_Nonnull</span> <span class="n">item</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">NS_SWIFT_NAME</span><span class="p">(</span><span class="n">ListItem</span><span class="p">)</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">TBVListItem</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">@</span><span class="n">package</span>
</span><span class='line'>    <span class="k">__weak</span> <span class="n">TBVListItemBunch</span> <span class="o">*</span><span class="n">_associatedBunch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nullable</span><span class="p">,</span> <span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="n">TBVListItemBunch</span> <span class="o">*</span><span class="n">associatedBunch</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">CGSize</span> <span class="n">cellSize</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSInteger</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nullable</span><span class="p">,</span> <span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">TBVListItemSelectBlock</span> <span class="n">selectBlock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reload</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reloadAnimated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reloadAnimated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="nf">completion:</span><span class="p">(</span><span class="n">nullable</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">))</span><span class="nv">completion</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="n">NS_ASSUME_NONNULL_END</span>
</span></code></pre></td></tr></table></div></figure>


<p>Section 的接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NS_ASSUME_NONNULL_BEGIN</span>
</span><span class='line'><span class="k">@class</span> <span class="nc">TBVListAdapterManager</span>;
</span><span class='line'><span class="k">@class</span> <span class="nc">TBVListItemBunch</span>;
</span><span class='line'><span class="k">@class</span> <span class="nc">TBVListSection</span>;
</span><span class='line'>
</span><span class='line'><span class="n">NS_SWIFT_NAME</span><span class="p">(</span><span class="n">ListSection</span><span class="p">)</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">TBVListSection</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">@</span><span class="n">package</span>
</span><span class='line'>    <span class="k">__weak</span> <span class="n">TBVListAdapterManager</span> <span class="o">*</span><span class="n">_associatedManager</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nullable</span><span class="p">,</span> <span class="k">weak</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="n">TBVListAdapterManager</span> <span class="o">*</span><span class="n">associatedManager</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nullable</span><span class="p">,</span> <span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">&lt;</span><span class="n">TBVListItemBunch</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">itemBunches</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSInteger</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nullable</span><span class="p">,</span> <span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">TBVListSectionConfiguration</span> <span class="o">*</span><span class="n">headerConfiguration</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nullable</span><span class="p">,</span> <span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">TBVListSectionConfiguration</span> <span class="o">*</span><span class="n">footerConfiguration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addItemBunch:</span><span class="p">(</span><span class="n">nonnull</span> <span class="n">TBVListItemBunch</span> <span class="o">*</span><span class="p">)</span><span class="nv">bunch</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeItemBunch:</span><span class="p">(</span><span class="n">nonnull</span> <span class="n">TBVListItemBunch</span> <span class="o">*</span><span class="p">)</span><span class="nv">bunch</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reload</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="n">NS_ASSUME_NONNULL_END</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，对于 IGListKitExamples 的 ObjcDemoViewController ，我可以重新用这套包装，去实现上文所说的 Section 边界比较模糊的的场景：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">TBVListAdapterManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBVListAdapterManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAdapter</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">adapter</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">manager</span> <span class="nl">registerItems</span><span class="p">:</span><span class="l">@[</span><span class="n">TBVS</span><span class="p">(</span><span class="n">InteractiveItem</span><span class="p">),</span> <span class="n">TBVS</span><span class="p">(</span><span class="n">PhotoItem</span><span class="p">),</span> <span class="n">TBVS</span><span class="p">(</span><span class="n">UserInfoItem</span><span class="p">),</span> <span class="n">TBVS</span><span class="p">(</span><span class="n">CommandItem</span><span class="p">)</span><span class="l">]</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">TBVListSection</span> <span class="o">*</span><span class="n">section</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVListSection</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>        <span class="n">section</span><span class="p">.</span><span class="n">headerConfiguration</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBVListSectionConfiguration</span> <span class="n">alloc</span><span class="p">]</span>
</span><span class='line'>                                       <span class="nl">initWithSupplementarySize</span><span class="p">:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>                                       <span class="nl">reusableClass</span><span class="p">:[</span><span class="n">TBVCollectionReusableView</span> <span class="k">class</span><span class="p">]</span>
</span><span class='line'>                                       <span class="nl">configureBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">TBVListSection</span> <span class="o">*</span><span class="n">section</span><span class="p">,</span> <span class="n">TBVCollectionReusableView</span> <span class="o">*</span><span class="n">reusableView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                           <span class="n">reusableView</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;2017-01-22 12:23:44&quot;</span><span class="p">;</span>
</span><span class='line'>                                       <span class="p">}];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">manager</span> <span class="nl">addSection</span><span class="p">:</span><span class="n">section</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">Post</span> <span class="o">*</span><span class="n">p</span> <span class="k">in</span> <span class="nb">self</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TBVListItemBunch</span> <span class="o">*</span><span class="n">bunch</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVListItemBunch</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">section</span> <span class="nl">addItemBunch</span><span class="p">:</span><span class="n">bunch</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">UserInfoItem</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="p">[</span><span class="n">UserInfoItem</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>                <span class="n">item</span><span class="p">.</span><span class="n">selectBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">TBVListItem</span> <span class="o">*</span> <span class="n">_Nonnull</span> <span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">item</span><span class="p">.</span><span class="n">cellSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">cellSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">item</span> <span class="n">reload</span><span class="p">];</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>                <span class="p">[</span><span class="n">bunch</span> <span class="nl">addItem</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">PhotoItem</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="p">[</span><span class="n">PhotoItem</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>                <span class="n">item</span><span class="p">.</span><span class="n">selectBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">TBVListItem</span> <span class="o">*</span> <span class="n">_Nonnull</span> <span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">item</span><span class="p">.</span><span class="n">cellSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">cellSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="n">item</span><span class="p">.</span><span class="n">associatedBunch</span> <span class="n">reload</span><span class="p">];</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>                <span class="p">[</span><span class="n">bunch</span> <span class="nl">addItem</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">InteractiveItem</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="p">[</span><span class="n">InteractiveItem</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>                <span class="n">item</span><span class="p">.</span><span class="n">selectBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">TBVListItem</span> <span class="o">*</span> <span class="n">_Nonnull</span> <span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">item</span><span class="p">.</span><span class="n">cellSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">cellSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">item</span><span class="p">.</span><span class="n">associatedBunch</span><span class="p">.</span><span class="n">associatedSection</span> <span class="n">reload</span><span class="p">];</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>                <span class="p">[</span><span class="n">bunch</span> <span class="nl">addItem</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">c</span> <span class="k">in</span> <span class="n">p</span><span class="p">.</span><span class="n">comments</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">TBVCommandItem</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVCommandItem</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>                <span class="n">item</span><span class="p">.</span><span class="n">commant</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>                <span class="p">[</span><span class="n">bunch</span> <span class="nl">addItem</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">manager</span> <span class="o">=</span> <span class="n">manager</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">manager</span> <span class="n">reload</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于上述固化样式类的数据驱动模型，我认为实现<strong><em>&ldquo;自治&rdquo;</em></strong>是核心。这就要求通过 Item 可以访问 ItemBunch， 通过 ItemBunch 可以访问 Section，Section、AdapterManger 同理 （链表式的访问）。  这样做的好处是，可以通过 Item 、ItemBunch 和 Section 直接刷新自身，而不需要去手动获取 tableView / collectionView 再结合 NSIndexPaths 去刷新对应条目，让<strong><em>所有的变动通过操作数据完成</em></strong>；而且针对复杂业务，我还是可以很方便地回到 IGListKit 利用 SectionController 处理业务的那种方式，将业务分散到 Section 子类中。</p>

<h2>小结</h2>

<p>IGListKit 强调的<strong><em>页面粒度的细化</em></strong>恰恰是我所推崇的，一旦样式积木多了之后，构造页面的方式就具备了无限的可能性。对于部分展示逻辑偏多、交互偏少的 App 来说，利用固化样式来精简业务代码是个不错的选择。虽然“固化”一词看起来和“灵活”相反，但事实上并非如此，一定程度上的固化恰恰能让界面的编写更加灵活。</p>

<p>如果将固化的样式想像成大粒度的 HTML 标签，那么就可以把 App 当作一个移动端的浏览器，而让后台下发固化样式以堆砌界面。</p>

<p>另外，在构造样式 / Item 的时候，<strong><em>面向接口编程</em></strong>能给后期扩展带来不小的灵活性。换句话说，多用 Protocol ,少用继承。</p>

<h2>参考</h2>

<p><a href="https://instagram.github.io/IGListKit/">IGListKit</a><br>
<a href="https://www.raywenderlich.com/147162/iglistkit-tutorial-better-uicollectionviews">IGListKit Tutorial: Better UICollectionViews</a><br>
<a href="https://imtx.me/archives/2091.html">从 Instagram 开源 IGListKit 聊聊 iOS 开发趋势</a><br>
<a href="http://www.infoq.com/cn/presentations/three-little-stories-behind-the-shise-app">精益创业实践——食色App背后的三个小故事</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods和Localization]]></title>
    <link href="http://triplecc.github.io/blog/2017-06-08-cocoapodshe-localization/"/>
    <updated>2017-06-08T09:23:01+08:00</updated>
    <id>http://triplecc.github.io/blog/cocoapodshe-localization</id>
    <content type="html"><![CDATA[<p>一直没有很好地理清 CocoaPods 对图片、NIB等资源的管理方式，趁着跟进 “智齿” 国际化失效问题，摘录下浏览的相关资料。另外吐槽下 “智齿”， 这家的 iOS SDK 是我目前集成的所有 SDK 中，对开发者最不友好的了。</p>

<p>问题来了：在使用 CocoaPods 集成“智齿”后，“智齿”的国际化信息就一直显示英文版本，即使系统语言设置成中文。但是如果不通过 CocoaPods，直接把 SDK 拉进工程中，国际化信息就又生效了。在咨询其开发人员无果后，只能自己慢慢排雷了。由于问题只在 “通过 CocoaPods 引入 SDK” 这种情况下出现，所以要想彻底解决这个问题，就需要明确 CocoaPods 是如何对国际化资源进行管理的。</p>

<!--more-->


<h2>CocoaPods 如何管理资源</h2>

<p>从 <a href="http://blog.cocoapods.org/CocoaPods-0.36/">CocoaPods 0.36 的 release 文档</a> 看，它对资源的管理方式，取决于是否以 Frameworks 的方式对 CocoaPods 进行集成，从 Podfile 层面看，就是是否使用了 use_frameworks! 。</p>

<h4>以 Static Libraries 的方式集成</h4>

<p><strong>CocoaPods 会把所有的资源塞进 app bundle</strong> ，开发者可以使用 <code>[NSBundle mainBundle]</code> 访问里面的所有资源，也可以从生成 product 的根目录查看资源（显示包内容后）。由于苹果不允许 Swift 代码被编译成静态库，所以如果 Swift 项目想使用 CocoaPods 管理源码的话，是一定要使用 Dynamic Frameworks 方式进行集成的。一般来说， Objective-C 项目都是使用此方式集成。</p>

<h4>以 Dynamic Frameworks 的方式集成</h4>

<p><strong>CocoaPods 会把资源塞进对应的 Frameworks</strong> ，只有通过指定 Frameworks 的 bundle 才能访问到资源：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Objective-C</span>
</span><span class='line'><span class="p">[</span><span class="bp">NSBundle</span> <span class="nl">bundleForClass</span><span class="p">:</span><span class="o">&lt;</span><span class="err">#</span><span class="n">ClassFromPodspec</span><span class="err">#</span><span class="o">&gt;</span><span class="p">]</span>
</span><span class='line'><span class="c1">// Swift</span>
</span><span class='line'><span class="bp">NSBundle</span><span class="p">(</span><span class="nl">forClass</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="n">ClassFromPodspec</span><span class="err">#</span><span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式对于 Static Libraries 和 Dynamic Frameworks 都是有效的。如果编写的框架包含一些资源的话，内部访问资源时，应该以这种方式指定确切的 bundle ，因为无法确定开发者是以何种方式集成你的框架。</p>

<p>顺带说下，由于没有很好的方式来构建<strong>传递依赖</strong>中含有 static libraries（如果不是传递依赖，即使存在含有 static libraries 的 Pod ，构建时还是会直接归并入最终的可执行文件中），使用 CocoaPods 时，选择哪种集成方式对于单个 target 来说是一件 “all or  nothing” 的事情，也就是说开发者无法<strong>主动</strong>针对个别 Pod 采用不同的集成方式。（如有需要，可以使用 <a href="https://github.com/Carthage/Carthage">carthage</a>）</p>

<p>举个例子：假如当前主工程依赖了 PodA 、 PodB ，而 PodA 依赖了 PodB，并且 PodB 中有静态库 (这里需要注意的是，有些 SDK 是 .framework 格式，但是本质还是静态库，可用 file 命令查看, 参考 <a href="https://stackoverflow.com/questions/32591878/ios-is-it-a-static-or-a-dynamic-framework">iOS is it a static or a dynamic framework?</a>)，那么在执行 <code>pod update</code> 时，就会报 <code>transitive dependencies that include static binaries</code> 错误。这样在组件化时，就很难引入使用 Swift 编写的 Pod 了，因为如果项目足够大，就肯定会存在<strong>传递依赖</strong>中含有 static libraries 的情况。</p>

<h2>SobotKit 存在的问题</h2>

<p>SobotKit 是“智齿”的 iOS SDK ，下面是 SobotKit podspec 文件的部分代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">s</span><span class="p">.</span><span class="n">frameworks</span> <span class="o">=</span>  <span class="s">&quot;AudioToolbox&quot;</span><span class="p">,</span><span class="s">&quot;AssetsLibrary&quot;</span><span class="p">,</span><span class="s">&quot;SystemConfiguration&quot;</span><span class="p">,</span><span class="s">&quot;AVFoundation&quot;</span><span class="p">,</span><span class="s">&quot;MobileCoreServices&quot;</span>
</span><span class='line'><span class="n">s</span><span class="p">.</span><span class="n">library</span>   <span class="o">=</span> <span class="err">&#39;</span><span class="n">z</span><span class="mf">.1.2.5</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># s.resource  = &quot;icon.png&quot;</span>
</span><span class='line'><span class="n">s</span><span class="p">.</span><span class="n">resources</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">SobotKit</span><span class="p">.</span><span class="n">bundle</span><span class="sc">&#39;,&#39;</span><span class="n">ZCEmojiExpression</span><span class="p">.</span><span class="n">bundle</span><span class="sc">&#39;,&#39;</span><span class="n">en</span><span class="p">.</span><span class="n">lproj</span><span class="o">/</span><span class="n">SobotLocalizable</span><span class="p">.</span><span class="n">strings</span><span class="sc">&#39;,&#39;</span><span class="n">zh</span><span class="o">-</span><span class="n">Hans</span><span class="p">.</span><span class="n">lproj</span><span class="o">/</span><span class="n">SobotLocalizable</span><span class="p">.</span><span class="n">strings</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">s</span><span class="p">.</span><span class="n">ios</span><span class="p">.</span><span class="n">vendored_frameworks</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">SobotKit</span><span class="p">.</span><span class="n">framework</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是以 Static Libraries 的方式集成进工程后的目录结构：</p>

<p><img src="http://triplecc.github.io/images/Snip20170608_1.png" alt="" />
<img src="http://triplecc.github.io/images/Snip20170608_4.png" alt="" /></p>

<p>构建工程后，进入 product 根目录。可以看到，虽然在目录中，Pod 增加了 en.lproj、zh-Hans 两个文件夹，但是拷贝到 app bundle 后，却并没有这两个文件夹，同名的 .strings 文件相互覆盖了。</p>

<p><img src="http://triplecc.github.io/images/Snip20170608_5.png" alt="" /></p>

<p>下面是修改后的 podspec：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">s</span><span class="p">.</span><span class="n">resources</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">SobotKit</span><span class="p">.</span><span class="n">bundle</span><span class="sc">&#39;,&#39;</span><span class="n">ZCEmojiExpression</span><span class="p">.</span><span class="n">bundle</span><span class="sc">&#39;,&#39;</span><span class="o">*</span><span class="p">.</span><span class="n">lproj</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>构建工程后，可以看下目录：</p>

<p><img src="http://triplecc.github.io/images/Snip20170608_3.png" alt="" />
<img src="http://triplecc.github.io/images/Snip20170608_4.png" alt="" /></p>

<p>构建后的 product 根目录：</p>

<p><img src="http://triplecc.github.io/images/Snip20170608_6.png" alt="" /></p>

<p>最终结果表明， SobotKit 的 podspec 写错了。不过工程的目录结构还是让我迷惑了很久，Pod 目录里面居然有实体文件，着实让我走了点弯路。</p>

<h2>小结</h2>

<p>在明确构建当前工程会将 SobotKit 的相关资源直接塞到 app bundle 后，排查问题就变得简单了。因为在我这个项目的上下文中，直接把 SobotKit 拉进主工程和通过 Pod 集成，其资源最终存放的的位置都是 app bundle ，这也就排除了 SobotKit 内部调用Localizaton宏错误这一猜测。</p>

<p>CocoaPods 推荐以 Dynamic Frameworks 的方式集成，不过要注意的是引用资源时，要指定对应的 bundle 。</p>

<h2>补充</h2>

<p>2017.7.15: Pod 中稀奇古怪的 xib 访问不到崩溃问题，除了连线错误外，80% 以上都是因为 podspec 资源管理方式和实际代码调用方式不一致造成。</p>

<h2>参考</h2>

<p><a href="http://blog.xianqu.org/2015/08/pod-resources/">给 Pod 添加资源文件</a><br>
<a href="http://blog.cocoapods.org/CocoaPods-0.36/">CocoaPods 0.36 - Framework and Swift Support</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩玩逆向之拦截钉钉消息已读状态]]></title>
    <link href="http://triplecc.github.io/blog/2017-05-13-wan-wan-ni-xiang-zhi-lan-jie-ding-ding-xin-xi-de-yi-du-zhuang-tai/"/>
    <updated>2017-05-13T16:54:37+08:00</updated>
    <id>http://triplecc.github.io/blog/wan-wan-ni-xiang-zhi-lan-jie-ding-ding-xin-xi-de-yi-du-zhuang-tai</id>
    <content type="html"><![CDATA[<blockquote><p>流光容易把人抛，红了樱桃，绿了芭蕉</p></blockquote>

<p>一个月前的某一天，百无聊赖的我在整理房间的时候，偶然翻开了一本积灰的“小黄书”，看到首页作者的赠语，眼前不禁浮现两年前，几经波折辗转到上海的我兴致勃勃勃勃地拜托<a href="http://www.swiftyper.com/about/">小锅</a>让他的直属老大狗神 (本书作者之一) ，给刚买的这本《iOS应用逆向工程》签名的场景，百味杂陈。说来惭愧，我一直都没有好好地看过这本书，等回过头来，不知不觉已经过去两年了。这篇文章致那个曾经那个能够静心看书的少年。</p>

<!--more-->


<h2>灵感</h2>

<p>钉钉是一款针对企业日常工作交流的 App ，因为是针对企业协作，所以不同于一般的 IM 软件，比如微信，钉钉增加了对消息读取状态的监控。简单来说就是同事发送一条消息后，如果我打开 App ，进入聊天界面查看了这条消息，那么该同事就会在这条消息旁边看到“已读”字样，如下图：</p>

<p><img src="http://triplecc.github.io/images/Snip20170513_1.png" alt="" />
<img src="http://triplecc.github.io/images/Snip20170513_4.png" alt="" /></p>

<p>这个已读功能在工作的时候还是挺有作用的，能够知道同事是否已经知晓的相关事务。不过总会存在某些时候，我们不希望让对方知道消息已经被读取了。这就需要对 App 进行一些处理了。</p>

<h2>准备工作</h2>

<p>因为逆向基本工具在《iOS应用逆向工程》中罗列地非常清楚，所以对于一些基本环境的配置，这里就略过了，只简单介绍下这次逆向需要的工具。</p>

<table>
<thead>
<tr>
<th> 工具          </th>
<th style="text-align:center;">    本次逆向作用     </th>
</tr>
</thead>
<tbody>
<tr>
<td> dumpdecrypted <br> Clutch           </td>
<td style="text-align:center;"> 对 App 进行砸壳，使之可进行反汇编及 dump </td>
</tr>
<tr>
<td> class-dump           </td>
<td style="text-align:center;"> 获取 App 的 class 信息 （ Xcode 打开方便查看） </td>
</tr>
<tr>
<td> Hopper Disassembler    </td>
<td style="text-align:center;"> 反汇编器，查看 App 的汇编代码 </td>
</tr>
<tr>
<td> usbmuxd    </td>
<td style="text-align:center;"> <a href="http://localhost:4000/blog/2017-04-09-shi-yong-usbmuxdlian-jie-iphone/">映射使用 USB 连接的逆向设备端口到本地</a> </td>
</tr>
<tr>
<td> OpenSSH         </td>
<td style="text-align:center;"> 让越狱设备上具备 ssh 服务 </td>
</tr>
<tr>
<td> cycript         </td>
<td style="text-align:center;"> 在目标 App 进程中测试函数，也可用来定位感兴趣对象 </td>
</tr>
<tr>
<td> debugserver         </td>
<td style="text-align:center;"> 调试服务器，可让 lldb 连接 iOS 进行远程调试 </td>
</tr>
<tr>
<td> lldb <br> chisel           </td>
<td style="text-align:center;"> lldb 调试器，不多说 <br> FB 出品的 lldb 调试插件，不仅在 Xcode 正向开发中很有用，逆向也酸爽至极 </td>
</tr>
<tr>
<td> theos           </td>
<td style="text-align:center;"> 编写Tweak，可对逆向代码进行编译打包，并以 dylib 的形式安装到越狱设备中 </td>
</tr>
</tbody>
</table>


<p>接下来记录下整个逆向工作流程。</p>

<h4>对 App 进行砸壳</h4>

<p>本次砸壳采用的工具是书中演示的 dumpdecrypted。</p>

<p>1、首先通过 ssh 连接到 iOS 设备</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">➜</span>  <span class="n">dumpdecrypted</span> <span class="nl">git</span><span class="p">:(</span><span class="n">master</span><span class="p">)</span> <span class="err">✗</span> <span class="n">iproxy</span> <span class="mi">2223</span> <span class="mi">22</span> <span class="o">&amp;</span>
</span><span class='line'><span class="err">➜</span>  <span class="n">dumpdecrypted</span> <span class="nl">git</span><span class="p">:(</span><span class="n">master</span><span class="p">)</span> <span class="err">✗</span> <span class="n">ssh</span> <span class="n">root</span><span class="p">@</span><span class="n">localhost</span> <span class="o">-</span><span class="n">p</span> <span class="mi">2223</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、使用 ps 和 grep 找出目标 App 可执行文件路径</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">iPhone</span><span class="p">:</span><span class="o">~</span> <span class="n">root</span><span class="err">#</span> <span class="n">ps</span> <span class="o">-</span><span class="n">A</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">Application</span>
</span><span class='line'> <span class="mi">1774</span> <span class="o">??</span>         <span class="mi">1</span><span class="o">:</span><span class="mf">06.02</span> <span class="o">/</span><span class="n">Applications</span><span class="o">/</span><span class="n">InCallService</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">InCallService</span>
</span><span class='line'> <span class="mi">4147</span> <span class="o">??</span>         <span class="mi">1</span><span class="o">:</span><span class="mf">04.34</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="mi">60</span><span class="n">B29D5D</span><span class="o">-</span><span class="mi">2360</span><span class="o">-</span><span class="mi">4</span><span class="n">C01</span><span class="o">-</span><span class="n">A49F</span><span class="o">-</span><span class="mi">8</span><span class="n">CA87C752EFE</span><span class="o">/</span><span class="n">DingTalk</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">DingTalk</span>
</span><span class='line'> <span class="mi">4217</span> <span class="o">??</span>         <span class="mi">0</span><span class="o">:</span><span class="mf">04.58</span> <span class="o">/</span><span class="n">Applications</span><span class="o">/</span><span class="n">Weather</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">PlugIns</span><span class="o">/</span><span class="n">WeatherAppTodayWidget</span><span class="p">.</span><span class="n">appex</span><span class="o">/</span><span class="n">WeatherAppTodayWidget</span>
</span><span class='line'> <span class="mi">4220</span> <span class="o">??</span>         <span class="mi">0</span><span class="o">:</span><span class="mf">02.39</span> <span class="o">/</span><span class="n">Applications</span><span class="o">/</span><span class="n">Maps</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">PlugIns</span><span class="o">/</span><span class="n">MapsWidget</span><span class="p">.</span><span class="n">appex</span><span class="o">/</span><span class="n">MapsWidget</span>
</span><span class='line'> <span class="mi">4223</span> <span class="o">??</span>         <span class="mi">0</span><span class="o">:</span><span class="mf">02.50</span> <span class="o">/</span><span class="n">private</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="n">D4438959</span><span class="o">-</span><span class="mi">3</span><span class="n">D50</span><span class="o">-</span><span class="mi">4</span><span class="n">D5B</span><span class="o">-</span><span class="n">AFD5</span><span class="o">-</span><span class="mi">635</span><span class="n">BAE010F57</span><span class="o">/</span><span class="n">Pin</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">PlugIns</span><span class="o">/</span><span class="n">PinToday</span><span class="p">.</span><span class="n">appex</span><span class="o">/</span><span class="n">PinToday</span>
</span><span class='line'> <span class="mi">4233</span> <span class="o">??</span>         <span class="mi">0</span><span class="o">:</span><span class="mf">00.78</span> <span class="o">/</span><span class="n">private</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="n">D4438959</span><span class="o">-</span><span class="mi">3</span><span class="n">D50</span><span class="o">-</span><span class="mi">4</span><span class="n">D5B</span><span class="o">-</span><span class="n">AFD5</span><span class="o">-</span><span class="mi">635</span><span class="n">BAE010F57</span><span class="o">/</span><span class="n">Pin</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">PlugIns</span><span class="o">/</span><span class="n">PinCleaner</span><span class="p">.</span><span class="n">appex</span><span class="o">/</span><span class="n">PinCleaner</span>
</span><span class='line'> <span class="mi">4316</span> <span class="o">??</span>         <span class="mi">0</span><span class="o">:</span><span class="mf">01.70</span> <span class="o">/</span><span class="n">Applications</span><span class="o">/</span><span class="n">MobileCal</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">PlugIns</span><span class="o">/</span><span class="n">CalendarWidget</span><span class="p">.</span><span class="n">appex</span><span class="o">/</span><span class="n">CalendarWidget</span>
</span><span class='line'> <span class="mi">4319</span> <span class="o">??</span>         <span class="mi">0</span><span class="o">:</span><span class="mf">01.99</span> <span class="o">/</span><span class="n">private</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="mi">61</span><span class="n">C2E8D7</span><span class="o">-</span><span class="mi">4</span><span class="n">C2D</span><span class="o">-</span><span class="mi">4323</span><span class="o">-</span><span class="n">A357</span><span class="o">-</span><span class="mf">7F</span><span class="n">AB9AE33339</span><span class="o">/</span><span class="n">WizIPhone</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">PlugIns</span><span class="o">/</span><span class="n">WizNoteIPhoneToday</span><span class="p">.</span><span class="n">appex</span><span class="o">/</span><span class="n">WizNoteIPhoneToday</span>
</span><span class='line'> <span class="mi">4322</span> <span class="o">??</span>         <span class="mi">0</span><span class="o">:</span><span class="mf">01.28</span> <span class="o">/</span><span class="n">private</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="n">F576BB21</span><span class="o">-</span><span class="n">A1F2</span><span class="o">-</span><span class="mi">42</span><span class="n">B8</span><span class="o">-</span><span class="n">A18F</span><span class="o">-</span><span class="n">D2AFCE9E78D8</span><span class="o">/</span><span class="n">AlipayWallet</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">PlugIns</span><span class="o">/</span><span class="n">APTodayWidget</span><span class="p">.</span><span class="n">appex</span><span class="o">/</span><span class="n">APTodayWidget</span>
</span><span class='line'> <span class="mi">4418</span> <span class="o">??</span>         <span class="mi">0</span><span class="o">:</span><span class="mf">28.22</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="mf">3654E1</span><span class="n">CC</span><span class="o">-</span><span class="n">CEE2</span><span class="o">-</span><span class="mi">44</span><span class="n">DB</span><span class="o">-</span><span class="n">A7E6</span><span class="o">-</span><span class="n">B4268A59F3C6</span><span class="o">/</span><span class="n">WeChat</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">WeChat</span>
</span><span class='line'> <span class="mi">4429</span> <span class="o">??</span>         <span class="mi">0</span><span class="o">:</span><span class="mf">08.09</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="n">F576BB21</span><span class="o">-</span><span class="n">A1F2</span><span class="o">-</span><span class="mi">42</span><span class="n">B8</span><span class="o">-</span><span class="n">A18F</span><span class="o">-</span><span class="n">D2AFCE9E78D8</span><span class="o">/</span><span class="n">AlipayWallet</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">AlipayWallet</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里由于先前并不知道钉钉的可执行文件名，所以直接用 Application 关键字对所有进程进行过滤，知道后就可以直接用 DingTalk 进行过滤了 。包含钉钉可执行文件路径的一行为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="mi">4147</span> <span class="o">??</span>         <span class="mi">1</span><span class="o">:</span><span class="mf">04.34</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="mi">60</span><span class="n">B29D5D</span><span class="o">-</span><span class="mi">2360</span><span class="o">-</span><span class="mi">4</span><span class="n">C01</span><span class="o">-</span><span class="n">A49F</span><span class="o">-</span><span class="mi">8</span><span class="n">CA87C752EFE</span><span class="o">/</span><span class="n">DingTalk</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">DingTalk</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、使用 cycript 获取钉钉 Document 文件夹路径</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">iPhone</span><span class="p">:</span><span class="o">~</span> <span class="n">root</span><span class="err">#</span> <span class="n">cycript</span> <span class="o">-</span><span class="n">p</span>  <span class="mi">4147</span>
</span><span class='line'><span class="n">cy</span><span class="err">#</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="nb">YES</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="s">@&quot;/var/mobile/Containers/Data/Application/93BEEF52-2DE2-4687-9986-E50CBD961BB2/Documents&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 <code>cycript -p + pid / 可执行文件名</code> 就可以在目标 App 的进程下运行方法了。在这一步顺便把钉钉的 Bundle ID 给打印出来，后面 thoes 会用到</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">cy</span><span class="err">#</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundleIdentifier</span><span class="p">]</span>
</span><span class='line'><span class="s">@&quot;com.laiwang.DingTalk&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>4、将 dumpdecrypted.dylib 拷贝到 Documents 目录下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">➜</span>  <span class="n">dumpdecrypted</span> <span class="nl">git</span><span class="p">:(</span><span class="n">master</span><span class="p">)</span> <span class="err">✗</span> <span class="n">scp</span> <span class="o">-</span><span class="n">P</span> <span class="mi">2223</span>  <span class="n">dumpdecrypted</span><span class="p">.</span><span class="n">dylib</span> <span class="n">root</span><span class="p">@</span><span class="nl">localhost</span><span class="p">:</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">Containers</span><span class="o">/</span><span class="n">Data</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="mi">93</span><span class="n">BEEF52</span><span class="o">-</span><span class="mi">2</span><span class="n">DE2</span><span class="o">-</span><span class="mi">4687</span><span class="o">-</span><span class="mi">9986</span><span class="o">-</span><span class="n">E50CBD961BB2</span><span class="o">/</span><span class="n">Documents</span>
</span></code></pre></td></tr></table></div></figure>


<p>5、开始砸壳</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">iPhone</span><span class="p">:</span><span class="o">~</span> <span class="n">root</span><span class="err">#</span> <span class="n">cd</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">Containers</span><span class="o">/</span><span class="n">Data</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="mi">93</span><span class="n">BEEF52</span><span class="o">-</span><span class="mi">2</span><span class="n">DE2</span><span class="o">-</span><span class="mi">4687</span><span class="o">-</span><span class="mi">9986</span><span class="o">-</span><span class="n">E50CBD961BB2</span><span class="o">/</span><span class="n">Documents</span>
</span><span class='line'><span class="nl">iPhone</span><span class="p">:</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">Containers</span><span class="o">/</span><span class="n">Data</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="mi">93</span><span class="n">BEEF52</span><span class="o">-</span><span class="mi">2</span><span class="n">DE2</span><span class="o">-</span><span class="mi">4687</span><span class="o">-</span><span class="mi">9986</span><span class="o">-</span><span class="n">E50CBD961BB2</span><span class="o">/</span><span class="n">Documents</span> <span class="n">root</span><span class="err">#</span> <span class="n">DYLD_INSERT_LIBRARIES</span><span class="o">=</span><span class="n">dumpdecrypted</span><span class="p">.</span><span class="n">dylib</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="mi">60</span><span class="n">B29D5D</span><span class="o">-</span><span class="mi">2360</span><span class="o">-</span><span class="mi">4</span><span class="n">C01</span><span class="o">-</span><span class="n">A49F</span><span class="o">-</span><span class="mi">8</span><span class="n">CA87C752EFE</span><span class="o">/</span><span class="n">DingTalk</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">DingTalk</span>
</span></code></pre></td></tr></table></div></figure>


<p>砸壳后，当前目录下会有一个 DingTalk.decrypted 文件，将这个砸壳之后的文件拷贝到电脑上进行反汇编及 class-dump 。</p>

<h4>进行 class-dump 及反汇编</h4>

<p>1、进入 DingTalk.decrypted 所在目录，执行 class-dump</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">➜</span>  <span class="n">DingTalk</span> <span class="k">class</span><span class="o">-</span><span class="n">dump</span> <span class="o">-</span><span class="n">S</span> <span class="o">-</span><span class="n">s</span>  <span class="o">-</span><span class="n">H</span> <span class="o">-</span><span class="n">o</span> <span class="n">DTClassDump</span>  <span class="n">DingTalk</span><span class="p">.</span><span class="n">decrypted</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到目录下多了 DTClassDump 文件夹，打开这个文件夹，全选里面的头文件，用 Xcode 打开。</p>

<p>2、打开 Hopper Disassembler 并将 DingTalk.decrypted 拖进面板中，Hopper Disassembler 会自动识别 DingTalk.decrypted 对应的 CPU 体系结构。确定进行后续操作后，Hopper Disassembler就开始进行反汇编了。反汇编的时间可能会<strong>有点长</strong>，所以最好把反汇编之后的 hop 文件保存一下，这样下次就可以直接打开了（不过即使这样打开也要挺久的，8G 内存也有点吃紧，老是转菊花 <em>(°:з」∠)</em> ）。</p>

<h2>逆向过程</h2>

<h4>定位消息控制器</h4>

<p>如果是从视图切入的话，使用 FLEXLoader （ Cydia 商店可下载 ） 是个不错的选择，它可以很方便地调试当前界面上的元素。当然，Revel 这种利器就不用多介绍了，用起来也是很舒畅。不过这里我使用了另外两种方式：</p>

<p>1、首先是使用 cycript。进入钉钉的聊天界面后，执行下面代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">cy</span><span class="err">#</span> <span class="p">[[[[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">keyWindow</span><span class="p">]</span> <span class="n">rootViewController</span><span class="p">]</span> <span class="n">viewControllers</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="n">topViewController</span><span class="p">]</span>
</span><span class='line'><span class="cp">#&quot;&lt;DTMessageOTOViewController: 0x104217c00&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于大体知道钉钉界面的层级关系，使用代码获取当前界面的信息还是比较容易的。</p>

<p>2、第二种是使用 lldb 来打印控制器层级列表。<br>
这里涉及到 lldb 的远程调试，首先映射越狱设备 1234 端口到 Mac 本地 1234 端口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">➜</span>  <span class="n">DTClassDump</span> <span class="n">iproxy</span> <span class="mi">1234</span> <span class="mi">1234</span> <span class="o">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在越狱设备上开启 debugserver：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">iPhone</span><span class="p">:</span><span class="o">~</span> <span class="n">root</span><span class="err">#</span> <span class="n">debugserver</span> <span class="o">*:</span><span class="mi">1234</span> <span class="o">-</span><span class="n">a</span> <span class="n">DingTalk</span>
</span><span class='line'><span class="n">debugserver</span><span class="o">-</span><span class="l">@(</span><span class="err">#</span><span class="l">)</span><span class="nl">PROGRAM</span><span class="p">:</span><span class="n">debugserver</span>  <span class="nl">PROJECT</span><span class="p">:</span><span class="n">debugserver</span><span class="o">-</span><span class="mf">360.0.26.1</span>
</span><span class='line'> <span class="k">for</span> <span class="n">arm64</span><span class="p">.</span>
</span><span class='line'><span class="n">Listening</span> <span class="n">to</span> <span class="n">port</span> <span class="mi">1234</span> <span class="k">for</span> <span class="n">a</span> <span class="n">connection</span> <span class="n">from</span> <span class="o">*</span><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着执行一下命令，让 lldb 连接上 debugserver：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">➜</span>  <span class="n">DTClassDump</span> <span class="n">lldb</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">process</span> <span class="n">connect</span> <span class="nl">connect</span><span class="p">:</span><span class="c1">//localhost:1234</span>
</span><span class='line'>
</span><span class='line'><span class="o">*</span> <span class="kr">thread</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="n">tid</span> <span class="o">=</span> <span class="mh">0xb7f8b</span><span class="p">,</span> <span class="mh">0x000000018e18816c</span> <span class="n">libsystem_kernel</span><span class="p">.</span><span class="n">dylib</span><span class="err">`</span><span class="n">mach_msg_trap</span> <span class="o">+</span> <span class="mi">8</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span><span class="err">&#39;</span><span class="mi">505</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">queue</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">main</span><span class="o">-</span><span class="kr">thread</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">stop</span> <span class="n">reason</span> <span class="o">=</span> <span class="n">signal</span> <span class="n">SIGSTOP</span>
</span><span class='line'>    <span class="n">frame</span> <span class="err">#</span><span class="mi">0</span><span class="o">:</span> <span class="mh">0x000000018e18816c</span> <span class="n">libsystem_kernel</span><span class="p">.</span><span class="n">dylib</span><span class="err">`</span><span class="n">mach_msg_trap</span> <span class="o">+</span> <span class="mi">8</span>
</span><span class='line'><span class="n">libsystem_kernel</span><span class="p">.</span><span class="n">dylib</span><span class="err">`</span><span class="nl">mach_msg_trap</span><span class="p">:</span>
</span><span class='line'><span class="o">-&gt;</span>  <span class="mh">0x18e18816c</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="o">&gt;:</span> <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'><span class="n">libsystem_kernel</span><span class="p">.</span><span class="n">dylib</span><span class="err">`</span><span class="nl">mach_msg_overwrite_trap</span><span class="p">:</span>
</span><span class='line'>    <span class="mh">0x18e188170</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;:</span> <span class="n">movn</span>   <span class="n">x16</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1f</span>
</span><span class='line'>    <span class="mh">0x18e188174</span> <span class="o">&lt;+</span><span class="mi">4</span><span class="o">&gt;:</span> <span class="n">svc</span>    <span class="err">#</span><span class="mh">0x80</span>
</span><span class='line'>    <span class="mh">0x18e188178</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="o">&gt;:</span> <span class="n">ret</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后我们就可以进行调试了。<strong><em>注：下面的 lldb 操作会用到 <a href="https://github.com/facebook/chisel">chisel</a> 插件的一些命令</em></strong>。<br></p>

<p>首先，导入 chisel 部分命令需要的 UIKit 框架：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">process</span> <span class="n">interrupt</span>
</span><span class='line'><span class="n">Process</span> <span class="mi">4600</span> <span class="n">stopped</span>
</span><span class='line'><span class="o">*</span> <span class="kr">thread</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="n">tid</span> <span class="o">=</span> <span class="mh">0xb7f8b</span><span class="p">,</span> <span class="mh">0x000000018e18816c</span> <span class="n">libsystem_kernel</span><span class="p">.</span><span class="n">dylib</span><span class="err">`</span><span class="n">mach_msg_trap</span> <span class="o">+</span> <span class="mi">8</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="err">&#39;</span><span class="mi">505</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">stop</span> <span class="n">reason</span> <span class="o">=</span> <span class="n">signal</span> <span class="n">SIGSTOP</span>
</span><span class='line'>    <span class="n">frame</span> <span class="err">#</span><span class="mi">0</span><span class="o">:</span> <span class="mh">0x000000018e18816c</span> <span class="n">libsystem_kernel</span><span class="p">.</span><span class="n">dylib</span><span class="err">`</span><span class="n">mach_msg_trap</span> <span class="o">+</span> <span class="mi">8</span>
</span><span class='line'><span class="n">libsystem_kernel</span><span class="p">.</span><span class="n">dylib</span><span class="err">`</span><span class="nl">mach_msg_trap</span><span class="p">:</span>
</span><span class='line'><span class="o">-&gt;</span>  <span class="mh">0x18e18816c</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="o">&gt;:</span> <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'><span class="n">libsystem_kernel</span><span class="p">.</span><span class="n">dylib</span><span class="err">`</span><span class="nl">mach_msg_overwrite_trap</span><span class="p">:</span>
</span><span class='line'>    <span class="mh">0x18e188170</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;:</span> <span class="n">movn</span>   <span class="n">x16</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1f</span>
</span><span class='line'>    <span class="mh">0x18e188174</span> <span class="o">&lt;+</span><span class="mi">4</span><span class="o">&gt;:</span> <span class="n">svc</span>    <span class="err">#</span><span class="mh">0x80</span>
</span><span class='line'>    <span class="mh">0x18e188178</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="o">&gt;:</span> <span class="n">ret</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">expr</span> <span class="p">@</span><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着还是进入到聊天界面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">pvc</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">DTTabBarController</span> <span class="mh">0x13bd4cb00</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">appeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">UILayoutContainerView</span> <span class="mh">0x13be75310</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">|</span> <span class="o">&lt;</span><span class="n">DTNavigationController</span> <span class="mh">0x13c8dda00</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">appeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">UILayoutContainerView</span> <span class="mh">0x13be7dee0</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">|</span>    <span class="o">|</span> <span class="o">&lt;</span><span class="n">DTConversationListController</span> <span class="mh">0x13c02ee00</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">disappeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span> <span class="o">&lt;</span><span class="bp">UIView</span> <span class="mh">0x13bd7ab40</span><span class="o">&gt;</span> <span class="n">not</span> <span class="k">in</span> <span class="n">the</span> <span class="n">window</span>
</span><span class='line'>   <span class="o">|</span>    <span class="o">|</span> <span class="o">&lt;</span><span class="n">DTMessageOTOViewController</span> <span class="mh">0x13c830400</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">appeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span> <span class="o">&lt;</span><span class="bp">UIView</span> <span class="mh">0x13d2291f0</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">|</span> <span class="o">&lt;</span><span class="n">DTNavigationController</span> <span class="mh">0x13c0e0c00</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">disappeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">UILayoutContainerView</span> <span class="mh">0x13bd66b30</span><span class="o">&gt;</span> <span class="n">not</span> <span class="k">in</span> <span class="n">the</span> <span class="n">window</span>
</span><span class='line'>   <span class="o">|</span>    <span class="o">|</span> <span class="o">&lt;</span><span class="n">DTDingTableViewController</span> <span class="mh">0x13c0b7e00</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">disappeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span>  <span class="p">(</span><span class="n">view</span> <span class="n">not</span> <span class="n">loaded</span><span class="p">)</span>
</span><span class='line'>   <span class="o">|</span> <span class="o">&lt;</span><span class="n">DTNavigationController</span> <span class="mh">0x13c985200</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">disappeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">UILayoutContainerView</span> <span class="mh">0x13be9d110</span><span class="o">&gt;</span> <span class="n">not</span> <span class="k">in</span> <span class="n">the</span> <span class="n">window</span>
</span><span class='line'>   <span class="o">|</span>    <span class="o">|</span> <span class="o">&lt;</span><span class="n">DTWorkViewController</span> <span class="mh">0x13be9ba00</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">disappeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span>  <span class="p">(</span><span class="n">view</span> <span class="n">not</span> <span class="n">loaded</span><span class="p">)</span>
</span><span class='line'>   <span class="o">|</span> <span class="o">&lt;</span><span class="n">DTNavigationController</span> <span class="mh">0x13c0f8c00</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">disappeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">UILayoutContainerView</span> <span class="mh">0x13bd6dae0</span><span class="o">&gt;</span> <span class="n">not</span> <span class="k">in</span> <span class="n">the</span> <span class="n">window</span>
</span><span class='line'>   <span class="o">|</span>    <span class="o">|</span> <span class="o">&lt;</span><span class="n">DTContactViewController</span> <span class="mh">0x13bd6bf80</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">disappeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span> <span class="o">&lt;</span><span class="bp">UIView</span> <span class="mh">0x13d120ee0</span><span class="o">&gt;</span> <span class="n">not</span> <span class="k">in</span> <span class="n">the</span> <span class="n">window</span>
</span><span class='line'>   <span class="o">|</span> <span class="o">&lt;</span><span class="n">DTNavigationController</span> <span class="mh">0x13c104c00</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">disappeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">UILayoutContainerView</span> <span class="mh">0x13bd733c0</span><span class="o">&gt;</span> <span class="n">not</span> <span class="k">in</span> <span class="n">the</span> <span class="n">window</span>
</span><span class='line'>   <span class="o">|</span>    <span class="o">|</span> <span class="o">&lt;</span><span class="n">DTSettingViewController</span> <span class="mh">0x13bd71cc0</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">state</span><span class="p">:</span> <span class="n">disappeared</span><span class="p">,</span> <span class="nl">view</span><span class="p">:</span>  <span class="p">(</span><span class="n">view</span> <span class="n">not</span> <span class="n">loaded</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到 chisel 不仅把目标控制器 <code>&lt;DTMessageOTOViewController 0x13c830400&gt;</code> 打印出来了，还顺带把当前整个控制器层级都给拉了出来。</p>

<h4>定位接受消息方法</h4>

<p>将消息标为已读的前提是钉钉接收到了该消息，进而可以推测是不是在接收消息后，钉钉发送了已读标志，所以我们先找出接收消息的回调方法。在不知道确切方法的情况下，浏览下下 class-dump 出来的 <code>DTMessageOTOViewController</code> 类信息多少会有收获的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//     Generated by class-dump 3.5 (64 bit).</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;DTMessageBaseViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;DTCEmailTransitionViewDelegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@class</span> <span class="nc">DTBadgeView</span>, <span class="nc">DTCEmailTransitionView</span>, <span class="nc">DTCMailMode</span>, <span class="nc">DTTypingManager</span>, <span class="bp">NSString</span>, <span class="bp">UIButton</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">DTMessageOTOViewController</span> : <span class="nc">DTMessageBaseViewController</span> <span class="o">&lt;</span><span class="n">DTCEmailTransitionViewDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleNotificationMessage</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">arg1</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">receivedMessageListNotification:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">arg1</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">receivedMessageNotification:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">arg1</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>结合方法命名，我只关注了上方的三个方法。接下来可以逐个测试上面的方法，找出处理消息的回调了。</p>

<p>在 Hopper Disassembler 中， <code>DTMessageOTOViewController</code> 的 <code>handleNotificationMessage:</code> 的方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="p">;</span> <span class="o">================</span> <span class="n">B</span> <span class="n">E</span> <span class="n">G</span> <span class="n">I</span> <span class="n">N</span> <span class="n">N</span> <span class="n">I</span> <span class="n">N</span> <span class="n">G</span>   <span class="n">O</span> <span class="n">F</span>   <span class="n">P</span> <span class="n">R</span> <span class="n">O</span> <span class="n">C</span> <span class="n">E</span> <span class="n">D</span> <span class="n">U</span> <span class="n">R</span> <span class="n">E</span> <span class="o">================</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                 <span class="o">-</span><span class="p">[</span><span class="n">DTMessageOTOViewController</span> <span class="nl">handleNotificationMessage</span><span class="p">:]</span><span class="o">:</span>
</span><span class='line'><span class="mo">0000000100466</span><span class="mi">820</span>         <span class="n">stp</span>        <span class="n">x26</span><span class="p">,</span> <span class="n">x25</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mh">0x50</span><span class="p">]</span><span class="o">!</span>                     <span class="p">;</span> <span class="n">Objective</span> <span class="n">C</span> <span class="n">Implementation</span> <span class="n">defined</span> <span class="n">at</span> <span class="mh">0x1030ddb30</span> <span class="p">(</span><span class="n">instance</span> <span class="n">method</span><span class="p">),</span> <span class="n">DATA</span> <span class="n">XREF</span><span class="o">=</span><span class="mh">0x1030ddb30</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上所示，我们可以知道 <code>handleNotificationMessage:</code> 的相对地址是 0x0000000100466820，打开 lldb 进行调试：</p>

<p>1、获取 DingTalk 的 ASLR (地址空间配置随机加载) 偏移量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">image</span> <span class="n">list</span> <span class="o">-</span><span class="n">o</span> <span class="o">-</span><span class="n">f</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">DingTalk</span>
</span><span class='line'><span class="p">[</span>  <span class="mi">0</span><span class="p">]</span> <span class="mh">0x0000000000004000</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">containers</span><span class="o">/</span><span class="n">Bundle</span><span class="o">/</span><span class="n">Application</span><span class="o">/</span><span class="mi">60</span><span class="n">B29D5D</span><span class="o">-</span><span class="mi">2360</span><span class="o">-</span><span class="mi">4</span><span class="n">C01</span><span class="o">-</span><span class="n">A49F</span><span class="o">-</span><span class="mi">8</span><span class="n">CA87C752EFE</span><span class="o">/</span><span class="n">DingTalk</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">DingTalk</span><span class="p">(</span><span class="mh">0x0000000100004000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、设置 <code>handleNotificationMessage:</code> 断点信息。不过在设置前，得先明确下参数和返回值的传递规则。
<br></p>

<p>参数传递规则：前四个参数存放在 R0 - R3 中，剩余的通过栈进行传递。<br>
返回值传递规则：通过 R0 传递给调用者。</p>

<p>众所周知，Objective-C 的方法调用是通过 <code>objc_msgSend</code> 函数实现的，<code>objc_msgSend</code> 定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="nf">objc_msgSend</span><span class="p">(</span><span class="kt">id</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span>   <span class="n">_cmd</span><span class="p">,...);</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以我们可以通过 R0 / arg0 获取消息接受者， R1 / arg1 获取发送的方法名。综上，可添加断点信息如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">br</span> <span class="n">set</span> <span class="o">-</span><span class="n">a</span> <span class="mh">0x0000000000004000</span><span class="o">+</span><span class="mh">0x0000000100466820</span>
</span><span class='line'><span class="n">Breakpoint</span> <span class="mi">1</span><span class="o">:</span> <span class="n">where</span> <span class="o">=</span> <span class="n">DingTalk</span><span class="err">`</span><span class="n">_mh_execute_header</span> <span class="o">+</span> <span class="mi">4588940</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="mh">0x000000010046a820</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">br</span> <span class="n">command</span> <span class="n">add</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">your</span> <span class="n">debugger</span> <span class="n">command</span><span class="p">(</span><span class="n">s</span><span class="p">).</span>  <span class="n">Type</span> <span class="err">&#39;</span><span class="n">DONE</span><span class="err">&#39;</span> <span class="n">to</span> <span class="n">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">po</span> <span class="err">$</span><span class="n">x0</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">p</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="err">$</span><span class="n">x1</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">po</span> <span class="err">$</span><span class="n">x2</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">DONE</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、向越狱设备的钉钉发送消息，触发断点</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span>  <span class="n">po</span> <span class="err">$</span><span class="n">x0</span>
</span><span class='line'><span class="o">&lt;</span><span class="nl">DTMessageOTOViewController</span><span class="p">:</span> <span class="mh">0x11e2edc00</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span>  <span class="n">p</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="err">$</span><span class="n">x1</span>
</span><span class='line'><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="err">$</span><span class="mi">2</span> <span class="o">=</span> <span class="mh">0x000000010296e9ba</span> <span class="s">&quot;handleNotificationMessage:&quot;</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span>  <span class="n">po</span> <span class="err">$</span><span class="n">x2</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">__NSArrayM</span> <span class="mh">0x170853e00</span><span class="o">&gt;</span><span class="p">(</span>
</span><span class='line'><span class="n">senderId</span> <span class="o">=</span> <span class="mi">72938616</span>
</span><span class='line'><span class="n">localMid</span> <span class="o">=</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span>
</span><span class='line'><span class="n">mId</span> <span class="o">=</span> <span class="mi">21530513660</span>
</span><span class='line'><span class="n">attachmentsType</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">sendStatus</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">type</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">isDecrypt</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Process</span> <span class="mi">4918</span> <span class="n">stopped</span>
</span><span class='line'><span class="o">*</span> <span class="kr">thread</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="n">tid</span> <span class="o">=</span> <span class="mh">0xd51a3</span><span class="p">,</span> <span class="mh">0x000000010046a820</span> <span class="n">DingTalk</span><span class="err">`</span><span class="n">_mh_execute_header</span> <span class="o">+</span> <span class="mi">4614176</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="err">&#39;</span><span class="mi">709</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">queue</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">main</span><span class="o">-</span><span class="kr">thread</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">stop</span> <span class="n">reason</span> <span class="o">=</span> <span class="n">breakpoint</span> <span class="mf">1.1</span>
</span><span class='line'>    <span class="n">frame</span> <span class="err">#</span><span class="mi">0</span><span class="o">:</span> <span class="mh">0x000000010046a820</span> <span class="n">DingTalk</span><span class="err">`</span><span class="n">_mh_execute_header</span> <span class="o">+</span> <span class="mi">4614176</span>
</span><span class='line'><span class="n">DingTalk</span><span class="err">`</span><span class="nl">_mh_execute_header</span><span class="p">:</span>
</span><span class='line'><span class="o">-&gt;</span>  <span class="mh">0x10046a820</span> <span class="o">&lt;+</span><span class="mi">4614176</span><span class="o">&gt;:</span> <span class="n">stp</span>    <span class="n">x26</span><span class="p">,</span> <span class="n">x25</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">80</span><span class="p">]</span><span class="o">!</span>
</span><span class='line'>    <span class="mh">0x10046a824</span> <span class="o">&lt;+</span><span class="mi">4614180</span><span class="o">&gt;:</span> <span class="n">stp</span>    <span class="n">x24</span><span class="p">,</span> <span class="n">x23</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mi">16</span><span class="p">]</span>
</span><span class='line'>    <span class="mh">0x10046a828</span> <span class="o">&lt;+</span><span class="mi">4614184</span><span class="o">&gt;:</span> <span class="n">stp</span>    <span class="n">x22</span><span class="p">,</span> <span class="n">x21</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mi">32</span><span class="p">]</span>
</span><span class='line'>    <span class="mh">0x10046a82c</span> <span class="o">&lt;+</span><span class="mi">4614188</span><span class="o">&gt;:</span> <span class="n">stp</span>    <span class="n">x20</span><span class="p">,</span> <span class="n">x19</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mi">48</span><span class="p">]</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到接收消息后，的确进入了 <code>handleNotificationMessage:</code> 方法。并且通过 LR （保存函数返回地址寄存器），我们可以定位到是 <code>receivedMessageListNotification:</code> 方法调用了 <code>handleNotificationMessage:</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">p</span><span class="o">/</span><span class="n">x</span> <span class="err">$</span><span class="n">lr</span> <span class="o">-</span> <span class="mh">0x0000000000004000</span>
</span><span class='line'><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="err">$</span><span class="mi">6</span> <span class="o">=</span> <span class="mh">0x00000001004667d0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopper Disassembler ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="p">;</span> <span class="o">================</span> <span class="n">B</span> <span class="n">E</span> <span class="n">G</span> <span class="n">I</span> <span class="n">N</span> <span class="n">N</span> <span class="n">I</span> <span class="n">N</span> <span class="n">G</span>   <span class="n">O</span> <span class="n">F</span>   <span class="n">P</span> <span class="n">R</span> <span class="n">O</span> <span class="n">C</span> <span class="n">E</span> <span class="n">D</span> <span class="n">U</span> <span class="n">R</span> <span class="n">E</span> <span class="o">================</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                 <span class="o">-</span><span class="p">[</span><span class="n">DTMessageOTOViewController</span> <span class="nl">receivedMessageListNotification</span><span class="p">:]</span><span class="o">:</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mo">00000001004667</span><span class="n">c0</span>         <span class="n">ldr</span>        <span class="n">x1</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xc58</span><span class="p">]</span>                            <span class="p">;</span> <span class="s">&quot;handleNotificationMessage:&quot;</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleNotificationMessage</span><span class="p">:)</span>
</span><span class='line'><span class="mo">00000001004667</span><span class="n">c4</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001004667</span><span class="n">c8</span>         <span class="n">mov</span>        <span class="n">x2</span><span class="p">,</span> <span class="n">x22</span>
</span><span class='line'><span class="mo">00000001004667</span><span class="n">cc</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001004667</span><span class="n">d0</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x22</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>进而，我们可以知道新消息到来时，钉钉会广播 <code>DTPushReceivedMessageListNotification</code> 通知：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSConcreteNotification</span> <span class="mh">0x170854430</span> <span class="p">{</span><span class="n">name</span> <span class="o">=</span> <span class="n">DTPushReceivedMessageListNotification</span><span class="p">;</span> <span class="n">object</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">DTReconnectedHandler</span><span class="p">:</span> <span class="mh">0x170015990</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">userInfo</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DTPushReceivedInfoKey</span> <span class="o">=</span>     <span class="p">(</span>
</span><span class='line'>        <span class="s">&quot;senderId = 72938616</span><span class="se">\n</span><span class="s">localMid = (null)</span><span class="se">\n</span><span class="s">mId = 21526791314</span><span class="se">\n</span><span class="s">attachmentsType = 1</span><span class="se">\n</span><span class="s">sendStatus = 0</span><span class="se">\n</span><span class="s">type = 1</span><span class="se">\n</span><span class="s">isDecrypt = 0</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>4、从反汇编代码中寻找线索</p>

<p>虽然定位到了 <code>handleNotificationMessage:</code> 方法，但最终发现这个方法并没有给我想要的信息，不过它的调用者 <code>receivedMessageListNotification:</code> 方法却提供了一些有用的线索：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="p">;</span> <span class="o">================</span> <span class="n">B</span> <span class="n">E</span> <span class="n">G</span> <span class="n">I</span> <span class="n">N</span> <span class="n">N</span> <span class="n">I</span> <span class="n">N</span> <span class="n">G</span>   <span class="n">O</span> <span class="n">F</span>   <span class="n">P</span> <span class="n">R</span> <span class="n">O</span> <span class="n">C</span> <span class="n">E</span> <span class="n">D</span> <span class="n">U</span> <span class="n">R</span> <span class="n">E</span> <span class="o">================</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                 <span class="o">-</span><span class="p">[</span><span class="n">DTMessageOTOViewController</span> <span class="nl">receivedMessageListNotification</span><span class="p">:]</span><span class="o">:</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mo">0000000100466754</span>         <span class="n">cbz</span>        <span class="n">x20</span><span class="p">,</span> <span class="n">loc_1004667e0</span>
</span><span class='line'>
</span><span class='line'><span class="mo">000000010046675</span><span class="mi">8</span>         <span class="n">str</span>        <span class="n">x20</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x8</span><span class="p">]</span>
</span><span class='line'><span class="mo">000000010046675</span><span class="n">c</span>         <span class="n">adrp</span>       <span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1035bf000</span>
</span><span class='line'><span class="mo">0000000100466760</span>         <span class="n">ldr</span>        <span class="n">x8</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x5a0</span><span class="p">]</span>                            <span class="p">;</span> <span class="mh">0x1035bf5a0</span><span class="p">,</span><span class="n">__objc_class_DTMessageOTOViewController_class</span>
</span><span class='line'><span class="mo">0000000100466764</span>         <span class="n">str</span>        <span class="n">x8</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class='line'><span class="mo">000000010046676</span><span class="mi">8</span>         <span class="n">adrp</span>       <span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x103568000</span>                            <span class="p">;</span> <span class="k">@selector</span><span class="p">(</span><span class="n">cname</span><span class="p">)</span>
</span><span class='line'><span class="mo">000000010046676</span><span class="n">c</span>         <span class="n">ldr</span>        <span class="n">x1</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x378</span><span class="p">]</span>                            <span class="p">;</span> <span class="s">&quot;receivedMessageListNotification:&quot;</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="nl">receivedMessageListNotification</span><span class="p">:)</span>
</span><span class='line'><span class="mo">0000000100466770</span>         <span class="n">add</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x8</span>
</span><span class='line'><span class="mo">0000000100466774</span>         <span class="n">mov</span>        <span class="n">x2</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">000000010046677</span><span class="mi">8</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSendSuper2</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>DTMessageOTOViewController</code> 对象的 <code>receivedMessageListNotification:</code> 方法有效信息并不多，但它在调用 <code>handleNotificationMessage:</code> 方法前，调用了父类的 <code>receivedMessageListNotification:</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="p">;</span> <span class="o">================</span> <span class="n">B</span> <span class="n">E</span> <span class="n">G</span> <span class="n">I</span> <span class="n">N</span> <span class="n">N</span> <span class="n">I</span> <span class="n">N</span> <span class="n">G</span>   <span class="n">O</span> <span class="n">F</span>   <span class="n">P</span> <span class="n">R</span> <span class="n">O</span> <span class="n">C</span> <span class="n">E</span> <span class="n">D</span> <span class="n">U</span> <span class="n">R</span> <span class="n">E</span> <span class="o">================</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                     <span class="o">-</span><span class="p">[</span><span class="n">DTMessageBaseViewController</span> <span class="nl">receivedMessageListNotification</span><span class="p">:]</span><span class="o">:</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">ldr</span>        <span class="n">x24</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xd58</span><span class="p">]</span> <span class="p">;</span> <span class="s">&quot;dataSource&quot;</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="n">dataSource</span><span class="p">)</span>
</span><span class='line'><span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="n">mov</span>        <span class="n">x1</span><span class="p">,</span> <span class="n">x24</span>
</span><span class='line'><span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="n">mov</span>        <span class="n">x29</span><span class="p">,</span> <span class="n">x29</span>
</span><span class='line'><span class="n">bl</span>         <span class="n">imp___stubs__objc_retainAutoreleasedReturnValue</span>
</span><span class='line'><span class="n">mov</span>        <span class="n">x25</span><span class="p">,</span> <span class="n">x0</span>
</span><span class='line'><span class="n">adrp</span>       <span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x103568000</span> <span class="p">;</span> <span class="k">@selector</span><span class="p">(</span><span class="n">cname</span><span class="p">)</span>
</span><span class='line'><span class="n">ldr</span>        <span class="n">x1</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xc00</span><span class="p">]</span> <span class="p">;</span> <span class="s">&quot;noRepeatSortMessagesWithNotificationMessageList:&quot;</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="nl">noRepeatSortMessagesWithNotificationMessageList</span><span class="p">:)</span>
</span><span class='line'><span class="n">mov</span>        <span class="n">x2</span><span class="p">,</span> <span class="n">x22</span>
</span><span class='line'><span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">adrp</span>       <span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x103568000</span> <span class="p">;</span> <span class="k">@selector</span><span class="p">(</span><span class="n">cname</span><span class="p">)</span>
</span><span class='line'><span class="n">ldr</span>        <span class="n">x1</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xc10</span><span class="p">]</span> <span class="p">;</span> <span class="s">&quot;dealMessageListWithNoRepeatSortArray:finishBlock:&quot;</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="nl">dealMessageListWithNoRepeatSortArray</span><span class="p">:</span><span class="nl">finishBlock</span><span class="p">:)</span>
</span><span class='line'><span class="n">add</span>        <span class="n">x3</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x8</span>
</span><span class='line'><span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x26</span>
</span><span class='line'><span class="n">mov</span>        <span class="n">x2</span><span class="p">,</span> <span class="n">x25</span>
</span><span class='line'><span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过反汇编代码可以看出，这个 <code>dataSource</code> 先后调用了 <code>noRepeatSortMessagesWithNotificationMessageList:</code> 和 <code>dealMessageListWithNoRepeatSortArray:finishBlock:</code> 方法，会不会在后一个方法发送已读标志呢？在确认之前，我们先看下 <code>dataSource</code> 这个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">retain</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">DTMessageControllerDataSource</span> <span class="o">*</span><span class="n">dataSource</span><span class="p">;</span> <span class="c1">// @synthesize dataSource=_dataSource;</span>
</span></code></pre></td></tr></table></div></figure>


<p>数据源被剥离到一个独立的对象了，这种做法在界面比较复杂的情况中很常见，能有效减少控制器中的代码。那么 <code>DTMessageControllerDataSource</code> 里面会有什么有用的信息么？</p>

<h4>定位发送已读标志方法</h4>

<p>上文说到了 DTMessageControllerDataSource 这个类，这个类定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">DTMessageControllerDataSource</span> : <span class="bp">NSObject</span> <span class="o">&lt;</span><span class="n">UIViewControllerPreviewingDelegate</span><span class="p">,</span> <span class="n">DTMessageCollectionViewCellDataSource</span><span class="p">,</span> <span class="n">EGORefreshTableHeaderDelegate</span><span class="p">,</span> <span class="n">DTMessageConllectionViewDataSource</span><span class="p">,</span> <span class="n">DTMessageControllerDataSourceProtocal</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">_Bool</span><span class="p">)</span><span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">arg1</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">sendMessageReadStatusWithMessage</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">arg1</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>结合命名方法，我注意到了上面两个方法。和上文步骤一样，我先使用 lldb 调试了 <code>needSendReadStatusInCellForRowWithMessage:</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="p">;</span> <span class="o">================</span> <span class="n">B</span> <span class="n">E</span> <span class="n">G</span> <span class="n">I</span> <span class="n">N</span> <span class="n">N</span> <span class="n">I</span> <span class="n">N</span> <span class="n">G</span>   <span class="n">O</span> <span class="n">F</span>   <span class="n">P</span> <span class="n">R</span> <span class="n">O</span> <span class="n">C</span> <span class="n">E</span> <span class="n">D</span> <span class="n">U</span> <span class="n">R</span> <span class="n">E</span> <span class="o">================</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                 <span class="o">-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">:</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a070c</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0710</span>         <span class="n">ldp</span>        <span class="n">x29</span><span class="p">,</span> <span class="n">x30</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x20</span><span class="p">]</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0714</span>         <span class="n">ldp</span>        <span class="n">x20</span><span class="p">,</span> <span class="n">x19</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0718</span>         <span class="n">ldp</span>        <span class="n">x22</span><span class="p">,</span> <span class="n">x21</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">]</span><span class="o">!</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x30</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a071c</span>         <span class="n">ret</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过这次因为要改变返回值，我直接把断点打在了 <code>0x00000001001a070c</code> 这个地方：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Process</span> <span class="mi">4961</span> <span class="n">stopped</span>
</span><span class='line'><span class="o">*</span> <span class="kr">thread</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="n">tid</span> <span class="o">=</span> <span class="mh">0xdc358</span><span class="p">,</span> <span class="mh">0x00000001001d070c</span> <span class="n">DingTalk</span><span class="err">`</span><span class="n">_mh_execute_header</span> <span class="o">+</span> <span class="mi">1705740</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="err">&#39;</span><span class="mi">137</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">queue</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">main</span><span class="o">-</span><span class="kr">thread</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">stop</span> <span class="n">reason</span> <span class="o">=</span> <span class="n">instruction</span> <span class="n">step</span> <span class="n">over</span>
</span><span class='line'>    <span class="n">frame</span> <span class="err">#</span><span class="mi">0</span><span class="o">:</span> <span class="mh">0x00000001001d070c</span> <span class="n">DingTalk</span><span class="err">`</span><span class="n">_mh_execute_header</span> <span class="o">+</span> <span class="mi">1705740</span>
</span><span class='line'><span class="n">DingTalk</span><span class="err">`</span><span class="nl">_mh_execute_header</span><span class="p">:</span>
</span><span class='line'><span class="o">-&gt;</span>  <span class="mh">0x1001d070c</span> <span class="o">&lt;+</span><span class="mi">1705740</span><span class="o">&gt;:</span> <span class="n">mov</span>    <span class="n">x0</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'>    <span class="mh">0x1001d0710</span> <span class="o">&lt;+</span><span class="mi">1705744</span><span class="o">&gt;:</span> <span class="n">ldp</span>    <span class="n">x29</span><span class="p">,</span> <span class="n">x30</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mi">32</span><span class="p">]</span>
</span><span class='line'>    <span class="mh">0x1001d0714</span> <span class="o">&lt;+</span><span class="mi">1705748</span><span class="o">&gt;:</span> <span class="n">ldp</span>    <span class="n">x20</span><span class="p">,</span> <span class="n">x19</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mi">16</span><span class="p">]</span>
</span><span class='line'>    <span class="mh">0x1001d0718</span> <span class="o">&lt;+</span><span class="mi">1705752</span><span class="o">&gt;:</span> <span class="n">ldp</span>    <span class="n">x22</span><span class="p">,</span> <span class="n">x21</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">],</span> <span class="err">#</span><span class="mi">48</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">ni</span>
</span><span class='line'><span class="n">Process</span> <span class="mi">4961</span> <span class="n">stopped</span>
</span><span class='line'><span class="o">*</span> <span class="kr">thread</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="n">tid</span> <span class="o">=</span> <span class="mh">0xdc358</span><span class="p">,</span> <span class="mh">0x00000001001d0710</span> <span class="n">DingTalk</span><span class="err">`</span><span class="n">_mh_execute_header</span> <span class="o">+</span> <span class="mi">1705744</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="err">&#39;</span><span class="mi">137</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">queue</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">main</span><span class="o">-</span><span class="kr">thread</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">stop</span> <span class="n">reason</span> <span class="o">=</span> <span class="n">instruction</span> <span class="n">step</span> <span class="n">over</span>
</span><span class='line'>    <span class="n">frame</span> <span class="err">#</span><span class="mi">0</span><span class="o">:</span> <span class="mh">0x00000001001d0710</span> <span class="n">DingTalk</span><span class="err">`</span><span class="n">_mh_execute_header</span> <span class="o">+</span> <span class="mi">1705744</span>
</span><span class='line'><span class="n">DingTalk</span><span class="err">`</span><span class="nl">_mh_execute_header</span><span class="p">:</span>
</span><span class='line'><span class="o">-&gt;</span>  <span class="mh">0x1001d0710</span> <span class="o">&lt;+</span><span class="mi">1705744</span><span class="o">&gt;:</span> <span class="n">ldp</span>    <span class="n">x29</span><span class="p">,</span> <span class="n">x30</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mi">32</span><span class="p">]</span>
</span><span class='line'>    <span class="mh">0x1001d0714</span> <span class="o">&lt;+</span><span class="mi">1705748</span><span class="o">&gt;:</span> <span class="n">ldp</span>    <span class="n">x20</span><span class="p">,</span> <span class="n">x19</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mi">16</span><span class="p">]</span>
</span><span class='line'>    <span class="mh">0x1001d0718</span> <span class="o">&lt;+</span><span class="mi">1705752</span><span class="o">&gt;:</span> <span class="n">ldp</span>    <span class="n">x22</span><span class="p">,</span> <span class="n">x21</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">],</span> <span class="err">#</span><span class="mi">48</span>
</span><span class='line'>    <span class="mh">0x1001d071c</span> <span class="o">&lt;+</span><span class="mi">1705756</span><span class="o">&gt;:</span> <span class="n">ret</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">p</span> <span class="err">$</span><span class="n">x0</span>
</span><span class='line'><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="err">$</span><span class="mi">6</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="k">register</span> <span class="n">write</span> <span class="err">$</span><span class="n">x0</span> <span class="mi">0</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>改写 R0 (返回值) 为 0 并让进程继续运行后，消息发送方的已读标志果然没有出现，始终是处于未读状态，而接收方也看到了这条消息。那么 <code>needSendUnreadStatusWithMessage:</code> 方法是如何判断该返回YES或NO呢？除去了部分对结果不产生影响的分支后，其汇编代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mo">00000001001</span><span class="n">a05c8</span>         <span class="n">stp</span>        <span class="n">x22</span><span class="p">,</span> <span class="n">x21</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mh">0x30</span><span class="p">]</span><span class="o">!</span>                     <span class="p">;</span> <span class="n">Objective</span> <span class="n">C</span> <span class="n">Implementation</span> <span class="n">defined</span> <span class="n">at</span> <span class="mh">0x103088d78</span> <span class="p">(</span><span class="n">instance</span> <span class="n">method</span><span class="p">),</span> <span class="n">DATA</span> <span class="n">XREF</span><span class="o">=</span><span class="mh">0x103088d78</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05cc</span>         <span class="n">stp</span>        <span class="n">x20</span><span class="p">,</span> <span class="n">x19</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05d0</span>         <span class="n">stp</span>        <span class="n">x29</span><span class="p">,</span> <span class="n">x30</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x20</span><span class="p">]</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05d4</span>         <span class="n">add</span>        <span class="n">x29</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05d8</span>         <span class="n">mov</span>        <span class="n">x20</span><span class="p">,</span> <span class="n">x0</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05dc</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x2</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05e0</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_retain</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05e4</span>         <span class="n">mov</span>        <span class="n">x19</span><span class="p">,</span> <span class="n">x0</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05e8</span>         <span class="n">adrp</span>       <span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x10355d000</span>                            <span class="p">;</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">filteredImageUsingContrastFilterOnImage</span><span class="p">:)</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05ec</span>         <span class="n">ldr</span>        <span class="n">x1</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x4b0</span><span class="p">]</span>                            <span class="p">;</span> <span class="s">&quot;collectionView&quot;</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="n">collectionView</span><span class="p">)</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05f0</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05f4</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05f8</span>         <span class="n">mov</span>        <span class="n">x29</span><span class="p">,</span> <span class="n">x29</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a05fc</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_retainAutoreleasedReturnValue</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0600</span>         <span class="n">mov</span>        <span class="n">x20</span><span class="p">,</span> <span class="n">x0</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0604</span>         <span class="n">adrp</span>       <span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x103559000</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0608</span>         <span class="n">ldr</span>        <span class="n">x1</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xd58</span><span class="p">]</span>                            <span class="p">;</span> <span class="s">&quot;dataSource&quot;</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="n">dataSource</span><span class="p">)</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a060c</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0610</span>         <span class="n">mov</span>        <span class="n">x29</span><span class="p">,</span> <span class="n">x29</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0614</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_retainAutoreleasedReturnValue</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0618</span>         <span class="n">mov</span>        <span class="n">x21</span><span class="p">,</span> <span class="n">x0</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a061c</span>         <span class="n">adrp</span>       <span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x103563000</span>                            <span class="p">;</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">updateConversationClientExtension</span><span class="p">:</span><span class="nl">message</span><span class="p">:</span><span class="nl">wkBizConversation</span><span class="p">:</span><span class="nl">needSaveToDB</span><span class="p">:)</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0620</span>         <span class="n">ldr</span>        <span class="n">x1</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x660</span><span class="p">]</span>                            <span class="p">;</span> <span class="s">&quot;needSendUnreadStatusWithMessage:&quot;</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="nl">needSendUnreadStatusWithMessage</span><span class="p">:)</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0624</span>         <span class="n">mov</span>        <span class="n">x2</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0628</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a062c</span>         <span class="n">mov</span>        <span class="n">x22</span><span class="p">,</span> <span class="n">x0</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0630</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x21</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0634</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_release</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0638</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a063c</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_release</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0640</span>         <span class="n">cbz</span>        <span class="n">w22</span><span class="p">,</span> <span class="n">loc_1001a0700</span>
</span><span class='line'>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0644</span>         <span class="n">adrp</span>       <span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x10355b000</span>                            <span class="p">;</span> <span class="k">@selector</span><span class="p">(</span><span class="n">DT_S13_normal</span><span class="p">)</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0648</span>         <span class="n">ldr</span>        <span class="n">x20</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x740</span><span class="p">]</span>                           <span class="p">;</span> <span class="s">&quot;attachmentsType&quot;</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="n">attachmentsType</span><span class="p">)</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a064c</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0650</span>         <span class="n">mov</span>        <span class="n">x1</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0654</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0658</span>         <span class="n">cmp</span>        <span class="n">x0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x67</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a065c</span>         <span class="n">b</span><span class="p">.</span><span class="n">eq</span>       <span class="n">loc_1001a0700</span>
</span><span class='line'>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0660</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0664</span>         <span class="n">mov</span>        <span class="n">x1</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0668</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a066c</span>         <span class="n">cmp</span>        <span class="n">x0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xca</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0670</span>         <span class="n">b</span><span class="p">.</span><span class="n">eq</span>       <span class="n">loc_1001a0700</span>
</span><span class='line'>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0674</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0678</span>         <span class="n">mov</span>        <span class="n">x1</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a067c</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0680</span>         <span class="n">cmp</span>        <span class="n">x0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x4</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0684</span>         <span class="n">b</span><span class="p">.</span><span class="n">eq</span>       <span class="n">loc_1001a0700</span>
</span><span class='line'>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0688</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a068c</span>         <span class="n">mov</span>        <span class="n">x1</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0690</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0694</span>         <span class="n">cmp</span>        <span class="n">x0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x2</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0698</span>         <span class="n">b</span><span class="p">.</span><span class="n">eq</span>       <span class="n">loc_1001a0700</span>
</span><span class='line'>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a069c</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06a0</span>         <span class="n">mov</span>        <span class="n">x1</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06a4</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06a8</span>         <span class="n">cmp</span>        <span class="n">x0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x66</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06ac</span>         <span class="n">b</span><span class="p">.</span><span class="n">eq</span>       <span class="n">loc_1001a0700</span>
</span><span class='line'>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06b0</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06b4</span>         <span class="n">mov</span>        <span class="n">x1</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06b8</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06bc</span>         <span class="n">cmp</span>        <span class="n">x0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x10</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06c0</span>         <span class="n">b</span><span class="p">.</span><span class="n">eq</span>       <span class="n">loc_1001a0700</span>
</span><span class='line'>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06c4</span>         <span class="n">adrp</span>       <span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x103563000</span>                            <span class="p">;</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">updateConversationClientExtension</span><span class="p">:</span><span class="nl">message</span><span class="p">:</span><span class="nl">wkBizConversation</span><span class="p">:</span><span class="nl">needSaveToDB</span><span class="p">:)</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06c8</span>         <span class="n">ldr</span>        <span class="n">x1</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x640</span><span class="p">]</span>                            <span class="p">;</span> <span class="s">&quot;isMsgNeedShowFullWidth&quot;</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="n">isMsgNeedShowFullWidth</span><span class="p">)</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06cc</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06d0</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06d4</span>         <span class="n">tbnz</span>       <span class="n">w0</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">,</span> <span class="n">loc_1001a0700</span>
</span><span class='line'>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06d8</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06dc</span>         <span class="n">mov</span>        <span class="n">x1</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06e0</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06e4</span>         <span class="n">cmp</span>        <span class="n">x0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1f4</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06e8</span>         <span class="n">b</span><span class="p">.</span><span class="n">eq</span>       <span class="n">loc_1001a0700</span>
</span><span class='line'>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06ec</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06f0</span>         <span class="n">mov</span>        <span class="n">x1</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06f4</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06f8</span>         <span class="n">cmp</span>        <span class="n">x0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1f5</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a06fc</span>         <span class="n">b</span><span class="p">.</span><span class="n">ne</span>       <span class="n">loc_1001a0720</span>
</span><span class='line'>
</span><span class='line'>                     <span class="nl">loc_1001a0700</span><span class="p">:</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0700</span>         <span class="n">movz</span>       <span class="n">w20</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>                                   <span class="p">;</span> <span class="n">CODE</span> <span class="n">XREF</span><span class="o">=-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">+</span><span class="mi">120</span><span class="p">,</span> <span class="o">-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">+</span><span class="mi">148</span><span class="p">,</span> <span class="o">-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">+</span><span class="mi">168</span><span class="p">,</span> <span class="o">-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">+</span><span class="mi">188</span><span class="p">,</span> <span class="o">-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">+</span><span class="mi">208</span><span class="p">,</span> <span class="o">-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">+</span><span class="mi">228</span><span class="p">,</span> <span class="o">-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">+</span><span class="mi">248</span><span class="p">,</span> <span class="o">-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">+</span><span class="mi">268</span><span class="p">,</span> <span class="o">-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">+</span><span class="mi">288</span>
</span><span class='line'>
</span><span class='line'>                     <span class="nl">loc_1001a0704</span><span class="p">:</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0704</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x19</span>                                     <span class="p">;</span> <span class="n">CODE</span> <span class="n">XREF</span><span class="o">=-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">+</span><span class="mi">372</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0708</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_release</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a070c</span>         <span class="n">mov</span>        <span class="n">x0</span><span class="p">,</span> <span class="n">x20</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0710</span>         <span class="n">ldp</span>        <span class="n">x29</span><span class="p">,</span> <span class="n">x30</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x20</span><span class="p">]</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0714</span>         <span class="n">ldp</span>        <span class="n">x20</span><span class="p">,</span> <span class="n">x19</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0718</span>         <span class="n">ldp</span>        <span class="n">x22</span><span class="p">,</span> <span class="n">x21</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">]</span><span class="o">!</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x30</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a071c</span>         <span class="n">ret</span>
</span><span class='line'>                        <span class="p">;</span> <span class="n">endp</span>
</span><span class='line'>
</span><span class='line'>                     <span class="nl">loc_1001a0720</span><span class="p">:</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0720</span>         <span class="n">adrp</span>       <span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1035b5000</span>                            <span class="p">;</span> <span class="n">CODE</span> <span class="n">XREF</span><span class="o">=-</span><span class="p">[</span><span class="n">DTMessageControllerDataSource</span> <span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:]</span><span class="o">+</span><span class="mi">308</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0724</span>         <span class="n">ldr</span>        <span class="n">x0</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xdd0</span><span class="p">]</span>                            <span class="p">;</span> <span class="n">objc_cls_ref_DTMessageServiceV2</span><span class="p">,</span><span class="n">__objc_class_DTMessageServiceV2_class</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0728</span>         <span class="n">adrp</span>       <span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x103563000</span>                            <span class="p">;</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">updateConversationClientExtension</span><span class="p">:</span><span class="nl">message</span><span class="p">:</span><span class="nl">wkBizConversation</span><span class="p">:</span><span class="nl">needSaveToDB</span><span class="p">:)</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a072c</span>         <span class="n">ldr</span>        <span class="n">x1</span><span class="p">,</span> <span class="p">[</span><span class="n">x8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x668</span><span class="p">]</span>                            <span class="p">;</span> <span class="s">&quot;isEncryptSpaceType:&quot;</span><span class="p">,</span><span class="k">@selector</span><span class="p">(</span><span class="nl">isEncryptSpaceType</span><span class="p">:)</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0730</span>         <span class="n">mov</span>        <span class="n">x2</span><span class="p">,</span> <span class="n">x19</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0734</span>         <span class="n">bl</span>         <span class="n">imp___stubs__objc_msgSend</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a0738</span>         <span class="n">eor</span>        <span class="n">w20</span><span class="p">,</span> <span class="n">w0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1</span>
</span><span class='line'><span class="mo">00000001001</span><span class="n">a073c</span>         <span class="n">b</span>          <span class="n">loc_1001a0704</span>
</span></code></pre></td></tr></table></div></figure>


<p>整理一下，可以用以下 Objective-C 代码进行表示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">needSendUnreadStatusWithMessage:</span><span class="p">(</span><span class="n">DTBizMessage</span> <span class="o">*</span><span class="p">)</span><span class="nv">message</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">message</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">message</span><span class="p">.</span><span class="n">creatorType</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">message</span><span class="p">.</span><span class="n">isMine</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">message</span><span class="p">.</span><span class="n">readStatus</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>既然知道了这块的代码逻辑，改变其行为也就不在话下了。</p>

<h4>编写安装 Tweak</h4>

<p>1、创建一个 Tweak 工程模版：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">➜</span>  <span class="n">DingTalk</span> <span class="n">nic</span><span class="p">.</span><span class="n">pl</span>
</span><span class='line'><span class="n">NIC</span> <span class="mf">2.0</span> <span class="o">-</span> <span class="n">New</span> <span class="n">Instance</span> <span class="n">Creator</span>
</span><span class='line'><span class="o">------------------------------</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">1.</span><span class="p">]</span> <span class="n">iphone</span><span class="o">/</span><span class="n">activator_event</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">2.</span><span class="p">]</span> <span class="n">iphone</span><span class="o">/</span><span class="n">activator_event</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">3.</span><span class="p">]</span> <span class="n">iphone</span><span class="o">/</span><span class="n">activator_listener</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="p">[</span><span class="mf">26.</span><span class="p">]</span> <span class="n">iphone</span><span class="o">/</span><span class="n">tweak</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="n">Choose</span> <span class="n">a</span> <span class="n">Template</span> <span class="p">(</span><span class="n">required</span><span class="p">)</span><span class="o">:</span> <span class="mi">26</span>
</span><span class='line'><span class="n">Project</span> <span class="n">Name</span> <span class="p">(</span><span class="n">required</span><span class="p">)</span><span class="o">:</span> <span class="n">DingTalkRecallBarrier</span>
</span><span class='line'><span class="n">Package</span> <span class="n">Name</span> <span class="p">[</span><span class="n">com</span><span class="p">.</span><span class="n">yourcompany</span><span class="p">.</span><span class="n">dingtalkrecallbarrier</span><span class="p">]</span><span class="o">:</span> <span class="n">com</span><span class="p">.</span><span class="n">tripleCC</span><span class="p">.</span><span class="n">dingtalkrecallbarrier</span>
</span><span class='line'><span class="n">Author</span><span class="o">/</span><span class="n">Maintainer</span> <span class="n">Name</span> <span class="p">[</span><span class="n">tripleCC</span><span class="p">]</span><span class="o">:</span> <span class="n">tripleCC</span>
</span><span class='line'><span class="p">[</span><span class="n">iphone</span><span class="o">/</span><span class="n">tweak</span><span class="p">]</span> <span class="n">MobileSubstrate</span> <span class="n">Bundle</span> <span class="n">filter</span> <span class="p">[</span><span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">springboard</span><span class="p">]</span><span class="o">:</span> <span class="n">com</span><span class="p">.</span><span class="n">laiwang</span><span class="p">.</span><span class="n">DingTalk</span>
</span><span class='line'><span class="p">[</span><span class="n">iphone</span><span class="o">/</span><span class="n">tweak</span><span class="p">]</span> <span class="n">List</span> <span class="n">of</span> <span class="n">applications</span> <span class="n">to</span> <span class="n">terminate</span> <span class="n">upon</span> <span class="n">installation</span> <span class="p">(</span><span class="n">space</span><span class="o">-</span><span class="n">separated</span><span class="p">,</span> <span class="sc">&#39;-&#39;</span> <span class="k">for</span> <span class="n">none</span><span class="p">)</span> <span class="p">[</span><span class="n">SpringBoard</span><span class="p">]</span><span class="o">:</span> <span class="n">DingTalk</span>
</span><span class='line'><span class="n">Instantiating</span> <span class="n">iphone</span><span class="o">/</span><span class="n">tweak</span> <span class="k">in</span> <span class="n">dingtalkrecallbarrier</span><span class="o">/</span><span class="p">...</span>
</span><span class='line'><span class="n">Done</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、编写 Tweak.m 和 Makefile 文件了：</p>

<p>Tweak.m：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">%</span><span class="n">hook</span> <span class="n">DTMessageControllerDataSource</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">needSendReadStatusInCellForRowWithMessage</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">arg1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">%</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Makefile：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">ARCHS</span> <span class="o">=</span> <span class="n">arm64</span>
</span><span class='line'><span class="n">TARGET</span> <span class="o">=</span> <span class="nl">iphone</span><span class="p">:</span><span class="nl">latest</span><span class="p">:</span><span class="mf">8.0</span>
</span><span class='line'><span class="n">include</span> <span class="err">$</span><span class="p">(</span><span class="n">THEOS</span><span class="p">)</span><span class="o">/</span><span class="n">makefiles</span><span class="o">/</span><span class="n">common</span><span class="p">.</span><span class="n">mk</span>
</span><span class='line'>
</span><span class='line'><span class="n">TWEAK_NAME</span> <span class="o">=</span> <span class="n">DingTalkRecallBarrier</span>
</span><span class='line'><span class="n">DingTalkRecallBarrier_FILES</span> <span class="o">=</span> <span class="n">Tweak</span><span class="p">.</span><span class="n">xm</span>
</span><span class='line'>
</span><span class='line'><span class="n">include</span> <span class="err">$</span><span class="p">(</span><span class="n">THEOS_MAKE_PATH</span><span class="p">)</span><span class="o">/</span><span class="n">tweak</span><span class="p">.</span><span class="n">mk</span>
</span><span class='line'>
</span><span class='line'><span class="n">after</span><span class="o">-</span><span class="n">install</span><span class="o">::</span>
</span><span class='line'>        <span class="n">install</span><span class="p">.</span><span class="n">exec</span> <span class="s">&quot;killall -9 DingTalk&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的 <code>needSendReadStatusInCellForRowWithMessage:</code> 直接返回 NO ，因为即使不执行原来的方法，也不会影响 App 的正常运行。</p>

<p>3、将 Tweak 编译打包安装到越狱设备上：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">➜</span>  <span class="n">dingtalkrecallbarrier</span> <span class="n">export</span> <span class="n">THEOS_DEVICE_IP</span><span class="o">=</span><span class="n">localhost</span>
</span><span class='line'><span class="err">➜</span>  <span class="n">dingtalkrecallbarrier</span> <span class="n">export</span> <span class="n">THEOS_DEVICE_PORT</span><span class="o">=</span><span class="mi">2223</span>
</span><span class='line'><span class="err">➜</span>  <span class="n">dingtalkrecallbarrier</span> <span class="n">make</span> <span class="n">package</span> <span class="n">install</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">Making</span> <span class="n">all</span> <span class="k">for</span> <span class="n">tweak</span> <span class="n">DingTalkRecallBarrier</span><span class="err">…</span>
</span><span class='line'><span class="n">make</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">:</span> <span class="n">Nothing</span> <span class="n">to</span> <span class="n">be</span> <span class="n">done</span> <span class="k">for</span> <span class="err">`</span><span class="n">internal</span><span class="o">-</span><span class="n">library</span><span class="o">-</span><span class="n">compile</span><span class="err">&#39;</span><span class="p">.</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">Making</span> <span class="n">stage</span> <span class="k">for</span> <span class="n">tweak</span> <span class="n">DingTalkRecallBarrier</span><span class="err">…</span>
</span><span class='line'><span class="cp">#Filter plist</span>
</span><span class='line'><span class="cp">#PreferenceLoader plist</span>
</span><span class='line'><span class="n">dm</span><span class="p">.</span><span class="nl">pl</span><span class="p">:</span> <span class="n">building</span> <span class="n">package</span> <span class="err">`</span><span class="n">com</span><span class="p">.</span><span class="n">triplecc</span><span class="p">.</span><span class="nl">dingtalkrecallbarrier</span><span class="p">:</span><span class="n">iphoneos</span><span class="o">-</span><span class="n">arm</span><span class="err">&#39;</span> <span class="k">in</span> <span class="err">`</span><span class="p">.</span><span class="o">/</span><span class="n">packages</span><span class="o">/</span><span class="n">com</span><span class="p">.</span><span class="n">triplecc</span><span class="p">.</span><span class="n">dingtalkrecallbarrier_0</span><span class="mf">.0.1</span><span class="o">-</span><span class="mi">13</span><span class="o">+</span><span class="n">debug_iphoneos</span><span class="o">-</span><span class="n">arm</span><span class="p">.</span><span class="n">deb</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="n">Installing</span><span class="err">…</span>
</span><span class='line'><span class="n">Selecting</span> <span class="n">previously</span> <span class="n">unselected</span> <span class="n">package</span> <span class="n">com</span><span class="p">.</span><span class="n">triplecc</span><span class="p">.</span><span class="n">dingtalkrecallbarrier</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="n">Reading</span> <span class="n">database</span> <span class="p">...</span> <span class="mi">1230</span> <span class="n">files</span> <span class="n">and</span> <span class="n">directories</span> <span class="n">currently</span> <span class="n">installed</span><span class="p">.)</span>
</span><span class='line'><span class="n">Preparing</span> <span class="n">to</span> <span class="n">unpack</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">_theos_install</span><span class="p">.</span><span class="n">deb</span> <span class="p">...</span>
</span><span class='line'><span class="n">Unpacking</span> <span class="n">com</span><span class="p">.</span><span class="n">triplecc</span><span class="p">.</span><span class="n">dingtalkrecallbarrier</span> <span class="p">(</span><span class="mf">0.0.1</span><span class="o">-</span><span class="mi">13</span><span class="o">+</span><span class="n">debug</span><span class="p">)</span> <span class="p">...</span>
</span><span class='line'><span class="n">Setting</span> <span class="n">up</span> <span class="n">com</span><span class="p">.</span><span class="n">triplecc</span><span class="p">.</span><span class="n">dingtalkrecallbarrier</span> <span class="p">(</span><span class="mf">0.0.1</span><span class="o">-</span><span class="mi">13</span><span class="o">+</span><span class="n">debug</span><span class="p">)</span> <span class="p">...</span>
</span><span class='line'><span class="n">install</span><span class="p">.</span><span class="n">exec</span> <span class="s">&quot;killall -9 DingTalk&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>小结</h2>

<p>第一次逆向实践，虽说编写的 Tweak 代码才几行，但其定位过程却是一波三折，可能因为经验不足导致定位不准确吧，不过逆向需要很好的耐心倒不假。因为以前做过即时通讯，所以对钉钉消息收发流程多少还是会有点自己的理解，这无形中也推进了我逆向的进度。</p>

<p>最后，这次逆向让我时隔三年之后，再一次有机会利用终端调试程序，还记得以前是做 Linux 应用程序时在嵌入式设备中使用 gdb 进行调试。决定以后在 Xcode 中也要多用命令行进行调试了，实在是舒畅。</p>

<h2>参考</h2>

<p><a href="https://book.douban.com/subject/26363333/">iOS应用逆向工程</a><br>
<a href="http://www.swiftyper.com/2017/02/15/dingtalk-fake-gps/">iOS 逆向实战 - 钉钉签到远程“打卡”</a><br>
<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0802b/CSET_CSINC.html">ARM 64 常用汇编指令</a><br>
<a href="https://lldb.llvm.org/tutorial.html">The LLDB Debugger Tutorial</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给 APP 添加悬浮助手]]></title>
    <link href="http://triplecc.github.io/blog/2017-04-28-gei-apptian-jia-xuan-fu-zhu-shou/"/>
    <updated>2017-04-28T19:08:23+08:00</updated>
    <id>http://triplecc.github.io/blog/gei-apptian-jia-xuan-fu-zhu-shou</id>
    <content type="html"><![CDATA[<p>自组内力推业务组件化以来，项目组的业务组件数量也渐具规模。虽然在版本依赖和个别组件独立性等细节上略有欠缺，但是在一定程度上还是提升了开发效率。</p>

<p>既然是业务组件，在某些场景下就需要登录获取相关权限后才能进一步操作。由于项目中登录模块并没有重构过，代码风格和书写逻辑极差，加上针对 B 端的 APP 登录逻辑较为复杂，包括切店等一系列操作，导致给客户使用的登录逻辑界面，在开发阶段难以接入业务组件，即使接入了，使用体验（没错，开发时也讲究一个体验）和开发效率也是会打一定折扣。</p>

<p>那么问题来了，在开发阶段，怎样做才能让业务模块更加简便、优雅、无侵入地接入登录功能呢？进一步讲，如果不局限于登录功能，如何给业务模块提供通用工具入口？</p>

<!--more-->


<h2>灵感</h2>

<p>在找到答案之前，我注意到了越狱设备上的一款强大的调试插件 &mdash; FLEXLoader。</p>

<p>FLEXLoader，其在 GitHub 上的项目名为 <a href="https://github.com/Flipboard/FLEX">FLEX</a>，它不仅可以集成进自家项目中，对开发的 APP 进行视图、内存级别上的调试，而且在越狱设备上，通过 FLEXLoader 可以查看安装的其它 APP 。 在这里就不对 FLEXLoader 强大的功能做过多介绍了，主要借鉴其 ToolBar 的展示方法来解决上面的疑问。</p>

<p>在越狱设备中，开启想要观察 APP 的 FLEXLoader 功能，然后打开 APP ，就会看到有如下工具栏悬浮于界面之上：</p>

<p><img src="http://triplecc.github.io/images/Snip20170430_4.PNG" alt="" /></p>

<p>接下来，对 FLEX 这部分功能进行简略地解读。</p>

<h2>FLEX 工具栏</h2>

<p>首先， FLEXLoader 为了能让工具栏悬浮于 APP 所有界面之上，独立创建了一个高 windowLevel 的 FLEXWindow ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">frame</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">frame</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">clearColor</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// Some apps have windows at UIWindowLevelStatusBar + n.</span>
</span><span class='line'>        <span class="c1">// If we make the window level too high, we block out UIAlertViews.</span>
</span><span class='line'>        <span class="c1">// There&#39;s a balance between staying above the app&#39;s windows and staying below alerts.</span>
</span><span class='line'>        <span class="c1">// UIWindowLevelStatusBar + 100 seems to hit that balance.</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">windowLevel</span> <span class="o">=</span> <span class="n">UIWindowLevelStatusBar</span> <span class="o">+</span> <span class="mf">100.0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个 window 是 FLEXLoader 上所有视图得以展示的基础。因为这个 window 的层级比状态栏还高，会对 APP 原本的事件响应产生影响，所以就有如下代码对事件进行过滤 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">pointInside:</span><span class="p">(</span><span class="bp">CGPoint</span><span class="p">)</span><span class="nv">point</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="bp">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">pointInside</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">eventDelegate</span> <span class="nl">shouldHandleTouchAtPoint</span><span class="p">:</span><span class="n">point</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pointInside</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">pointInside</span><span class="p">:</span><span class="n">point</span> <span class="nl">withEvent</span><span class="p">:</span><span class="n">event</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pointInside</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过 <code>shouldHandleTouchAtPoint:point</code> 决定是否应该让 FLEXWindow 响应当前触点。而这部分逻辑是根据悬浮工具栏来编写的，对于我目前的需求来说，如果触点在工具栏视图上，就响应点击事件，否则让系统传递给 APP 自身的 window。</p>

<p>FLEXWindow 中还有一个比较重要的是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">canBecomeKeyWindow</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">eventDelegate</span> <span class="n">canBecomeKeyWindow</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">其实就是：</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">_canBecomeKeyWindow</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">eventDelegate</span> <span class="n">canBecomeKeyWindow</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然这里涉及到了私有 API <code>_canBecomeKeyWindow</code>，但是悬浮助手本身就是在开发环境中使用的，所以并没有太大影响。而且这一句非常重要，在 APP 悬浮助手中，我直接返回了 NO ，这样能够减少意外情况的发生。特别是项目中很多跳转使用到了 <code>[UIApplication sharedApplication].keyWindow.rootViewController</code> （原项目中是个 UINavigationController），可能会出现 keyWindow 指向不正确而导致崩溃的情况。</p>

<p>这里插个题外话，NSWindow 有一个 <code>canBecomeKey</code> 的公开方法，功能和 UIWindow <code>_canBecomeKeyWindow</code>一样，UIWindow 却把它设为了私有方法。或许是因为 Mac 上常常通过创建 window 来展示新内容，而 iOS 更多的是改变 window 中的视图吧。还有 keyWindow 和普通 window 相比，优势是能接收当前的键盘和非触摸事件，而触摸事件则是先传递到当前触摸到的 window 上，windowLevel 越高，在响应链中就越靠前。所以在悬浮助手中，我让 <code>_canBecomeKeyWindow</code> 直接返回了 NO 。</p>

<p>窗口创建完毕，接下来需要展示工具栏了。 FLEXLoader 创建了一个 FLEXExplorerViewController 作为FLEXWindow 的 rootViewController 来展示内容。由于工具栏在 APP 的整个生命周期中都会存在，FLEXLoader 还创建了 FLEXManager 单例来管理工具窗口，这样就能通过下面代码控制工具栏显示与否：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showExplorer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">explorerWindow</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">hideExplorer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">explorerWindow</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>FLEX 工具栏差不多就是以上述方式实现的，接下来就可以着手开发自己的悬浮助手了。</p>

<h2>悬浮助手</h2>

<p>悬浮助手，顾名思义，只是一个助手，因此即便去除这部分代码，工程应该依然能编译通过。用组件化开发的语言来描述，悬浮助手只是一个 Pod ，添加和去除应该只需要在 Podfile 中增删一行代码。</p>

<p>（更新 2017-6-8：可以使用 <code>:configurations =&gt; ['Debug']</code>，只在 Debug 配置下编译该库）</p>

<p>不侵入业务的话，使用 swizzling method 是个不错的选择。在这个需求中，我对 UIViewController 的 <code>viewDidAppear</code> 进行了替换，然后初始化悬浮助手窗口管理者：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tpc_viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">tpc_viewDidAppear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="err">已经初始化过</span><span class="p">)</span>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>       <span class="err">初始化悬浮助手管理者，展示界面</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>只要把基础的悬浮做好，后面添加功能就比较方便了。下面是我自己的悬浮助手界面：</p>

<p><img src="http://triplecc.github.io/images/Snip20170430_5.png" alt="" /></p>

<p>目前为止，这个助手具备以下功能：</p>

<ul>
<li>单击，出现上方图片的功能入口，可选择对应功能</li>
<li>双击，登录入口，输入手机、密码，点击登录</li>
<li>三击，出现切店入口，点击黄色/绿色条目，切换至对应店铺</li>
<li>四击，切换网络环境</li>
<li>长按拖动</li>
</ul>


<p>并且在启动工程后，悬浮助手会默认登录一次，获取用户信息，这样的话开发需要登录权限的业务组件就非常方便了。</p>

<h2>参考</h2>

<p><a href="https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/WindowAndScreenGuide/WindowScreenRolesinApp/WindowScreenRolesinApp.html#//apple_ref/doc/uid/TP40012555-CH4-SW3">Understanding Windows and Screens</a></p>

<p><a href="https://developer.apple.com/reference/uikit/uiwindow">UIKit-UIWindow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用usbmuxd连接越狱设备]]></title>
    <link href="http://triplecc.github.io/blog/2017-04-09-shi-yong-usbmuxdlian-jie-iphone/"/>
    <updated>2017-04-09T14:28:11+08:00</updated>
    <id>http://triplecc.github.io/blog/shi-yong-usbmuxdlian-jie-iphone</id>
    <content type="html"><![CDATA[<p>最近通过 wifi ssh 到越狱设备上时，出了个奇怪的问题： <br>
ssh 一直不结束，没提示成功，也没有提示失败。<br></p>

<p>下面是自己对越狱设备进行“自测”的过程：</p>

<table>
<thead>
<tr>
<th> 操作           </th>
<th style="text-align:center;">    结果     </th>
</tr>
</thead>
<tbody>
<tr>
<td> iOS ssh mac ip          </td>
<td style="text-align:center;"> 成功 </td>
</tr>
<tr>
<td> iOS ssh localhost          </td>
<td style="text-align:center;"> 成功 (sshd 是跑起来的)</td>
</tr>
<tr>
<td> iOS ssh 自身 ip          </td>
<td style="text-align:center;"> 失败 </td>
</tr>
<tr>
<td> mac ssh iOS ip           </td>
<td style="text-align:center;"> 失败 </td>
</tr>
</tbody>
</table>


<p><br>
上面的失败是指没有返回 ssh 的结果，一直卡在连接阶段。</p>

<!--more-->


<p>谷歌了很多资料，重装了 openSSH，也试过重置网络设置，最终还是不了了之。这样就只能利用 usbmuxd 连接了。</p>

<p>首先是安装 usbmuxd ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install usbmuxd</span></code></pre></td></tr></table></div></figure>


<p>然后看下 iproxy 的使用说明：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iproxy LOCAL_TCP_PORT DEVICE_TCP_PORT [UDID]</span></code></pre></td></tr></table></div></figure>


<p>也就是执行以下命令后：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iproxy 2223 22 &</span></code></pre></td></tr></table></div></figure>


<p>会将越狱设备的 22 端口 (ssh用) 映射到本地的 2223 端口。 这样就可以通过 <code>ssh root@localhost -p 2223</code> 连接越狱设备了。</p>

<p>如果需要用 lldb 调试越狱设备上的进程，需要先将 connect 的端口映射到本地，这里以 1234 端口为例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iproxy 1234 1234 &</span></code></pre></td></tr></table></div></figure>


<p>然后打开 lldb ，输入以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>process connect connect://localhost:1234</span></code></pre></td></tr></table></div></figure>


<p>连接越狱设备，输入以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>debugserver *:1234 -a 进程名</span></code></pre></td></tr></table></div></figure>


<p>只要越狱设备上的 debugserver （重签名过的）正常运行， 就可以连接通过 lldb 进行远程调试了。</p>

<p>使用 theos 的 <code>make package install</code> 命令时，需要先添加下面两个环境变量 ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export THEOS_DEVICE_IP=localhost
</span><span class='line'>export THEOS_DEVICE_PORT=2223</span></code></pre></td></tr></table></div></figure>


<p>还有如果不想每次 ssh 都输入密码，可以进行以下操作 ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ssh-copy-id
</span><span class='line'>ssh-copy-id root@localhost -p 2223</span></code></pre></td></tr></table></div></figure>


<p>这样下次 ssh 相同的设备，就不需要输入密码了。</p>

<p>最后，如果输入 iproxy 时，显示可执行文件不存在，可以执行 <code>brew list usbmuxd</code> 找下可执行文件的路径，添加到 $PATH 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何愉快地使用命令行]]></title>
    <link href="http://triplecc.github.io/blog/2017-03-19-ru-he-yu-kuai-di-shi-yong-ming-ling-xing/"/>
    <updated>2017-03-19T19:08:33+08:00</updated>
    <id>http://triplecc.github.io/blog/ru-he-yu-kuai-di-shi-yong-ming-ling-xing</id>
    <content type="html"><![CDATA[<p>古人云：</p>

<blockquote><p>工欲善其事，必先利其器</p></blockquote>

<p>从进入软件开发这一行业开始算起，我也算是陆陆续续地接触了三大主流操作系统。虽说不是很深入地使用过每个系统，但从自己的个人喜好及以往的使用经历来看， Mac 无疑是对开发者最友好的一个系统。</p>

<p>不过即便如此，作为一个 Vim 爱好者，我还是非常怀念当初在 Ubuntu 字符终端下编写代码的那种畅（zhuang）爽（bi）感，那种双手不需要离开键盘的紧凑感。</p>

<p>好的工具配置，既能极大地促进开发效率的提升，又能让开发者保持一个心情愉悦的状态。下面纪录下自己常用的一些工具软件，这些软件能减少让开发者对触控板 / 鼠标的依赖。</p>

<!--more-->


<h2>Alfred</h2>

<p>Mac 上有一款软件，江湖人称 Mac 神器，多年来没有同类软件出其右，这款软件便是大名鼎鼎的  Alfred 。</p>

<p>Alfred 从 2 代开始，便提供了成熟的 workflow 插件机制，由此这个软件具备了极其强大的扩展性。开发者也利用这个特性，开发了很多天马行空的 workflow ，可以说 Alfred 已经不仅仅是一个简单的工具软件了。</p>

<p>Alfred 有很多扩展，感兴趣的可以查看 <a href="https://github.com/hzlzh">hzlzh</a> <a href="http://alfredworkflow.com/">收集的AlfredWorkflow站点</a>，这里只列举一些基本的用法。</p>

<table>
<thead>
<tr>
<th> 功能           </th>
<th style="text-align:center;">    快捷键     </th>
</tr>
</thead>
<tbody>
<tr>
<td> 呼出           </td>
<td style="text-align:center;"> option + space </td>
</tr>
<tr>
<td> 打开应用          </td>
<td style="text-align:center;"> 呼出后，输入应用名，选择列觉的应用，回车打开<br> command + 数字 快速打开 </td>
</tr>
<tr>
<td> 定位文件          </td>
<td style="text-align:center;"> 呼出后，输入 find + 文件名 </td>
</tr>
<tr>
<td> 打开文件           </td>
<td style="text-align:center;"> 呼出后，输入 open + 文件名 </td>
</tr>
<tr>
<td> 文件中搜索文本           </td>
<td style="text-align:center;"> 呼出后，输入 in + 文本 </td>
</tr>
<tr>
<td> 计算器           </td>
<td style="text-align:center;"> 呼出后，输入计算内容 </td>
</tr>
<tr>
<td> Mac 基本操作           </td>
<td style="text-align:center;"> 呼出后，输入 shutdown、lock 等基本操作 </td>
</tr>
</tbody>
</table>


<p><br>
不过仅仅借助这些基本用法，开发者就能够直接通过键盘快速打开程序 / 文件等，再也不需要用触控板 / 鼠标乱点一通了。</p>

<h2>iTerm</h2>

<p>iTerm 是一款针对 Mac 用户打造的一款免费终端工具，可以说是 Mac 下最好用的终端工具，没有之一 。对于经常需要和命令行打交道的开发者来说，选一款好用的终端工具是必不可少的。</p>

<p>iTerm 对复制、打开等操作做了优化，开发者可以双击选中单词，三击选中整行，而一旦选中即复制到粘贴板。并且使用 commmand + 光标点击的方式，可打开文件、URL等，这些细节优化，大大减少了开发过程中多余的操作，从而加快日常开发效率。</p>

<p>翻看 iTerm 的发布文档，其中，iTerm2 2.0 Released 的新特性中有这么一段话：</p>

<blockquote><p>Deep tmux integration. iTerm2 can speak directly to tmux and display its virtual windows as native windows or tabs, making tmux much easier to navigate.</p></blockquote>

<p>也就是说新版的 iTerm 能和 tmux 进行深度集成，开发者可以更加舒适地使用 tmux 了。不过我还是不喜欢集成后的样式，所以并没有使用集成版本。但是直接在 iTerm 下使用 tmux ，会出现一些问题，比如 triggers 的功能异常（执行 clear 可以在一定程度上规避）、调整面板尺寸不方便等（因为 tmux 是重绘屏幕，所以会造成 <a href="https://groups.google.com/forum/#!topic/iterm2-discuss/pHpYJLTKHPQ">多次匹配的问题</a>），想要了解集成版本的优势和使用方式，可以点击<a href="https://gitlab.com/gnachman/iterm2/wikis/TmuxIntegration">这里</a>。</p>

<p>如果单独使用 iTerm 时（ tmux 的集成版本也可以），triggers 这个功能还是能在许多地方派上用场的。比如 ssh 连接远程服务时，可以触发 Open Password Manager 动作，直接选择密码；进行一些异步操作时，可以对执行成功的输出文本进行正则匹配，触发 Post Notification 动作。这个 triggers 有较强的定制性，可依个人业务和习惯进行设置。</p>

<p>就拿我自己最近的一个经历来说，因为项目组推进组件化，某些依赖多的工程执行 <code>pod update</code> 的时间会比较长，而我又不想每次切回来看更新是否完成。解决方法是，设置 iTerm triggers 匹配更新成功后的文本，并发送一个更新成功的通知，这样在更新 Pods 的那段时间，我就可以先去做后面的事情，等看到成功的通知，再回来处理相关任务。</p>

<p>下面继续列举一些个人比较常用的快捷键。</p>

<h5>命令行字符操作快捷键：</h5>

<table>
<thead>
<tr>
<th> 功能           </th>
<th style="text-align:center;">    快捷键     </th>
</tr>
</thead>
<tbody>
<tr>
<td> 到行首           </td>
<td style="text-align:center;"> ctrl + a </td>
</tr>
<tr>
<td> 到行尾           </td>
<td style="text-align:center;"> ctrl + e </td>
</tr>
<tr>
<td> 前进后退           </td>
<td style="text-align:center;"> ctrl + f/b <br> 会和tmux默认的prefix key冲突，基本不用</td>
</tr>
<tr>
<td> 前向/后向删除字符           </td>
<td style="text-align:center;"> ctrl + d/h </td>
</tr>
<tr>
<td> 前向/后向删除单词           </td>
<td style="text-align:center;"> ctrl + w/alt + d </td>
</tr>
<tr>
<td> 清除当前行/到行尾           </td>
<td style="text-align:center;"> ctrl + u/k </td>
</tr>
<tr>
<td> 交换光标处文本           </td>
<td style="text-align:center;"> ctrl + t </td>
</tr>
<tr>
<td> 上一条命令           </td>
<td style="text-align:center;"> ctrl + p </td>
</tr>
<tr>
<td> 搜索历史命令           </td>
<td style="text-align:center;"> ctrl + r <br> 后面默认会和fzf结合 </td>
</tr>
</tbody>
</table>


<p><br>
需要留意的是，上面的快捷键不仅仅适用于 iTerm ，其中的绝大多数快捷键也可以在 mac 自带终端以及 Linux 的终端上使用。
<br></p>

<h5>功能操作快捷键：</h5>

<table>
<thead>
<tr>
<th> 功能           </th>
<th style="text-align:center;">    快捷键     </th>
</tr>
</thead>
<tbody>
<tr>
<td> 清屏           </td>
<td style="text-align:center;"> command + r <br> 对tmux有干扰，基本不用 </td>
</tr>
<tr>
<td> 回放操作历史           </td>
<td style="text-align:center;"> command + option + b </td>
</tr>
<tr>
<td> 剪切板历史      </td>
<td style="text-align:center;"> command + shift + h </td>
</tr>
<tr>
<td> 查看历史命令     </td>
<td style="text-align:center;"> command + ; </td>
</tr>
<tr>
<td> 搜索内容      </td>
<td style="text-align:center;"> command + f <br> 输入内容后 + (tab / tab + shift = 前向 / 后向推移) <br> 内容会默认拷贝至剪切板 </td>
</tr>
<tr>
<td> 高亮光标位置     </td>
<td style="text-align:center;"> command + / </td>
</tr>
<tr>
<td> 展开所有tab     </td>
<td style="text-align:center;"> command + option + e </td>
</tr>
</tbody>
</table>


<p><br></p>

<h5>分屏操作快捷键</h5>

<p>由于后面会使用 tmux 进行分屏，所以这一部分基本不使用。不过如果使用 tmux 集成版本的话，这一部分的使用频率还是比较高的。</p>

<p>更多信息，可以查看  <a href="https://www.iterm2.com/documentation.html">iTerm 官方文档</a></p>

<h2>zsh</h2>

<p>关于脚本解释器，即 shell ， Mac 提供了以下几种：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/bin/bash                                          
</span><span class='line'>/bin/csh                                           
</span><span class='line'>/bin/ksh                                           
</span><span class='line'>/bin/sh                                            
</span><span class='line'>/bin/tcsh                                          
</span><span class='line'>/bin/zsh</span></code></pre></td></tr></table></div></figure>


<p>Mac 默认的 shell 是 bash （ /bin/sh ），那么为什么不用系统默认的 bash，而用 zsh 呢？</p>

<p>主要是因为 zsh 强大的可定制性。即使还没对 zsh 进行配置，它也具备了一些非常实用的功能：</p>

<ul>
<li>可以补全命令 / 路径 / 参数等，tab 可展示所有待选项，并可使用 tab / tab + shift / ctrl + f / ctrl + b / ctrl + n / ctrl + p 进行选择。（如果使用 tmux 默认的 prefix ， ctrl  + bb 才会发送 ctrl + b）</li>
<li>不需要输入 cd 跳转，直接输入路径即可。输入 d ，可列出访问过的目录，继续输入相应数字可进入目录。</li>
<li>根据前缀查找历史命令，比如输入 git ，按上方向键，查找的是所有用过的 git 命令，而不是全部命令。</li>
<li>还有别名，搜索等，更多内容可以查看 <a href="https://www-s.acm.illinois.edu/workshops/zsh/why.html">Why zsh?</a>。</li>
</ul>


<p>前面说了， zsh 最大的优势在于定制性强，那么配置起来会不会很复杂？关于这个，开源社区已经有现成的了－－ <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> 。这个就不展开了， <a href="https://github.com/robbyrussell/oh-my-zsh/wiki">wiki</a> 上写的非常详细。</p>

<h5>安装方式</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span></code></pre></td></tr></table></div></figure>


<h2>autojump</h2>

<p>autojump 是一个优化目录切换的命令行工具。上文说了，zsh 不仅缩减了 cd 命令，而且优化了切换目录时的体验，那么我还要 autojump 干什么呢？</p>

<p>答案是 autojump 可以用一行命令直达目标，而不需要开发者频繁地敲击 tab 来补全路径。 autojump 会以某种方式纪录使用者访问过的目录的次数，并以次数为基准进行跳转，次数越多的优先级越高。</p>

<p>下面是 autojump 的一些基本用法：</p>

<table>
<thead>
<tr>
<th> 功能           </th>
<th style="text-align:center;">    快捷键     </th>
</tr>
</thead>
<tbody>
<tr>
<td> 跳往目录           </td>
<td style="text-align:center;"> j + 部分目录名 </td>
</tr>
<tr>
<td> 跳往目录（子目录优先）           </td>
<td style="text-align:center;"> jc + 部分目录名 </td>
</tr>
<tr>
<td> 在Finder中打开目录      </td>
<td style="text-align:center;"> jo + 目录部分字母 </td>
</tr>
<tr>
<td> 在Finder中打开目录（子目录优先）    </td>
<td style="text-align:center;"> jco + 部分目录名 </td>
</tr>
<tr>
<td> 增加当前目录权重    </td>
<td style="text-align:center;"> j -i + 增加数值 </td>
</tr>
<tr>
<td> 减少当前目录权重    </td>
<td style="text-align:center;"> j -d + 减少数值 </td>
</tr>
<tr>
<td> 查看所有目录权重    </td>
<td style="text-align:center;"> j -s </td>
</tr>
<tr>
<td> 移除不存在目录    </td>
<td style="text-align:center;"> j &ndash;purge </td>
</tr>
<tr>
<td> 增加目录    </td>
<td style="text-align:center;"> j -a + 目录路径 </td>
</tr>
</tbody>
</table>


<p><br>
更多信息，可以使用万能的 <code>--help</code> 查看。</p>

<h5>安装方式</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install autojump
</span><span class='line'>
</span><span class='line'>// .zshrc 中添加以下内容
</span><span class='line'>[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh</span></code></pre></td></tr></table></div></figure>


<h2>tmux</h2>

<p>对于 tmux (terminal multiplexer) ，其自身的 man 手册是这么描述的：</p>

<blockquote><p>tmux is a terminal multiplexer: it enables a number of terminals to be created,
     accessed, and controlled from a single screen.  tmux may be detached from a
     screen and continue running in the background, then later reattached.</p></blockquote>

<p>也就是说 tmux 是一个终端复用工具，它允许在一个物理窗口上运行多个终端会话，所以多用于远程登录时保留操作现场，不过个人也比较喜欢在 Mac Pro 开发机上使用。下面是使用 tmux 后呈现的基本界面：</p>

<p><img src="http://triplecc.github.io/images/Snip20170329_6.png" alt="" /></p>

<p>如上图所示，tmux 主要由三种元素构成： session、window、pane。它们之间是从属关系，也就是说 session 可以包含多个 window， window 可以包含多个 pane ，而最终展示在交互界面上可供操作的窗口，其实都是 pane 。</p>

<p>需要注意的是，我在 Mac mini 和 Mac Pro 上都安装了 tmux ，之所以上图底部有两条 bar （对应 work session 和 macmini session），是因为我通过 ssh 远程登录了 Mac mini 并开启了 Mac mini 的 tmux ，上方三个可见的 pane 展示的信息都属于 Mac mini 。</p>

<h3>配置 tmux</h3>

<p>实现 tmux 的基本配置并不复杂，只需要在 <code>~/.tmux.conf</code> 添加需要的功能即可，不过这里我还是要推荐下 <a href="https://github.com/gpakosz/.tmux">gpakosz 分享的配置文件</a> (目前本人也是用的这个配置文件)，因为这个样式看起来实在是非常舒服。 执行以下命令安装 <code>.tmux</code> :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd
</span><span class='line'>git clone https://github.com/gpakosz/.tmux.git
</span><span class='line'>ln -s -f .tmux/.tmux.conf
</span><span class='line'>cp .tmux/.tmux.conf.local .</span></code></pre></td></tr></table></div></figure>


<p>这个配置文件实现了常用的功能快捷键绑定，如果要添加额外的配置项，可以编辑 <code>~/.tmux.conf.local</code> 文件。下面是我自己添加的配置项：</p>

<ul>
<li>开启 vi 模式</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -g mode-keys vi</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置默认 shell 为zsh</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set-option -g default-shell /bin/zsh</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>绑定系统剪切版</p>

<ul>
<li>安装 reattach-to-user-namespace</li>
</ul>


<pre><code class="``">  brew install reattach-to-user-namespace
</code></pre>

<ul>
<li>绑定拷贝快捷键：</li>
</ul>


<pre><code class="``">  bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
  bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
</code></pre></li>
<li><p>由于 tmux 在关机重启后，无法有效地进行 attach ，所以添加重启时恢复 tmux 上下文的 <a href="https://github.com/tmux-plugins/tmux-resurrect">tmux-resurrect</a>  (需要注意的是 tmux-resurrect 作者推荐使用 tmux <a href="https://github.com/tmux-plugins/tpm.git">插件管理器</a> 进行安装，不过这样做会出现 <a href="https://github.com/gpakosz/.tmux/issues/61">奇怪的警告</a>) (UPDATE 2017-5-27: 去除警告，参考<a href="https://github.com/tmux-plugins/tpm/blob/master/docs/tpm_not_working.md">这里</a>)</p>

<ul>
<li>克隆 tmux-resurrect 仓库</li>
</ul>


<pre><code class="``">  git clone https://github.com/tmux-plugins/tmux-resurrect ~/clone/path
</code></pre>

<ul>
<li>在 <code>~/.tmux.conf.local</code> 中添加以下语句</li>
</ul>


<pre><code class="``">  run-shell ~/clone/path/resurrect.tmux
</code></pre></li>
</ul>


<h3>tmux 常用操作</h3>

<p>在开始之前，说明下 tmux 的所有快捷键操作都需要先执行一次 &lsquo;C-b&rsquo; ， 即 ctrl + b。 如果在上图的场景中，需要通过快捷键操控 Mac mini 的 pane，那么就按两次 &lsquo;C-b&rsquo; 。
<br></p>

<h5>Session</h5>

<table>
<thead>
<tr>
<th> 功能           </th>
<th style="text-align:center;">    快捷键     </th>
</tr>
</thead>
<tbody>
<tr>
<td> 查看当前所有会话           </td>
<td style="text-align:center;"> s <br> tmux list-sessions <br> 方向键 + 回车 进行选择切换 </td>
</tr>
<tr>
<td> 分离当前会话           </td>
<td style="text-align:center;"> d <br> tmux detach </td>
</tr>
<tr>
<td> 重命名当前会话      </td>
<td style="text-align:center;"> $ <br> tmux rename-session -t </td>
</tr>
</tbody>
</table>


<p><br></p>

<h5>Window</h5>

<table>
<thead>
<tr>
<th> 功能           </th>
<th style="text-align:center;">    快捷键     </th>
</tr>
</thead>
<tbody>
<tr>
<td> 创建窗口           </td>
<td style="text-align:center;"> c <br> tmux select-window -t </td>
</tr>
<tr>
<td> 切换到特定窗口           </td>
<td style="text-align:center;"> 数字 <br> tmux select-window -t </td>
</tr>
<tr>
<td> 关闭当前窗口           </td>
<td style="text-align:center;"> &amp; <br> tmux kill-window -t </td>
</tr>
<tr>
<td> 列出所有窗口           </td>
<td style="text-align:center;"> w <br> tmux list-windows </td>
</tr>
<tr>
<td> 重命名当前窗口           </td>
<td style="text-align:center;"> , <br> tmux rename-window -t </td>
</tr>
</tbody>
</table>


<p><br></p>

<h5>Pane</h5>

<table>
<thead>
<tr>
<th> 功能           </th>
<th style="text-align:center;">    快捷键     </th>
</tr>
</thead>
<tbody>
<tr>
<td> 垂直/水平分隔窗格           </td>
<td style="text-align:center;"> % / &ldquo; <br> tmux split-window -h/v </td>
</tr>
<tr>
<td> 关闭窗格           </td>
<td style="text-align:center;"> x <br> tmux kill-pane -t </td>
</tr>
<tr>
<td> 选中特定窗格      </td>
<td style="text-align:center;"> q <br> 出现数字后 + 数字 </td>
</tr>
<tr>
<td> 切换窗格      </td>
<td style="text-align:center;"> h/j/k/l <br> tmux select-pane -t </td>
</tr>
<tr>
<td> 交换当前窗格位置      </td>
<td style="text-align:center;"> { / } </td>
</tr>
<tr>
<td> 分离当前窗格到窗口     </td>
<td style="text-align:center;"> + </td>
</tr>
</tbody>
</table>


<p><br></p>

<h5>其他操作</h5>

<table>
<thead>
<tr>
<th> 功能           </th>
<th style="text-align:center;">    快捷键     </th>
</tr>
</thead>
<tbody>
<tr>
<td> 显示所有快捷键          </td>
<td style="text-align:center;"> ? </td>
</tr>
<tr>
<td> 加载配置文件      </td>
<td style="text-align:center;"> r </td>
</tr>
<tr>
<td>   显示所有命令         </td>
<td style="text-align:center;">  tmux list-commands </td>
</tr>
<tr>
<td> 清除所有tmux元素并退出      </td>
<td style="text-align:center;"> tmux kill-server </td>
</tr>
<tr>
<td> 接入已开启的会话      </td>
<td style="text-align:center;"> tmux attach <br> 远程登录恢复上下文就靠它了 </td>
</tr>
</tbody>
</table>


<p><br>
另外，如果使用 gpakosz 的 配置文件，按 <code>+</code> 可以抽离当前 pane 为一个独立 window，再按一次 <code>+</code> ，这个 window 又会回到抽离前的状态，对于 13 寸屏幕的我，还是非常便利的。</p>

<p>更多命令可以查看 tmux 的 man 手册。</p>

<h5>安装方式</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install tmux</span></code></pre></td></tr></table></div></figure>


<h2>fzf</h2>

<p>fzf 是在终端使用的一款模式搜索命令行工具，方便开发者快速地定位历史命令或者文件，并且可以和 tmux 结合起来使用。</p>

<p>下面是我常用的两个快捷键：</p>

<table>
<thead>
<tr>
<th> 功能           </th>
<th style="text-align:center;">    快捷键     </th>
</tr>
</thead>
<tbody>
<tr>
<td> 显示历史命令          </td>
<td style="text-align:center;"> ctrl + r </td>
</tr>
<tr>
<td> 显示当前目录下所有文件      </td>
<td style="text-align:center;"> ctrl + t </td>
</tr>
</tbody>
</table>


<p><br></p>

<h5>安装方式</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install fzf
</span><span class='line'>
</span><span class='line'>// .zshrc 中添加下面语句
</span><span class='line'>/usr/local/opt/fzf/install</span></code></pre></td></tr></table></div></figure>


<h2>其他实用小软件</h2>

<ul>
<li><p>vimium (Chrome 插件)</p>

<ul>
<li>通过 vim 快捷键，进行网页浏览，超棒 ( shift + ? 可以列出所有快捷键 )</li>
</ul>
</li>
<li><p>shiftlt</p>

<ul>
<li>切屏神器，可以通过快捷键控制应用窗口大小</li>
</ul>
</li>
<li><p>snap</p>

<ul>
<li>可以绑定快捷键，快速打开应用</li>
</ul>
</li>
</ul>


<h2>参考文章</h2>

<p><a href="http://cenalulu.github.io/linux/tmux/">Tmux - Linux从业者必备利器</a><br>
<a href="http://tangosource.com/blog/a-tmux-crash-course-tips-and-tweaks/">A tmux crash course tips and tweaks</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSJSONSerialization和NSNumber的事故现场]]></title>
    <link href="http://triplecc.github.io/blog/2017-03-09-nsjsonserializationhe-nsnumber/"/>
    <updated>2017-03-09T17:20:39+08:00</updated>
    <id>http://triplecc.github.io/blog/nsjsonserializationhe-nsnumber</id>
    <content type="html"><![CDATA[<p>最近同事在和后台联调时，出现了一个诡异的问题：后台传输的价格为 0.07 ，但是到了 iOS 这边，就变成了 0.07000000000000001 。奇怪的是安卓端并没有此问题，并且从 charles 抓包内容来看，后台传输的价格确实是0.07。</p>

<p>在排除了业务层转化因素后，我们进入了 AFNetworking 框架内部，看能不能找到一点线索，然后就定位到了以下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">URLSession:</span><span class="p">(</span><span class="n">__unused</span> <span class="bp">NSURLSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span>
</span><span class='line'>              <span class="nf">task:</span><span class="p">(</span><span class="bp">NSURLSessionTask</span> <span class="o">*</span><span class="p">)</span><span class="nv">task</span>
</span><span class='line'><span class="nf">didCompleteWithError:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
</span></code></pre></td></tr></table></div></figure>


<p>  在拿到原始的 data 后，我尝试在调试终端使用 NSJSONSerialization 对其进行反序列化，结果发现价格在这里已经变成了 0.07000000000000001 。</p>

<p>众所周知，由于计算机无法精确存储浮点数，实际上存储的浮点型变量实际数值就是取范围允许内最接近的值，也就是上面接收到的那样。（注：<a href="http://justjavac.com/codepuzzle/2012/11/11/codepuzzle-float-who-stole-your-accuracy.html">Float who stole your accuracy</a>）</p>

<p>难道是 NSJSONSerialization 在反序列化的时候出了问题？</p>

<!--more-->


<h2>解决过程</h2>

<p>  <strong>在确定了后台传的价格并不是字符串类型后</strong> <br>(注： <a href="http://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency">Why not use double or float to represent currency</a>)，<br>我开始查找相关资料，并写了以下代码进行测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">json</span> <span class="o">=</span> <span class="s">@&quot;{</span><span class="se">\&quot;</span><span class="s">price</span><span class="se">\&quot;</span><span class="s"> : 0.07}&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span> <span class="nl">dataUsingEncoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">rJson</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSJSONSerialization</span> <span class="nl">JSONObjectWithData</span><span class="p">:</span><span class="n">data</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">class: %@</span><span class="se">\n</span><span class="s">%@&quot;</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">rJson</span><span class="p">[</span><span class="s">@&quot;price&quot;</span><span class="p">]</span> <span class="k">class</span><span class="p">]),</span> <span class="n">rJson</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码块的输出如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">class</span><span class="o">:</span> <span class="n">__NSCFNumber</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="s">&quot;0.07000000000000001&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么问题来了，如果传过来的价格是字符串类型的，输出结果会是正确的么？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">json</span> <span class="o">=</span> <span class="s">@&quot;{</span><span class="se">\&quot;</span><span class="s">price</span><span class="se">\&quot;</span><span class="s"> : </span><span class="se">\&quot;</span><span class="s">0.07</span><span class="se">\&quot;</span><span class="s">}&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">json</span> <span class="nl">dataUsingEncoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">rJson</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSJSONSerialization</span> <span class="nl">JSONObjectWithData</span><span class="p">:</span><span class="n">data</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">class: %@</span><span class="se">\n</span><span class="s">%@&quot;</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">rJson</span><span class="p">[</span><span class="s">@&quot;price&quot;</span><span class="p">]</span> <span class="k">class</span><span class="p">]),</span> <span class="n">rJson</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码块的输出为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">class</span><span class="o">:</span> <span class="n">NSTaggedPointerString</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="s">&quot;0.07&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bingo ！结果是正确的。</p>

<p>那么，在确定 data 是准确的前提下 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">7</span><span class="n">b227072</span> <span class="mi">69636522</span> <span class="mi">203</span><span class="n">a2030</span> <span class="mf">2e30377</span><span class="n">d</span>
</span><span class='line'><span class="o">-------------------------</span><span class="mi">0</span><span class="o">--</span><span class="p">.</span><span class="o">-</span><span class="mi">0</span><span class="o">-</span><span class="mi">7</span>  
</span></code></pre></td></tr></table></div></figure>


<p>再通过以下代码，来确认下是不是 NSNumber 造成了这种差异：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">double</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">0.07</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithDouble</span><span class="p">:</span><span class="n">a</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码块的输出如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mf">0.07000000000000001</span>
</span></code></pre></td></tr></table></div></figure>


<p>综上，可以看出:</p>

<p><strong>由于后台传过来的是浮点型而不是字符串类型的 0.07，导致 NSJSONSerialization 内部进行反序列化时，把 0.07 转化成了 NSNumber 对象，而 NSNumber 对象无法正确地表示浮点型的 0.07</strong></p>

<h2>反思</h2>

<p>针对当前的业务：</p>

<p>1.就像 <a href="http://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency">Why not use double or float to represent currency</a> 说的一样，后台传价格相关的数据时，不要用浮点型，要么乘以 100 ，前端再除以 100 ，要么用字符串。</p>

<p>2.如果数据对精度非常敏感的话，不要用 NSNumber，应该用 NSDecimalnumber。</p>

<p>另外小吐槽下，后台传输的数据应该遵守相关规范：<a href="http://jsonapi.org/format/#document-top-level">jsonapi</a>，特别是后端开发的同学，更应该熟悉这套规范。</p>

<h2>参考资料</h2>

<p><a href="http://stackoverflow.com/questions/36218949/jsonobjectwithdata-wrong-decimal-places-while-parsing">JSON object with data wrong decimal places while parsing</a><br>
<a href="http://stackoverflow.com/questions/2333755/nsnumber-calculations-precision">NSNumber calculations precision</a><br>
<a href="http://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency">Why not use double or float to represent currency</a><br>
<a href="http://twistedoakstudios.com/blog/Post4428_unfathomable-bugs-6-pretend-precision">Pretend precision</a><br>
<a href="http://stackoverflow.com/questions/1704504/what-is-the-right-choice-between-nsdecimal-nsdecimalnumber-cfnumber">What is the right choice between NSDecimal NSDecimalnumber CFNumber</a><br>
<a href="http://www.cimgf.com/2008/04/23/cocoa-tutorial-dont-be-lazy-with-nsdecimalnumber-like-me/">Don‘t be lazy with NSDecimalnumber like me</a><br>
<a href="http://www.cocoabuilder.com/archive/cocoa/166167-working-with-nsdecimalnumber-and-nsnumber.html">Working with NSDecimalnumber and NSNumber</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用runtime兼容老代码小记]]></title>
    <link href="http://triplecc.github.io/blog/2016-12-05-li-yong-runtimejian-rong-lao-dai-ma-xiao-ji/"/>
    <updated>2016-12-05T21:50:14+08:00</updated>
    <id>http://triplecc.github.io/blog/li-yong-runtimejian-rong-lao-dai-ma-xiao-ji</id>
    <content type="html"><![CDATA[<p>通常来说，在项目的初期，因为各种原因，要么人力不够，要么项目周期过紧，会产生难以维护、阅读性较差的代码。而这种代码，我习惯称之为“老代码”。就比如现在手上的项目，初期是由一个被迫转到 <code>iOS</code> 的后端 <code>java</code> 哥们写的，所以工程里面到处都可以看见 <code>java</code> 的一些编码风格，比如模型以 <code>Vo</code> 结尾、接口以 <code>I</code> 开头等，甚至转场动画都是简单粗暴地通过 <code>view</code> 叠加再辅以动画实现的。“老代码”是项目特定时间段的产物，因此，也不能把锅全部推给写这些代码的人。不过前人埋坑，后人总得填啊。</p>

<p>好了，吐槽完毕，开始正题。</p>

<!--more-->


<p>当前项目的业务里面有各种可供筛选的条件，比如分类、通道、类别等。“老代码”是这样实现相关功能的：</p>

<ul>
<li>每种筛选条件都创建一个模型，它们的父类并没有统一</li>
<li>分类存在父子分类，所以有一个 ItreeNode 协议来规范分类模型</li>
<li>通道和类别等其他条件是没有父子分类的，不过“老代码”为了能让视图统一根据 ItreeNode 来渲染界面，依然让它们遵守 ItreeNode ，这里暂且不论这样做是否科学</li>
<li>后台返回的数据中没“全部”条件，需要前端自己添加，“老代码”以 -1 作为“全部”条件的 id ，但是没有统一入口，外部都是手动创建模型，赋值 id 属性。</li>
<li>筛选 UI 控件使用 id 保证条件的唯一性，而获取 id 是通过 ItreeNode 的 obtainItemId 方法</li>
</ul>


<p>做为一个比较懒的人，做新页面的时候，我肯定不想每次都手动创建一次“全部”条件，至少不能每次都创建不一样的模型，只为了给当前筛选控件添加“全部”条件。更进一步讲，能不能创建一个如下的 <code>NSArray</code> 分类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">&lt;</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">ITreeNode</span><span class="o">&gt;&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nf">tdf_prefixAllTypeWithName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样针对条件数组，我只需要这样调用就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// name可以是@“全部分类&quot;、@“全部通道”或者其他筛选条件</span>
</span><span class='line'><span class="p">[</span><span class="n">categories</span> <span class="nl">tdf_prefixAllTypeWithName</span><span class="p">:</span><span class="n">name</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么问题来了，要怎么做才能让不同筛选的条件都能使用同一个“全部”接口呢？</p>

<p>首先，我不想用 <code>if-else</code> 或者 <code>switch-if</code> 的，虽然简单粗暴，但是以后如果要添加新的条件类型的话，还需要修改这个判断分支，不够优雅。
既然筛选的UI控件使用的是 <code>ItreeNode</code> 方法获取，那我直接创建一个 <code>AllType</code> 好了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">TDFTreeNodeAllType</span> : <span class="nc">Base</span> <span class="o">&lt;</span><span class="n">ITreeNode</span><span class="o">&gt;</span>
</span><span class='line'><span class="cm">/** 类型名（默认‘全部分类’） */</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">node</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 通过这个方法来比较是否是全部分类 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqual:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">ITreeNode</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">object</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TDFTreeNodeAllType</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">node</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TDFTreeNodeAllType</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TDFTreeNodeAllType</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">node</span><span class="p">.</span><span class="kt">id</span> <span class="o">=</span> <span class="n">TDFSilverBulletId</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqual:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">ITreeNode</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">object</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">obtainItemId</span><span class="p">]</span> <span class="nl">isEqualToString</span><span class="p">:[</span><span class="n">object</span> <span class="n">obtainItemId</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">obtainItemId</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="kt">id</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">obtainItemName</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="bp">NSArray</span> <span class="nl">(AllType)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">&lt;</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">ITreeNode</span><span class="o">&gt;&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nf">tdf_prefixAllTypeWithName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">firstObject</span> <span class="nl">conformsToProtocol</span><span class="p">:@</span><span class="n">protocol</span><span class="p">(</span><span class="n">ITreeNode</span><span class="p">)],</span> <span class="s">@&quot;items should conform to ITreeNode&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[[</span><span class="nb">self</span><span class="p">.</span><span class="n">firstObject</span> <span class="n">obtainItemId</span><span class="p">]</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">TDFSilverBulletId</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TDFTreeNodeAllType</span> <span class="o">*</span><span class="n">all</span> <span class="o">=</span> <span class="p">[</span><span class="n">TDFTreeNodeAllType</span> <span class="n">node</span><span class="p">];</span>
</span><span class='line'>        <span class="n">all</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">result</span> <span class="nl">insertObject</span><span class="p">:</span><span class="n">all</span> <span class="nl">atIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>搞定收工！</p>

<p>但是稍微跑下后，我发现了一个蛋疼的问题：外部要使用这些条件类型特定属性的时候，程序会崩溃，因为 <code>TDFTreeNodeAllType</code> 找不到对应的方法。
这时，我第一个想到的就是动态创建一个“全部”类型对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">&lt;</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">ITreeNode</span><span class="o">&gt;&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nf">tdf_prefixAllTypeWithName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">firstObject</span> <span class="nl">conformsToProtocol</span><span class="p">:@</span><span class="n">protocol</span><span class="p">(</span><span class="n">ITreeNode</span><span class="p">)],</span> <span class="s">@&quot;items should conform to ITreeNode&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[[</span><span class="nb">self</span><span class="p">.</span><span class="n">firstObject</span> <span class="n">obtainItemId</span><span class="p">]</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">TDFSilverBulletId</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">Class</span> <span class="k">class</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">firstObject</span> <span class="k">class</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">id</span> <span class="o">&lt;</span><span class="n">ITreeNode</span><span class="o">&gt;</span> <span class="n">node</span> <span class="o">=</span> <span class="p">[[</span><span class="k">class</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="o">???????????????????????????????????????????</span>
</span><span class='line'>      
</span><span class='line'>        <span class="p">[</span><span class="n">result</span> <span class="nl">insertObject</span><span class="p">:</span><span class="n">node</span> <span class="nl">atIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这里我怎么让 <code>node</code> 成为全部类型对象呢？实际上我并不能直接让 <code>node</code> 的 <code>obtainItemId</code> 方法返回 <code>-1</code> ，也不能通过 <code>method_setImplementation</code> 或者 <code>method_exchangeImplementations</code> 修改 <code>obtainItemId</code> 的实现，因为会影响到类原本对于这个方法的实现。</p>

<p>绕了一圈，还是回到了单独创建一个模型 <code>TDFTreeNodeAllType</code> 表示“全部”条件的方案。现在明确要解决的问题是：如何让外部调用 <code>TDFTreeNodeAllType</code> 没有，筛选条件模型有的方法，还可以不崩溃？嗯，答案在消息转发相关的三步骤。</p>

<p>首先要记录筛选条件的 <code>Class</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">TDFTreeNodeAllType</span> : <span class="nc">Base</span> <span class="o">&lt;</span><span class="n">ITreeNode</span><span class="o">&gt;</span>
</span><span class='line'><span class="cm">/** 当前类型对应的类，保证同样的操作不会崩溃 */</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">Class</span> <span class="n">targetClass</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 类型名（默认‘全部分类’） */</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">node</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 通过这个方法来比较是否是全部分类 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqual:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">ITreeNode</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">object</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="bp">NSArray</span> <span class="nl">(AllType)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">&lt;</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">ITreeNode</span><span class="o">&gt;&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nf">tdf_prefixAllTypeWithName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">firstObject</span> <span class="nl">conformsToProtocol</span><span class="p">:@</span><span class="n">protocol</span><span class="p">(</span><span class="n">ITreeNode</span><span class="p">)],</span> <span class="s">@&quot;items should conform to ITreeNode&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[[</span><span class="nb">self</span><span class="p">.</span><span class="n">firstObject</span> <span class="n">obtainItemId</span><span class="p">]</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">TDFSilverBulletId</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TDFTreeNodeAllType</span> <span class="o">*</span><span class="n">all</span> <span class="o">=</span> <span class="p">[</span><span class="n">TDFTreeNodeAllType</span> <span class="n">node</span><span class="p">];</span>
</span><span class='line'>        <span class="n">all</span><span class="p">.</span><span class="n">targetClass</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">firstObject</span> <span class="k">class</span><span class="p">];</span>
</span><span class='line'>        <span class="n">all</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">result</span> <span class="nl">insertObject</span><span class="p">:</span><span class="n">all</span> <span class="nl">atIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在消息转发前，可以通过重载 <code>forwardingTargetForSelector</code> 知悉当前要调用的方法。所以只要在这个方法里面判断 <code>TDFTreeNodeAllType</code> 是否存在此 <code>SEL</code> ，没有的话返回上面保存 <code>Class</code> 创建的对象就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">forwardingTargetForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="nb">self</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">aSelector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSAssert</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">targetClass</span><span class="p">,</span> <span class="s">@&quot;target class should&#39;t be nil in order to avoiding forwarding Invocation&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[[</span><span class="nb">self</span><span class="p">.</span><span class="n">targetClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">forwardingTargetForSelector</span><span class="p">:</span><span class="n">aSelector</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再给<code>NSObject</code>添加一个判断是否为“全部”条件的分类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="bp">NSObject</span> <span class="nl">(AllType)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">tdf_isAllType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">([</span><span class="nb">self</span> <span class="nl">conformsToProtocol</span><span class="p">:@</span><span class="n">protocol</span><span class="p">(</span><span class="n">ITreeNode</span><span class="p">)],</span> <span class="s">@&quot;object should confirm ITreeNode&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">ITreeNode</span><span class="o">&gt;</span><span class="p">)</span><span class="nb">self</span> <span class="n">obtainItemId</span><span class="p">]</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">TDFSilverBulletId</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样一来，添加和使用“全部”条件就非常方便了。</p>

<p>虽然很多论调都说 <code>runtime</code> 工作上用的场景非常之少，面试问这些的没啥用，但是个人感觉还是要知道一些的。因为假如真的遇到一些难以通过平常手段搞定的需求的话， <code>runtime</code> 能给开发者带来一些别样的灵感。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C使用范型实现map提示]]></title>
    <link href="http://triplecc.github.io/blog/2016-11-12-objective-cshi-yong-fan-xing-shi-xian-mapti-shi/"/>
    <updated>2016-11-12T14:45:35+08:00</updated>
    <id>http://triplecc.github.io/blog/objective-cshi-yong-fan-xing-shi-xian-mapti-shi</id>
    <content type="html"><![CDATA[<p>在当前项目的一些内容加工逻辑较多的界面，我会使用<code>ViewModel</code>来对<code>Model</code>进行一层包装，这样可以保持<code>Model</code>的纯净，也可以减少<code>Controller</code>中弱逻辑代码的堆叠。当然，部分公用内容也是可以通过给<code>Model</code>添加分类来实现的，<code>ViewModel</code>更多是提供特定页面的定制化内容。</p>

<p>由于项目并没有采用<code>MVVM</code>模式，也就没有引入<code>ReactiveCocoa</code>，所以项目里面比较多这样的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">&lt;</span><span class="n">TBVEmployee</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">employees</span> <span class="o">=</span> <span class="l">@[</span><span class="p">[</span><span class="n">TBVEmployee</span> <span class="n">new</span><span class="p">]</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">TBVEmployee</span> <span class="o">*</span><span class="n">employee</span> <span class="k">in</span> <span class="n">employees</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TBVEmployeeItemViewModel</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVEmployeeItemViewModel</span> <span class="nl">itemWithEmployee</span><span class="p">:</span><span class="n">employee</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">items</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码主要是为了将<code>Model</code> 转化成<code>ViewModel</code>。</p>

<!--more-->


<p>这里可以给<code>NSArray</code>增加一个<code>tbv_map</code>方法，让这段代码阅读起来更加函数式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">NSArray</span> <span class="nl">(SwiftOperation)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">tbv_map:</span><span class="p">(</span><span class="kt">id</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">id</span> <span class="n">value</span><span class="p">))</span><span class="nv">block</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="bp">NSArray</span> <span class="nl">(SwiftOperation)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">tbv_map:</span><span class="p">(</span><span class="kt">id</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">id</span><span class="p">))</span><span class="nv">block</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSCParameterAssert</span><span class="p">(</span><span class="n">block</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">element</span> <span class="k">in</span> <span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">temp</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">block</span><span class="p">(</span><span class="n">element</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加分类后，上面那段代码可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">employees</span> <span class="o">=</span> <span class="l">@[</span><span class="p">[</span><span class="n">TBVEmployee</span> <span class="n">new</span><span class="p">]</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">employees</span> <span class="nl">tbv_map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">TBVEmployeeItemViewModel</span> <span class="nl">itemWithEmployee</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>嗯！看起来清爽了不少。但是写多了之后会有一个小瑕疵：为了能<code>map</code>到<code>NSArray</code>可容纳的所有类型，<code>block</code>的传参使用了<code>id</code>类型，当需要使用形参的个别属性时，我需要手动更改<code>id</code>为具体的类名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">employees</span> <span class="nl">tbv_map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">TBVEmployee</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;employee&#39;s name: %@&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">TBVEmployeeItemViewModel</span> <span class="nl">itemWithEmployee</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>有没有什么法子，能让<code>Xcode</code>的智能提示帮我直接预测到想要<code>map</code>的元素类型呢？</p>

<p>答案是<code>Objective-C</code>的范型。虽然<code>Objective-C</code>对于范型的支持还是比较弱的，但是处理当前的这个需求还是可以的。</p>

<p>先给<code>NSArray</code>分类添加范型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">NSArray</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">SwiftOperation</span><span class="p">)</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nl">tbv_map</span><span class="p">:(</span><span class="kt">id</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">T</span> <span class="n">value</span><span class="p">))</span><span class="n">block</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在使用时，指定需要<code>map</code>数组的元素类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">&lt;</span><span class="n">TBVEmployee</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">employees</span> <span class="o">=</span> <span class="l">@[</span><span class="p">[</span><span class="n">TBVEmployee</span> <span class="n">new</span><span class="p">]</span><span class="l">]</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后<code>Xcode</code>就会根据数组元素的类型，做出智能提示啦：</p>

<p><img src="http://triplecc.github.io/images/2016-11-12-3.26.30.png" alt="" /></p>

<p>以此还可以增加其它的操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">NSArray</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">SwiftOperation</span><span class="p">)</span>
</span><span class='line'><span class="cm">/** -&gt; swift map */</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nl">tbv_map</span><span class="p">:(</span><span class="kt">id</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">T</span> <span class="n">value</span><span class="p">))</span><span class="n">block</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** -&gt; swift filter */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">tbv_filter:</span><span class="p">(</span><span class="kt">BOOL</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">T</span> <span class="n">value</span><span class="p">))</span><span class="nv">block</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** -&gt; swift reduce */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">tbv_foldLeftWithStart:</span><span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="nv">start</span> <span class="nf">reduce:</span><span class="p">(</span><span class="n">T</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">T</span> <span class="n">result</span><span class="p">,</span> <span class="n">T</span> <span class="n">next</span><span class="p">))</span><span class="nv">reduce</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** -&gt; swift forEach */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tbv_forEach:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">T</span> <span class="n">value</span><span class="p">))</span><span class="nv">block</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里只添加了<code>NSArray</code>类型的操作，<code>NSDictionary</code>、<code>NSSet</code>这类集合类型也可以以此类推来实现。不过上面的方法只是做了一层简易的包装，并没有延迟计算啥的，只是让我写起来能更加开心、舒畅点吧。</p>

<h2>更改</h2>

<p>2017-07-06 ：</p>

<p>需要注意的是 <code>instancetype</code> 会包含范型检查，为了避免使用者过多地进行强制类型转换， <code>tbv_map</code> 可以修改成如下形式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">tbv_map:</span><span class="p">(</span><span class="kt">id</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">T</span> <span class="n">value</span><span class="p">))</span><span class="nv">block</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一次短暂的mac开发之旅]]></title>
    <link href="http://triplecc.github.io/blog/2016-10-22-yi-ci-duan-zan-de-mackai-fa-zhi-lu/"/>
    <updated>2016-10-22T22:43:37+08:00</updated>
    <id>http://triplecc.github.io/blog/yi-ci-duan-zan-de-mackai-fa-zhi-lu</id>
    <content type="html"><![CDATA[<p>回杭近一周，发现公司后台写的接口文档还是比较清晰的。特别是自己组负责的业务线，接口文档上的字段和实际返回的字段几乎没有差别。</p>

<p>询问了周围小伙伴如何写模型文件之后，发现无非三种方式：</p>

<ul>
<li>手写啦＝＝</li>
<li><code>Xcode8</code>以前的用<code>ESJsonFormat</code>插件，<code>Xcode8</code>以后手写</li>
<li>用<code>JSONExport</code>生成</li>
</ul>


<p>针对以上三种方式，我做了一个简短的分析：</p>

<ul>
<li>这个不用说了，耗时费力不讨好。量少好说，量大就比较蛋疼了。</li>
<li><code>xcode8</code>之后，第三方插件被禁止了。虽说有方法能让<code>xcode8</code>重新用上这个插件，但是即使用上了这个插件，还是需要自己写注释，并且生成模型需要后台返回的<code>json</code>。</li>
<li>和上一个方式一样，只是从插件编程了<code>mac</code>软件</li>
</ul>


<p>在打听完后，我随即产生了自己写一个转换工具的想法。</p>

<p>原因如下：</p>

<ul>
<li>后台文档已经写的比较清晰，可以从网页上把这些数据都爬下来，然后生成含有注释的模型</li>
<li>可以自动将<code>Vo</code>结尾的模型和属性，转成<code>Model</code>结尾的模型和属性，并且生成<code>YYModel</code>需要的映射关系</li>
<li>因为接口文档都处于一个统一的<code>baseURL</code>下，加上模型名称就是完整路径，所以可以很方便地进行批量处理</li>
<li>不需要测试后台发布的接口后，再通过获取接口返回的<code>json</code>生成模型；只要接口文档一发布就可以生成模型</li>
</ul>


<!--more-->


<p>然后我花了一个周末的时间，完成了一个简易的模型抓取生成工具。具体界面如下：<br></p>

<p><img src="http://triplecc.github.io/images/2016-10-30fetcher.png" alt="" /></p>

<p>输入浏览公司内部资料所需要的用户名和密码，并且输入自己需要的抓取的模型名，点击开始抓取，然后就等桌面上生成对应的模型文件了。当然，在界面上的预览窗口可以看到生成文件的内容，以及生成文件的保存地址。</p>

<p>话不多说，接下来记录下自己写这个<code>mac</code>工具的过程。</p>

<h3>确认要抓取的内容及条件</h3>

<p>首先看下需要抓取内容的HTML:<br></p>

<p><img src="http://triplecc.github.io/images/2016-10-30xpath.png" alt="" /></p>

<p>可以看到，拿到第一个标签为<code>table</code>、类名为<code>confluenceTable</code>的元素，然后再取第一个标签为<code>tbody</code>的元素即可获取所有需要的数据。</p>

<p>最后，查看接口需要在登录状态，所以得在<code>chrome</code>的开发者工具中获取登录请求的<code>URL</code>和参数。由于接口文档所在服务器搭在公司内网，所以并没有太过复杂的验证，还是比较方便的。</p>

<h3>确定使用的技术</h3>

<p>由于对<code>Python</code>还不是很熟悉，所以还是先使用<code>swift</code>来写。选用的框架如下：</p>

<ul>
<li>RxSwift</li>
<li>Ji (HTML解析用)</li>
<li>Moya</li>
</ul>


<p>最后说下<code>mac</code>开发，我直接采用了<code>storyboard</code>的方式。主要是自己以前没有接触过<code>mac</code>开发，使用IB能降低难度和开发时间。</p>

<h3>实际开发过程</h3>

<p>数据获取解析和软件界面逻辑编写的时间占比大概在7-3左右。<br></p>

<h5>数据获取解析</h5>

<p>通过<code>Moya</code>请求获取<code>HTML</code>就不说了，主要记录下如何使用<code>Ji</code>来解析<code>HTML</code>。</p>

<p>获取第一个标签为<code>table</code>、类名为<code>confluenceTable</code>的元素代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">TDFInterfaceFetcherHTMLParser</span>  <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">firstTableBody</span><span class="p">:</span> <span class="p">[</span><span class="n">JiNode</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">firstContentTable</span><span class="p">.</span><span class="n">flatMap</span><span class="p">{</span> <span class="err">$</span><span class="mf">0.f</span><span class="n">irstChildWithName</span><span class="p">(</span><span class="s">&quot;tbody&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">children</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">var</span> <span class="nl">firstContentTable</span><span class="p">:</span> <span class="n">JiNode</span><span class="o">?</span><span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">lastTable</span> <span class="o">=</span> <span class="n">rootNode</span><span class="o">?</span>
</span><span class='line'>            <span class="p">.</span><span class="n">descendantsWithName</span><span class="p">(</span><span class="s">&quot;table&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">filter</span><span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">attributes</span><span class="p">[</span><span class="s">&quot;class&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;confluenceTable&quot;</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">first</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">lastTable</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>descendantsWithName("table")</code>可以获取所有标签为<code>table</code>的元素</li>
<li><code>JiNode</code>的<code>attributes</code>是标签所有属性的键值对，这里过滤掉<code>class</code>不是<code>confluenceTable</code>的<code>JiNode</code></li>
<li><code>JiNode</code>的<code>firstChildWithName("tbody").children</code>可以获取子节点中，第一个标签为<code>tbody</code>的元素的所有子节点。</li>
</ul>


<p>得到所有目标子节点后，再通过以下方法获取叶子节点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//1、是叶子节点，添加到数组</span>
</span><span class='line'><span class="c1">//2、不是叶子节点，遍历其所有子节点</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">JiNode</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">allLeafNodes</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">JiNode</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">leafNodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">JiNode</span><span class="p">]()</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">hasChildren</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">leafNodes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">children</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">leafNodes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span> <span class="err">$</span><span class="mf">0.</span><span class="n">allLeafNodes</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">leafNodes</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来通过<code>JiNode</code>的<code>value</code>属性获取所有叶子节点对应元素的内容就好了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">firstTableBody</span><span class="p">.</span><span class="n">map</span><span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">allLeafNodes</span><span class="p">().</span><span class="n">flatMap</span><span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">value</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>经过上面代码的处理，输出的数据如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">[</span><span class="s">&quot;编号&quot;</span><span class="p">,</span> <span class="s">&quot;参数名（中文）&quot;</span><span class="p">,</span> <span class="s">&quot;参数名（英文）&quot;</span><span class="p">,</span> <span class="s">&quot;类型&quot;</span><span class="p">,</span> <span class="s">&quot;对应表&quot;</span><span class="p">,</span> <span class="s">&quot;对应字段&quot;</span><span class="p">,</span> <span class="s">&quot;备注&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="s">&quot;1&quot;</span><span class="p">,</span> <span class="s">&quot;采购单ID&quot;</span><span class="p">,</span> <span class="s">&quot;id&quot;</span><span class="p">,</span> <span class="s">&quot;String&quot;</span><span class="p">,</span> <span class="s">&quot;purchase_info&quot;</span><span class="p">,</span> <span class="s">&quot;id&quot;</span><span class="p">,</span> <span class="s">&quot;　&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK！后面的事情就相对简单了，主要是结合<code>Objective-C</code>的语法以及自身采用的<code>JSON</code>转模型框架来对上面的数组进行加工。项目里采用的是YYModel，所以最终输出结果大致如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//======================================    </span>
</span><span class='line'><span class="c1">// TDFPurchaseModel.h    </span>
</span><span class='line'><span class="c1">//====================================== </span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;  </span>
</span><span class='line'>  
</span><span class='line'><span class="k">@interface</span> <span class="nc">TDFPurchaseModel</span> : <span class="bp">NSObject</span> 
</span><span class='line'><span class="cm">/** 采购单ID */</span>    
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="kt">id</span><span class="p">;</span> 
</span><span class='line'>
</span><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//====================================== </span>
</span><span class='line'><span class="c1">// TDFPurchaseModel.m    </span>
</span><span class='line'><span class="c1">//====================================== </span>
</span><span class='line'><span class="cp">#import &quot;TDFPurchaseModel.h&quot;   </span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TDFPurchaseModel</span>   
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="n">nullable</span> <span class="bp">NSDictionary</span><span class="o">&lt;</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">,</span> <span class="kt">id</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nf">modelCustomPropertyMapper</span> <span class="p">{</span>    
</span><span class='line'>  <span class="k">return</span> <span class="l">@{</span> 
</span><span class='line'>      <span class="s">@&quot;purchaseDetails&quot;</span> <span class="o">:</span> <span class="s">@&quot;purchaseDetailsVo&quot;</span>  
</span><span class='line'>  <span class="l">}</span><span class="p">;</span>    
</span><span class='line'><span class="p">}</span>  
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>软件界面逻辑编写</h5>

<p><code>mac</code>界面的搭建，我主要参考了<code>JSONExport</code>。不过对于没有接触过<code>mac</code>开发的我来说，直接上手去拖拽控件还是出现了一些问题。</p>

<p>记忆最深的是在<code>mac</code>开发中，拖拽到<code>storyboard</code>中的控件，其内部可能内置多个子控件。当我直接以<code>iOS</code>开发在<code>storyboard</code>中拖拽控件的方式设置约束时，就会出现一些问题：</p>

<p><img src="http://triplecc.github.io/images/Snip20161030_1.png" alt="" /></p>

<p>这样的约束是针对内部的<code>NSTextView</code>设置的，当输入文本超过父控件时，依赖于<code>NSTextView</code>高度约束的控件会发生变化。所以应该像下面这样，在侧边栏设置：</p>

<p><img src="http://triplecc.github.io/images/Snip20161030_3.png" alt="" /></p>

<p>至于其它，由于只是搭了一个简单的界面，也不好说些啥。不过现在感觉做<code>iOS</code>开发的，上手<code>mac</code>开发还是相对容易一些。</p>

<h3>总结</h3>

<p>写这个软件大概花了我一天半的时间，不过应该能给身边的小伙伴省下一些不必要的时间开销，还是挺高兴的。<br></p>

<p>感觉程序员还是要多思考，不过是对代码还是对业务流程。不能说以前的人这么写，或者这么做了，我就跟着这么做，而不加以思考这样的代码或者流程到底合不合理，是不是正确/最优的做法，否则很难跳出自己的舒适区域。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用RxSwift+Moya+ObjectMapper接入模型]]></title>
    <link href="http://triplecc.github.io/blog/2016-10-15-shi-yong-rxswift-plus-moya-plus-objectmapperjie-ru-mo-xing/"/>
    <updated>2016-10-15T11:40:37+08:00</updated>
    <id>http://triplecc.github.io/blog/shi-yong-rxswift-plus-moya-plus-objectmapperjie-ru-mo-xing</id>
    <content type="html"><![CDATA[<p>一般情况下，从业务方从API中请求JSON数据时，一般都会经过以下三步：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--------1------------2----------
</span><span class='line'>原始数据 -&gt; JSON/字典  -&gt; Model</span></code></pre></td></tr></table></div></figure>


<p>当然，大部分情况下，原始数据就是JSON，所以第一步基本上只是对接受数据的一个类型转换。一般在网络层中，由组件方提供1步骤，而业务方往往在网络组件的回调中提供步骤2。简单的转换逻辑明了了，接下来就可以试下用Moya实现步骤1，ObjectMapper实现步骤2。</p>

<p>在结合RxSwift+Moya+ObjectMapper三者之后，常规JSON数据的获取与解析变得更加精简。以近期编写的一个V2ex API为例，获取个人信息接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">fetchMemberInfo</span><span class="p">(</span><span class="n">_</span> <span class="nl">username</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="n">V2exAppContext</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">currentUsername</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">_</span> <span class="kt">id</span><span class="o">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">V2exMember</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">V2exProvider</span>
</span><span class='line'>        <span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">ShowMembers</span><span class="p">(</span><span class="nl">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="kt">id</span><span class="o">:</span> <span class="kt">id</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">mapObject</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>嗯，没错，最终的调用就是这么简单明了！<br></p>

<!--more-->


<p>那么，上述函数的内部是如何实现的呢？<br></p>

<p>首先说下Moya。Moya是针对网络的一层封装，并且Moya在较为后期的版本中，还提供了RxSwift以及ReactiveCocoa的接口。针对RxSwift，Moya提供了以下两个好用的扩展：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">open</span> <span class="k">func</span> <span class="n">request</span><span class="p">(</span><span class="n">_</span> <span class="nl">token</span><span class="p">:</span> <span class="n">Target</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">mapJSON</span><span class="p">(</span><span class="nl">failsOnEmptyData</span><span class="p">:</span> <span class="n">Bool</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Any</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>前者用来请求原始数据，后者则将原始数据转化成json。当然，Moya还提供了其他Rx扩展，比如<code>filterStatus</code>系列方法，这里就不展开了。</p>

<p>有了上面两个方法，业务方请求数据时，就可以这样调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">V2exProvider</span> <span class="o">=</span> <span class="n">RxMoyaProvider</span><span class="o">&lt;</span><span class="n">V2ex</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">V2exProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">ShowMembers</span><span class="p">(</span><span class="nl">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="kt">id</span><span class="o">:</span> <span class="nb">nil</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">mapJSON</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面<code>json</code>即为解析完成的JSON数据流。<br>
得到JSON数据流之后，就可以执行步骤2了，这里选用的是ObjectMapper。ObjectMapper是一个Swift编写的模型<->JSON转换库，应用代码非常简单，只要模型遵守Mappable协议，并且实现对应的方法就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span> <span class="n">Map</span><span class="p">)</span>
</span><span class='line'><span class="kr">mutating</span> <span class="k">func</span> <span class="n">mapping</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span> <span class="n">Map</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在模型中设置对应属性的值，这里以V2ex的Member为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="nl">V2exMember</span><span class="p">:</span> <span class="n">Mappable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">status</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">url</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">username</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">website</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">twitter</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">psn</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">github</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">btc</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">location</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">tagline</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">bio</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">created</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">avatar</span><span class="p">:</span> <span class="n">V2exAvatar</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span> <span class="n">Map</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">mutating</span> <span class="k">func</span> <span class="n">mapping</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span> <span class="n">Map</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">status</span>      <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;status&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="kt">id</span>          <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">url</span>         <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;url&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">username</span>    <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;username&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">website</span>     <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;username&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">twitter</span>     <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;twitter&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">psn</span>         <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;psn&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">github</span>      <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;github&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">btc</span>         <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;btc&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">location</span>    <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;location&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">tagline</span>     <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;tagline&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">bio</span>         <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;bio&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">created</span>     <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;created&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">avatar</span> <span class="o">=</span> <span class="n">V2exAvatar</span><span class="p">(</span><span class="nl">JSON</span><span class="p">:</span> <span class="n">map</span><span class="p">.</span><span class="n">JSON</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，对于struct类型的模型，这种转换方式还是很优雅的。生成模型的话，也只需要很简单的代码就可以完成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">Mapper</span><span class="o">&lt;</span><span class="n">V2exMember</span><span class="o">&gt;</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="nl">JSONObject</span><span class="p">:</span> <span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这里为止，步骤2也完成了，接下就可以将步骤1、2连接起来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">ObservableType</span> <span class="k">where</span> <span class="n">E</span> <span class="o">==</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">func</span> <span class="n">mapObject</span><span class="o">&lt;</span><span class="nl">T</span><span class="p">:</span> <span class="n">Mappable</span><span class="o">&gt;</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">RxSwift</span><span class="p">.</span><span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mapJSON</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">ConcurrentDispatchQueueScheduler</span><span class="p">(</span><span class="nl">globalConcurrentQueueQOS</span><span class="p">:</span> <span class="p">.</span><span class="n">background</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="nl">JSONObject</span><span class="p">:</span> <span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">flatMap</span><span class="p">{</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span> <span class="p">}</span> <span class="o">??</span>
</span><span class='line'>                    <span class="n">Observable</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="bp">NSError</span><span class="p">(</span><span class="nl">domain</span><span class="p">:</span> <span class="s">&quot;V2ex&quot;</span><span class="p">,</span>
</span><span class='line'>                                             <span class="nl">code</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                             <span class="nl">userInfo</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;Error&quot;</span> <span class="o">:</span> <span class="s">&quot;failed to map object&quot;</span><span class="p">]))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">func</span> <span class="n">mapObjectArray</span><span class="o">&lt;</span><span class="nl">T</span><span class="p">:</span> <span class="n">Mappable</span><span class="o">&gt;</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">RxSwift</span><span class="p">.</span><span class="n">Observable</span><span class="o">&lt;</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mapJSON</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">ConcurrentDispatchQueueScheduler</span><span class="p">(</span><span class="nl">globalConcurrentQueueQOS</span><span class="p">:</span> <span class="p">.</span><span class="n">background</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">array</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>                <span class="k">if</span> <span class="k">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">array</span> <span class="kt">as</span><span class="o">?</span> <span class="p">[</span><span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">array</span><span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="nl">JSONObject</span><span class="p">:</span> <span class="err">$</span><span class="mi">0</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="bp">NSError</span><span class="p">(</span><span class="nl">domain</span><span class="p">:</span> <span class="s">&quot;V2ex&quot;</span><span class="p">,</span>
</span><span class='line'>                                                <span class="nl">code</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                                <span class="nl">userInfo</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;Error&quot;</span> <span class="o">:</span> <span class="s">&quot;failed to map object array&quot;</span><span class="p">]))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>mapObject</code>将原始数据转换成单个模型，而<code>mapObjectArray</code>将原始数据转换成模型数组。使用Rx.flatMap是为了方便抛出错误，终止正常数据流的流动。<br></p>

<p>总的来说，这三者结合后写出来的代码给人一种畅快淋漓的感觉。不过在很多项目中，从后台获取的JSON也许不会那么规范，或者说层次分明，这样一来，需要处理的情况就复杂多了，对于上面的Rx扩展能否保持这个精简的体量还待观察。</p>

<p>文中提到的代码可以在这里<a href="https://github.com/tobevoid/V2exLogin">这里</a>找到。</p>

<hr />

<h3>参考</h3>

<p><a href="https://github.com/Hearst-DD/ObjectMapper">ObjectMapper</a><br>
<a href="https://github.com/Moya/Moya">Moya</a><br>
<a href="http://blog.callmewhy.com/2015/11/01/moya-rxswift-argo-lets-go/">通过 Moya+RxSwift+Argo 完成网络请求</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveX中Using操作的应用]]></title>
    <link href="http://triplecc.github.io/blog/2016-10-06-rxswiftzhong-usingde-ying-yong/"/>
    <updated>2016-10-06T23:22:34+08:00</updated>
    <id>http://triplecc.github.io/blog/rxswiftzhong-usingde-ying-yong</id>
    <content type="html"><![CDATA[<p><code>create a disposable resource that has the same lifespan as the Observable</code>，即创建一个和Observable具有相同生命周期的disposable资源。<br>
这是ReactiveX对于Using的描述。</p>

<p><img src="http://triplecc.github.io/images/2016-10-06-using.png" alt="" /></p>

<p>可以看出，当一个ObserverA订阅Using返回的Observable时，Using会使用调用者传入的Resource工厂方法[resourceFactory]创建对应的资源，并且使用Observable工厂方法[observableFactory]创建ObserverA实际上想要订阅的Observable。当ObserverA终止时，对应的Resource也会被释放[dispose]。</p>

<!--more-->


<p>下面是一个简单的例子(以下的代码都基于RxSwift)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyDisposables</span><span class="p">:</span> <span class="n">Disposable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;dispose&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">Observable</span>
</span><span class='line'>    <span class="p">.</span><span class="n">using</span><span class="p">({</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">MyDisposables</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">MyDisposables</span><span class="p">()</span>
</span><span class='line'>    <span class="p">})</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="p">.</span><span class="n">interval</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nl">scheduler</span><span class="p">:</span> <span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">take</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码段对应的输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="n">dispose</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，当AnonymousObserver[匿名观察者]订阅using返回的Observable时，using内部创建了定期输出Int值的ObservableA，以及资源MyDisposables。在发送5个消息之后，ObservableA被终止，与此同时，MyDisposables资源被using释放。<br></p>

<p>理解起来还是比较简单的，但是在什么场景中会使用到这个操作呢？<br></p>

<hr />

<h3>监听Obervable</h3>

<p>先看下RxSwift官方Demo中的一段关于GitHub登陆的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">signingIn</span> <span class="o">=</span> <span class="n">ActivityIndicator</span><span class="p">()</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">signingIn</span> <span class="o">=</span> <span class="n">signingIn</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">usernameAndPassword</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">combineLatest</span><span class="p">(</span><span class="n">input</span><span class="p">.</span><span class="n">username</span><span class="p">,</span> <span class="n">input</span><span class="p">.</span><span class="n">password</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="err">$</span><span class="mi">1</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">signedIn</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">loginTaps</span><span class="p">.</span><span class="n">withLatestFrom</span><span class="p">(</span><span class="n">usernameAndPassword</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">API</span><span class="p">.</span><span class="n">signup</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">catchErrorJustReturn</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">trackActivity</span><span class="p">(</span><span class="n">signingIn</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">loggedIn</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="n">loggedIn</span> <span class="o">?</span> <span class="s">&quot;Mock: Signed in to GitHub.&quot;</span> <span class="o">:</span> <span class="s">&quot;Mock: Sign in to GitHub failed&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">wireframe</span><span class="p">.</span><span class="n">promptFor</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="nl">cancelAction</span><span class="p">:</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span> <span class="nl">actions</span><span class="p">:</span> <span class="p">[])</span>
</span><span class='line'>            <span class="c1">// propagate original value</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">loggedIn</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>signingIn是当前是否正在登陆Observable；signedIn是当前登陆动作Observable。<br>
signedIn体现的事件流如下:</p>

<ul>
<li>按下登陆按钮</li>
<li>使用当前用户名及密码进行登陆</li>
<li>展示登陆结果</li>
</ul>


<p>其中涉及到的Rx相关操作（<a href="http://rxmarbles.com">详细图示</a>）：</p>

<ul>
<li>combineLatest: 合并最后的username和password，形成一个新的Observable</li>
<li>withLatestFrom: 形成一个以loginTaps发送事件时间为采样时间点，发送usernameAndPassword内容的Observable</li>
</ul>


<hr />

<h3>困惑点</h3>

<p>接下来当时比较困扰我的一个点：这段代码是如何做到监听当前是否正在登陆的？<br>
其中涉及到记录开始登陆的操作如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="n">API</span><span class="p">.</span><span class="n">signup</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">catchErrorJustReturn</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">trackActivity</span><span class="p">(</span><span class="n">signingIn</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">extension</span> <span class="n">ObservableConvertibleType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">func</span> <span class="n">trackActivity</span><span class="p">(</span><span class="n">_</span> <span class="nl">activityIndicator</span><span class="p">:</span> <span class="n">ActivityIndicator</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">activityIndicator</span><span class="p">.</span><span class="n">trackActivityOfObservable</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重点关注<code>.trackActivity(signingIn)</code>这个调用。当时我的困惑是这样的：</p>

<ul>
<li><code>.trackActivity(signingIn)</code>是在<code>signup(username, password: password)</code>后调用的，也就是说登陆事件已经结束了，程序才开始监听登陆动作？（这个理解是错误的）</li>
</ul>


<p>上面的假设当然是错误的。那么，要想获得正确的结果，事件流应该是一个怎么样的执行顺序呢？<br>
最直白的想法应该就是下面三步：</p>

<ul>
<li>设置当前状态为正在执行登陆</li>
<li>执行登陆操作</li>
<li>设置当前状态为没有执行登陆</li>
</ul>


<p>那么问题来了。首先，<code>signup(username, password: password)</code>生成了登陆动作Observable，当有Observer订阅这个Observable时，Observable就会执行登陆操作，并发送对应的结果。这就造成了<code>.trackActivity(signingIn)</code> 不能直接返回上游传递过来的事件流，因为这样做的话，刚好切合了上面的那个假设。所以<code>.trackActivity(signingIn)</code>应该做到以下几件事情：</p>

<ul>
<li>A1、保留登陆动作ObservableA，返回自定义的一个ObservableB</li>
<li>A2、当外部Observer订阅ObservableB时，设置当前状态为正在执行登陆</li>
<li>A3、设置当前状态为正在执行登陆，然后让外部的Observer重新订阅到ObservableA</li>
<li>A4、登陆操作执行完毕后，设置当前状态为没有执行登陆</li>
</ul>


<hr />

<h3>解惑</h3>

<p>下面时signingIn所属类ActivityIndicator的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="nl">ActivityIndicator</span> <span class="p">:</span> <span class="n">DriverConvertibleType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">typealias</span> <span class="n">E</span> <span class="o">=</span> <span class="n">Bool</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="n">_lock</span> <span class="o">=</span> <span class="bp">NSRecursiveLock</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="n">_variable</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_loading</span><span class="p">:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_loading</span> <span class="o">=</span> <span class="n">_variable</span><span class="p">.</span><span class="n">asDriver</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">trackActivityOfObservable</span><span class="o">&lt;</span><span class="nl">O</span><span class="p">:</span> <span class="n">ObservableConvertibleType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">source</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">using</span><span class="p">({</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ActivityToken</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">increment</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ActivityToken</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">source</span><span class="p">.</span><span class="n">asObservable</span><span class="p">(),</span> <span class="nl">disposeAction</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">decrement</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span> <span class="p">{</span> <span class="n">t</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">t</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">func</span> <span class="n">increment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_lock</span><span class="p">.</span><span class="n">lock</span><span class="p">()</span>
</span><span class='line'>        <span class="n">_variable</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">_variable</span><span class="p">.</span><span class="n">value</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">_lock</span><span class="p">.</span><span class="n">unlock</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">func</span> <span class="n">decrement</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_lock</span><span class="p">.</span><span class="n">lock</span><span class="p">()</span>
</span><span class='line'>        <span class="n">_variable</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">_variable</span><span class="p">.</span><span class="n">value</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">_lock</span><span class="p">.</span><span class="n">unlock</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">func</span> <span class="n">asDriver</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_loading</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先看下<code>_variable</code>对应的Variable类型。<br>
Variable实际上是BehaviorSubject的一层包装，不同的是它只暴露数据，不会被终止或者失败。<br>
BehaviorSubject会在订阅者订阅时，发送一个最近或初始数据，并且订阅者可以接收BehaviorSubject随后发送的所有数据。<br>
下面是一个Variable的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码段对应的输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在回过头来看下<code>_variable</code>、<code>_loading</code>这两个属性。<br>
<code>_loading</code>在ActivityIndicator的初始化方法中的赋值如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">_loading</span> <span class="o">=</span> <span class="n">_variable</span><span class="p">.</span><span class="n">asDriver</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>_variable</code>的初始值为0。所以这部分的逻辑很容易理解：<code>_loading</code>通过<code>_variable</code>发送的值是否大于0来判断当前是否在执行动作，并且通过increment、decrement方法来设置<code>_variable</code>发送的值（改变当前正在执行的动作数）。<br></p>

<p>重点还是在trackActivityOfObservable方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">fileprivate</span> <span class="k">func</span> <span class="n">trackActivityOfObservable</span><span class="o">&lt;</span><span class="nl">O</span><span class="p">:</span> <span class="n">ObservableConvertibleType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">source</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">using</span><span class="p">({</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ActivityToken</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">increment</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ActivityToken</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">source</span><span class="p">.</span><span class="n">asObservable</span><span class="p">(),</span> <span class="nl">disposeAction</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">decrement</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span> <span class="p">{</span> <span class="n">t</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中对应的resourceFactory：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ActivityToken</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">increment</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ActivityToken</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">source</span><span class="p">.</span><span class="n">asObservable</span><span class="p">(),</span> <span class="nl">disposeAction</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">decrement</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>observableFactory：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">{</span> <span class="n">t</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActivityToken的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">private</span> <span class="k">struct</span> <span class="n">ActivityToken</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">ObservableConvertibleType</span><span class="p">,</span> <span class="n">Disposable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_source</span><span class="p">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_dispose</span><span class="p">:</span> <span class="n">Cancelable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">disposeAction</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_source</span> <span class="o">=</span> <span class="n">source</span>
</span><span class='line'>        <span class="n">_dispose</span> <span class="o">=</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">disposeAction</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_dispose</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">asObservable</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_source</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，ActivityToken就是一个保存了当前需要监听的Observable的资源。<br>
当外部Observer订阅trackActivityOfObservable返回的ObservableB时，using调用resourceFactory做了以下操作：</p>

<ul>
<li>增加当前正在执行的动作数</li>
<li>使用ActivityToken保存需要监听的ObservableA，并且在ActivityToken释放时，恢复当前正在执行的动作数</li>
</ul>


<p>接下来在调用observableFactory时，using把在resourceFactory中保存的ObservableA重新暴露给Observer。<br>
通过这种方式，就能在ObservableA发送数据之前，执行额外的操作<code>self.increment()</code>，也就是上面<code>.trackActivity(signingIn)</code>应该做到的A2。并且因为using会在observableFactory返回的ObservableA终止时释放resourceFactory创建的资源，所以当ObservableA终止时，会执行<code>self.decrement</code>，也就是A4。<br>
嗯，目前为止，上面的疑惑算是解决了。<br>
总结一下，就是通过using操作hold主需要监听的Observable，然后在执行了想要的额外动作后，重新暴露Observable给外部的Observer。</p>

<hr />

<h3>using内部实现</h3>

<p>最后，研究下using的内部实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="k">func</span> <span class="n">using</span><span class="o">&lt;</span><span class="nl">R</span><span class="p">:</span> <span class="n">Disposable</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">resourceFactory</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">R</span><span class="p">,</span> <span class="nl">observableFactory</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">R</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Using</span><span class="p">(</span><span class="nl">resourceFactory</span><span class="p">:</span> <span class="n">resourceFactory</span><span class="p">,</span> <span class="nl">observableFactory</span><span class="p">:</span> <span class="n">observableFactory</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>using实际上返回的是一个Using类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Using</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="nl">ResourceType</span><span class="p">:</span> <span class="n">Disposable</span><span class="o">&gt;:</span> <span class="n">Producer</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">E</span> <span class="o">=</span> <span class="n">SourceType</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">ResourceFactory</span> <span class="o">=</span> <span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">ResourceType</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">ObservableFactory</span> <span class="o">=</span> <span class="p">(</span><span class="n">ResourceType</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fileprivate</span> <span class="k">let</span> <span class="nl">_resourceFactory</span><span class="p">:</span> <span class="n">ResourceFactory</span>
</span><span class='line'>    <span class="n">fileprivate</span> <span class="k">let</span> <span class="nl">_observableFactory</span><span class="p">:</span> <span class="n">ObservableFactory</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">resourceFactory</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">ResourceFactory</span><span class="p">,</span> <span class="nl">observableFactory</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">ObservableFactory</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_resourceFactory</span> <span class="o">=</span> <span class="n">resourceFactory</span>
</span><span class='line'>        <span class="n">_observableFactory</span> <span class="o">=</span> <span class="n">observableFactory</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">run</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">E</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">sink</span> <span class="o">=</span> <span class="n">UsingSink</span><span class="p">(</span><span class="nl">parent</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">observer</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sink</span><span class="p">.</span><span class="n">disposable</span> <span class="o">=</span> <span class="n">sink</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sink</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using为Producer的子类，并且重载了run方法。<br>
再看下Producer的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Producer</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">subscribe</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">Element</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">CurrentThreadScheduler</span><span class="p">.</span><span class="n">isScheduleRequired</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">run</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">CurrentThreadScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">.</span><span class="n">schedule</span><span class="p">(())</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">run</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">Element</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">abstractMethod</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Producer调用subscribe时，会调用子类的run，并传入当前的Oberver。回到Using的实现，Producer的run方法中创建了UsingSink实例，并调用它的run方法。那么来看下最关键的UsingSink：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">UsingSink</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="nl">ResourceType</span><span class="p">:</span> <span class="n">Disposable</span><span class="p">,</span> <span class="nl">O</span><span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Sink</span><span class="o">&lt;</span><span class="n">O</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">ObserverType</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">SourceType</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">Parent</span> <span class="o">=</span> <span class="n">Using</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="n">ResourceType</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">E</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_parent</span><span class="p">:</span> <span class="n">Parent</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">parent</span><span class="p">:</span> <span class="n">Parent</span><span class="p">,</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_parent</span> <span class="o">=</span> <span class="n">parent</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">observer</span><span class="p">:</span> <span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">run</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">disposable</span> <span class="o">=</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">try</span> <span class="n">_parent</span><span class="p">.</span><span class="n">_resourceFactory</span><span class="p">()</span>
</span><span class='line'>            <span class="n">disposable</span> <span class="o">=</span> <span class="n">resource</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">source</span> <span class="o">=</span> <span class="n">try</span> <span class="n">_parent</span><span class="p">.</span><span class="n">_observableFactory</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>                <span class="n">source</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nb">self</span><span class="p">),</span>
</span><span class='line'>                <span class="n">disposable</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="k">let</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Observable</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="n">error</span><span class="p">).</span><span class="n">subscribe</span><span class="p">(</span><span class="nb">self</span><span class="p">),</span>
</span><span class='line'>                <span class="n">disposable</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">on</span><span class="p">(</span><span class="n">_</span> <span class="nl">event</span><span class="p">:</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">event</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="k">let</span> <span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">forwardOn</span><span class="p">(.</span><span class="n">next</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>        <span class="k">case</span> <span class="k">let</span> <span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">forwardOn</span><span class="p">(.</span><span class="n">error</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
</span><span class='line'>            <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">completed</span><span class="p">:</span>
</span><span class='line'>            <span class="n">forwardOn</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>            <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在run方法中，UsingSink先是调用<code>_resourceFactory()</code>创建了资源resource，然后以resource为参数调用<code>_observableFactory()</code>来创建想要的Obervable。并且通过<code>Disposables.create(source.subscribe(self),disposable)</code>让resource的生命周期和Obervable一致。<br>
实际上UsingSink只是在run中做了两件特殊的事情：</p>

<ul>
<li>在让source订阅自身前，创建了resource（一般会在这里做额外的操作）</li>
<li>使用的source不是由上游给的，而是通过<code>_observableFactory</code>创建的（一般的操作比如map、flatMap等，都是由上游给的）</li>
</ul>


<hr />

<h3>参考</h3>

<p><a href="http://www.introtorx.com/Content/v1.0.10621.0/11_AdvancedErrorHandling.html#Using">.Net中关于Using的例子</a><br>
<a href="http://rxmarbles.com">Rx操作图示</a><br>
<a href="http://reactivex.io/documentation/operators/using.html">官方文档中对于using的说明</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于RxSwift中的DisposeBag]]></title>
    <link href="http://triplecc.github.io/blog/2016-10-03-guan-yu-rxswiftzhong-de-disposebag/"/>
    <updated>2016-10-03T16:08:31+08:00</updated>
    <id>http://triplecc.github.io/blog/guan-yu-rxswiftzhong-de-disposebag</id>
    <content type="html"><![CDATA[<p>在RxSwift中，订阅者都会返回一个Disposable（默认是Disposables），以便使用者可以在后续的操作中，取消此次订阅。<br>
使用者可以调用dispose方法来进行取消订阅：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">disposables</span> <span class="o">=</span> <span class="n">Observable</span>
</span><span class='line'>    <span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nl">scheduler</span><span class="p">:</span> <span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">subscribe</span> <span class="p">{</span> <span class="n">event</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="n">disposables</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于手动取消订阅后，对应的subscribe回调会不会调用，官方的手册是这么说的：</p>

<ul>
<li>当scheduler是串行调度器，并且使用者在此调度器上调用了dispose，那么回调就不会执行［MainScheduler是在主线程/UI线程的串行调度器］</li>
<li>其他情况都不能保证回调的执行与否［并行情况下，执行顺序无法保证］</li>
</ul>


<!--More-->


<p>所以官方并不推荐手动调用dispose，而是通过DisposeBag、takeUntil或者其他非手动调用dispose途径。
而且官方建议始终使用<code>.addDisposableTo(disposeBag)</code>来管理订阅，即使对于一般的订阅，这个操作是没有必要的。</p>

<p>关于DisposeBag，它的行为类似ARC，不过是由RxSwift进行管理的。它会在自身被销毁的时候，对添加到自身的Disposables手动调用dispose：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">private</span> <span class="k">func</span> <span class="nf">dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">oldDisposables</span> <span class="o">=</span> <span class="n">_dispose</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">disposable</span> <span class="k">in</span> <span class="n">oldDisposables</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">disposable</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">private</span> <span class="k">func</span> <span class="nf">_dispose</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Disposable</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_lock</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span> <span class="n">defer</span> <span class="p">{</span> <span class="n">_lock</span><span class="p">.</span><span class="n">unlock</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">disposables</span> <span class="o">=</span> <span class="n">_disposables</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_disposables</span><span class="p">.</span><span class="n">removeAll</span><span class="p">(</span><span class="nl">keepingCapacity</span><span class="p">:</span> <span class="nb">false</span><span class="p">)</span>
</span><span class='line'>    <span class="n">_isDisposed</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">disposables</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">deinit</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加Disposables：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="nf">insert</span><span class="p">(</span><span class="n">_</span> <span class="nl">disposable</span><span class="p">:</span> <span class="n">Disposable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_insert</span><span class="p">(</span><span class="n">disposable</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">private</span> <span class="k">func</span> <span class="nf">_insert</span><span class="p">(</span><span class="n">_</span> <span class="nl">disposable</span><span class="p">:</span> <span class="n">Disposable</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_lock</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span> <span class="n">defer</span> <span class="p">{</span> <span class="n">_lock</span><span class="p">.</span><span class="n">unlock</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">_isDisposed</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">disposable</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_disposables</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">disposable</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其内部用自旋锁处理多线程的安全问题。关于defer的OC版本，可以看<a href="http://blog.sunnyxx.com/2014/09/15/objc-attribute-cleanup/">objc-attribute-cleanup</a>。ReactiveCocoa里也是有相应的@onExit实现。<br>
要想DisposeBag中的所有Disposables执行dispose，只要赋一个新的值给disposeBag变量就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样一来，原先的订阅都会被取消掉。</p>

<p>ReactiveCocoa的列表应用中，常常会看到这样的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">RAC</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">contentImageView</span><span class="p">.</span><span class="n">image</span><span class="p">)</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">viewModel</span><span class="p">.</span><span class="n">contentImageSignal</span>
</span><span class='line'>    <span class="nl">throttle</span><span class="p">:</span><span class="mf">0.05</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">takeUntil</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">rac_prepareForReuseSignal</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">RACTuple</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">value</span> <span class="n">first</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示在cell复用时，取消对contentImageSignal的订阅。<br>
RxSwift就可以这样实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">disposeBag</span><span class="p">:</span> <span class="n">DisposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="n">viewModel</span><span class="p">.</span><span class="n">contentImage</span>
</span><span class='line'>    <span class="p">.</span><span class="n">throttle</span><span class="p">(</span><span class="mf">0.05</span><span class="p">,</span> <span class="nl">scheduler</span><span class="p">:</span> <span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">contentImageView</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">image</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="kr">override</span> <span class="k">func</span> <span class="n">prepareForReuse</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">.</span><span class="n">prepareForReuse</span><span class="p">()</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于cell有高复用性与重复性特点，所以关于响应式编程在cell中应用最好注意以下几点：</p>

<ul>
<li>cell复用时[prepareForReuse]需要取消原先的事务</li>
<li>为了避免因用户快速滑动界面，而产生大量创建事务与取消事务的动作，在cell刚进入可见区域时，不立刻执行事务</li>
<li>限制事务的并发数</li>
</ul>


<p>所以，一般一个界面中有非常多的cell时，对其中元素进行绑定最好加上throttle操作，以使界面更加流畅。</p>

<hr />

<h3>参考</h3>

<p><a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Warnings.md">Warnings</a><br>
<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md">GettingStarted</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxSwift实现初探]]></title>
    <link href="http://triplecc.github.io/blog/2016-10-01-rxswiftshi-xian-chu-tan/"/>
    <updated>2016-10-01T16:08:36+08:00</updated>
    <id>http://triplecc.github.io/blog/rxswiftshi-xian-chu-tan</id>
    <content type="html"><![CDATA[<p>和ReactiveCocoa的实现类似，RxSwift也是通过不停地订阅上游的Observable来实现数据的流动。<br>
Rx操作大体分为两种：</p>

<ul>
<li>创建: create、just、of、from等</li>
<li>处理: map、flatMap、do等</li>
</ul>


<p>接下来通过下面的操作来简单分析下代码执行过程：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>




<!--More-->


<p>以下是执行过程中创建实例的过程:</p>

<ul>
<li>just操作创建Just实例（Just类是一个Observable）</li>
<li>map操作创建Map实例，Map实例保存了上游的Observable，这里是Just（Map类是一个Observable）</li>
<li>Map实例的subscribe操作创建了AnonymousObserver实例（AnonymousObserver是一个Observer）</li>
</ul>


<p>以下是执行Map实例执行subscribe后，代码的执行过程：</p>

<ul>
<li>AnonymousObserver通过Map实例的subscribeSafe方法订阅了Map实例</li>
<li>Map实例通过subscribe方法间接调用了自身的run方法</li>
<li>run方法创建了MapSink实例，MapSink保存了下游的Observer，即AnonymousObserver（MapSink是一个Observer）；同时run方法让MapSink订阅Map实例保存的上游Observable，即Just。</li>
<li>Just执行subscribe方法，在其中直接调用<code>observer.on(.next(_element))</code>向下游的Observer，即MapSink发送消息</li>
<li>MapSink接收到消息进行处理，然后向下游的Observer发送消息，即AnonymousObserver</li>
<li>AnonymousObserver执行最终处理</li>
</ul>


<p>上面就是Rx操作执行过程的全部内容，可以总结两点：</p>

<ul>
<li>创建操作的subscribe方法会直接向下游Observer发送消息</li>
<li>处理操作一般会创建两个实例，一个是Observable，一个是Observer。Observable用来保存上游Observable并且让下游Observer可以进行订阅，而Observer则用来保存下游的Observer以及订阅上游的Observable</li>
</ul>


<p>接下来结合代码分析下实现。<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">subscribe</span><span class="p">(</span><span class="nl">file</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="err">#</span><span class="n">file</span><span class="p">,</span> <span class="nl">line</span><span class="p">:</span> <span class="n">UInt</span> <span class="o">=</span> <span class="err">#</span><span class="n">line</span><span class="p">,</span> <span class="nl">function</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="err">#</span><span class="n">function</span><span class="p">,</span> <span class="nl">onNext</span><span class="p">:</span> <span class="p">((</span><span class="n">E</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">onError</span><span class="p">:</span> <span class="p">((</span><span class="n">Swift</span><span class="p">.</span><span class="n">Error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">onCompleted</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">onDisposed</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nl">disposable</span><span class="p">:</span> <span class="n">Disposable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">disposed</span> <span class="o">=</span> <span class="n">onDisposed</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">disposable</span> <span class="o">=</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">disposed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">disposable</span> <span class="o">=</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 创建匿名Observer</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">observer</span> <span class="o">=</span> <span class="n">AnonymousObserver</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span> <span class="n">e</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">e</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 调用对应的回调函数</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="k">let</span> <span class="n">value</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">onNext</span><span class="o">?</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="k">let</span> <span class="n">e</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">onError</span> <span class="o">=</span> <span class="n">onError</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">onError</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">print</span><span class="p">(</span><span class="s">&quot;Received unhandled error: \(file):\(line):\(function) -&gt; \(e)&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">disposable</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">completed</span><span class="p">:</span>
</span><span class='line'>            <span class="n">onCompleted</span><span class="o">?</span><span class="p">()</span>
</span><span class='line'>            <span class="n">disposable</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">subscribeSafe</span><span class="p">(</span><span class="n">observer</span><span class="p">),</span>
</span><span class='line'>        <span class="n">disposable</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">subscribeSafe</span><span class="o">&lt;</span><span class="nl">O</span><span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">E</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 让observer订阅自身</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">asObservable</span><span class="p">().</span><span class="n">subscribe</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Observable可以调用subscribe方法来设置对应的回调。其内部实现是创建一个匿名的Observer，然后
让这个匿名Observer订阅Observable。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Producer</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">subscribe</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">Element</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 执行子类的run方法，在run方法中，一般会保存传入的Observer</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">CurrentThreadScheduler</span><span class="p">.</span><span class="n">isScheduleRequired</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">run</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">CurrentThreadScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">.</span><span class="n">schedule</span><span class="p">(())</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">run</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">Element</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">abstractMethod</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Producer是Just和Map的父类，同时也是一个Observable。通过调用subscribe方法来设置对应的Observer。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="n">ResultType</span><span class="o">&gt;:</span> <span class="n">Producer</span><span class="o">&lt;</span><span class="n">ResultType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">Selector</span> <span class="o">=</span> <span class="p">(</span><span class="n">SourceType</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">ResultType</span>
</span><span class='line'>  <span class="c1">// 上游的Obervable</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_source</span><span class="p">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_selector</span><span class="p">:</span> <span class="n">Selector</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">selector</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">Selector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_source</span> <span class="o">=</span> <span class="n">source</span>
</span><span class='line'>        <span class="n">_selector</span> <span class="o">=</span> <span class="n">selector</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if TRACE_RESOURCES</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">AtomicIncrement</span><span class="p">(</span><span class="o">&amp;</span><span class="n">numberOfMapOperators</span><span class="p">)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">composeMap</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">selector</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">ResultType</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">R</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">originalSelector</span> <span class="o">=</span> <span class="n">_selector</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="n">R</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">_source</span><span class="p">,</span> <span class="nl">selector</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nl">s</span><span class="p">:</span> <span class="n">SourceType</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">R</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">let</span> <span class="nl">r</span><span class="p">:</span> <span class="n">ResultType</span> <span class="o">=</span> <span class="n">try</span> <span class="n">originalSelector</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">try</span> <span class="n">selector</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">run</span><span class="o">&lt;</span><span class="nl">O</span><span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">ResultType</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">sink</span> <span class="o">=</span> <span class="n">MapSink</span><span class="p">(</span><span class="nl">selector</span><span class="p">:</span> <span class="n">_selector</span><span class="p">,</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">observer</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sink</span><span class="p">.</span><span class="n">disposable</span> <span class="o">=</span> <span class="n">_source</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sink</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cp">#if TRACE_RESOURCES</span>
</span><span class='line'>    <span class="k">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">AtomicDecrement</span><span class="p">(</span><span class="o">&amp;</span><span class="n">numberOfMapOperators</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的_source表示上游的Observable。run方法的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">run</span><span class="o">&lt;</span><span class="nl">O</span><span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">ResultType</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 创建Observer，并且保存下游的Observer</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sink</span> <span class="o">=</span> <span class="n">MapSink</span><span class="p">(</span><span class="nl">selector</span><span class="p">:</span> <span class="n">_selector</span><span class="p">,</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 订阅上游的Observable</span>
</span><span class='line'>    <span class="n">sink</span><span class="p">.</span><span class="n">disposable</span> <span class="o">=</span> <span class="n">_source</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sink</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先是创建了MapSink，并保存了下游的Observer，然后让sink去订阅上游的Observable。</p>

<p>MapSink的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">MapSink</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Sink</span><span class="o">&lt;</span><span class="n">O</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">ObserverType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">Selector</span> <span class="o">=</span> <span class="p">(</span><span class="n">SourceType</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">ResultType</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">ResultType</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">Element</span> <span class="o">=</span> <span class="n">SourceType</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_selector</span><span class="p">:</span> <span class="n">Selector</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">selector</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">Selector</span><span class="p">,</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_selector</span> <span class="o">=</span> <span class="n">selector</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">observer</span><span class="p">:</span> <span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 这里由上游进行调用，Observable或者Observer都可以</span>
</span><span class='line'>  <span class="c1">// 不过在流的源头还是需要Observable手动调用_observer.on</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">on</span><span class="p">(</span><span class="n">_</span> <span class="nl">event</span><span class="p">:</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">event</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="k">let</span> <span class="n">element</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">mappedElement</span> <span class="o">=</span> <span class="n">try</span> <span class="n">_selector</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'>                <span class="n">forwardOn</span><span class="p">(.</span><span class="n">next</span><span class="p">(</span><span class="n">mappedElement</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">catch</span> <span class="k">let</span> <span class="n">e</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">forwardOn</span><span class="p">(.</span><span class="n">error</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'>                <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="k">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">forwardOn</span><span class="p">(.</span><span class="n">error</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
</span><span class='line'>            <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">completed</span><span class="p">:</span>
</span><span class='line'>            <span class="n">forwardOn</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>            <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MapSink继承自Sink，Sink的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Sink</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">SingleAssignmentDisposable</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 保存的下游Observer</span>
</span><span class='line'>    <span class="n">fileprivate</span> <span class="k">let</span> <span class="nl">_observer</span><span class="p">:</span> <span class="n">O</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#if TRACE_RESOURCES</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">AtomicIncrement</span><span class="p">(</span><span class="o">&amp;</span><span class="n">resourceCount</span><span class="p">)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>        <span class="n">_observer</span> <span class="o">=</span> <span class="n">observer</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">final</span> <span class="k">func</span> <span class="n">forwardOn</span><span class="p">(</span><span class="n">_</span> <span class="nl">event</span><span class="p">:</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">isDisposed</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 调用子类的on方法时，会调用Sink的forwardOn方法，从而把事件传递到下游的Observer</span>
</span><span class='line'>        <span class="n">_observer</span><span class="p">.</span><span class="n">on</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">final</span> <span class="k">func</span> <span class="n">forwarder</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">SinkForward</span><span class="o">&lt;</span><span class="n">O</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SinkForward</span><span class="p">(</span><span class="nl">forward</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">deinit</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#if TRACE_RESOURCES</span>
</span><span class='line'>       <span class="k">let</span> <span class="n">_</span> <span class="o">=</span>  <span class="n">AtomicDecrement</span><span class="p">(</span><span class="o">&amp;</span><span class="n">resourceCount</span><span class="p">)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦上游调用了Observer的on方法，Observer会调用保存的下游Observer的on方法，从而触发一个链式调用。</p>

<p>Just的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Just</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Producer</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_element</span><span class="p">:</span> <span class="n">Element</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">element</span><span class="p">:</span> <span class="n">Element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_element</span> <span class="o">=</span> <span class="n">element</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">subscribe</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">Element</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">observer</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">next</span><span class="p">(</span><span class="n">_element</span><span class="p">))</span>
</span><span class='line'>        <span class="n">observer</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很明显，Just是流的源头，所以它直接重载了subscribe方法，通过主动调用Observer的on方法，让数据能向下游流动。</p>

<hr />

<h3>总结</h3>

<p>从just到subscribe，方法的调用方向大致如下：</p>

<p><img src="http://triplecc.github.io/images/Snip20161007_1.png" alt="" /></p>

<p>首先是通过<code>.</code>的方法调用，期间创建了各类Observable。<br>
直到外部调用了subscribe，即订阅了Observable，在(1)中创建的Observable开始依次调用subscribe，期间创建了各类Observer。<br>
最后subscribe到达源头，源头调用Observer的on方法，在(2)中创建的Observer开始依次调用on，最终把结果输出到subscribe回调中。</p>

<hr />

<h3>参考</h3>

<p><a href="http://tech.meituan.com/RACSignalSubscription.html">RACSignal的Subscription深入分析</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识碎片七]]></title>
    <link href="http://triplecc.github.io/blog/2016-09-24-ioszhi-shi-sui-pian-qi/"/>
    <updated>2016-09-24T10:43:37+08:00</updated>
    <id>http://triplecc.github.io/blog/ioszhi-shi-sui-pian-qi</id>
    <content type="html"><![CDATA[<p>1、Xcode8日志及Pod的Swift3.0问题 <br>
2、UITextFiled使用UITextAlignmentRight输入空格光标不实时跟进 <br>
3、解决使用UIAlertController时，Attempt to present vc whose view is not in the window hierarchy! 问题 <br>
4、单例在 Unit Test 中不唯一问题</p>

<!--more-->


<h2>Xcode8日志及Pod的Swift3.0问题</h2>

<p>目前的Xcode8会打印多余的日志，需要进入对应scheme中的enviroment variables设置下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OS_ACTIVITY_MODE    disable</span></code></pre></td></tr></table></div></figure>


<p>如果设置了以上信息后，出现了真机调试不会打印日志的情况的话，去掉<code>disable</code>，保留<code>OS_ACTIVITY_MODE</code>。</p>

<p>Pod更新Swift三方库后编译，会出现转换语法的错误，需要在podfile中添加以下语句再更新：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post_install do |installer|
</span><span class='line'>    installer.pods_project.targets.each do |target|
</span><span class='line'>        target.build_configurations.each do |config|
</span><span class='line'>            config.build_settings['SWIFT_VERSION'] = '3.0'
</span><span class='line'>            config.build_settings['MACOSX_DEPLOYMENT_TARGET'] = '10.10'
</span><span class='line'>        end
</span><span class='line'>    end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>如果还想使用2.3的话：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post_install do |installer|
</span><span class='line'>  installer.pods_project.targets.each do |target|
</span><span class='line'>    target.build_configurations.each do |config|
</span><span class='line'>      config.build_settings['MACOSX_DEPLOYMENT_TARGET'] = '10.10'
</span><span class='line'>      #### IT IS IMPORTANT TO SET IT TO 2.3
</span><span class='line'>      config.build_settings['SWIFT_VERSION'] = '2.3' 
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>UITextFiled使用UITextAlignmentRight输入空格光标不实时跟进</h2>

<p><img src="http://triplecc.github.io/images/Snip20170205_2.png" alt="" /></p>

<p>在上图箭头处输入空格，光标和文字不会向前移动。</p>

<p><a href="http://stackoverflow.com/questions/19569688/right-aligned-uitextfield-spacebar-does-not-advance-cursor-in-ios-7">解决方案</a></p>

<h2>解决使用UIAlertController时，Attempt to present vc whose view is not in the window hierarchy! 问题</h2>

<p>假设现有有控制器 A ， present 了控制器 B ，而在控制器 B 还没有 dimiss 完全时，再 present 新的控制器 C 就会出现这个警告，控制器 C 也并不会如预期显示。</p>

<p>把上面的控制器 C 当成 UIAlertController ，就切合某些业务场景了。 结合业务场景，这个问题可以看成：如何让UIAlertController 使用起来和 UIAlertView 一样“万金油” ，并且不用受控制器层级约束。</p>

<p>下面是 stackoverflow 上一个比较详细的解决方案：
<a href="http://stackoverflow.com/questions/26554894/how-to-present-uialertcontroller-when-not-in-a-view-controller">How to present UIAlertController when not in a ViewController</a></p>

<p>简单来说，就是创建一个新的 window ( 优先级比当前最高优先级大 1 )， 然后通过这个 window 的根控制器 present UIAlertController，并且在 UIAlertController 被释放的同时，释放此 window。</p>

<p>这个方案本身目前看来并没有问题，问题出现 agilityvision 在 stackoverflow 上给的 demo 多了下面代码 (<a href="https://github.com/agilityvision/FFGlobalAlertController">FFGlobalAlertController</a> 并没有这几句代码)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">delegate</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">window</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// we inherit the main window&#39;s tintColor</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">alertWindow</span><span class="p">.</span><span class="n">tintColor</span> <span class="o">=</span> <span class="n">delegate</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">tintColor</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码在以下情况下，存在 alert 按钮文字无法显示的问题 ：</p>

<ul>
<li>设置 -> 通用 -> 辅助功能 -> 增强对比度 -> 打开加深颜色 。</li>
</ul>


<p>这个问题挺奇葩的，要不是刚好有测试人员打开了这个开关，基本也发现不了。最终我也不知道为什么会这样，从 Xcode 可视化工具看， alert 按钮上的确是有文字的，颜色也没错。</p>

<p>想要使用 agilityvision 的方案，删除这几句代码就可以不会出现上述问题了。</p>

<h2>单例在 Unit Test 中不唯一问题</h2>

<p>项目中有两个 Target ，一个 Framework ，一个 Test ，不过 Podfile 只是指定了 Framework 的依赖，并没有像下面那样给 Test 设置依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">target</span> <span class="err">&#39;</span><span class="n">XXXTests</span><span class="err">&#39;</span> <span class="k">do</span>
</span><span class='line'><span class="cp">#    pod </span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在运行单元测试的时候，会出现 Undefined 编译错误。如果强制在 Configurations 中设置 Test 的配置和 Framework 一致，会造成工程里实际存在了两个单例类，单例对象实际上并不唯一。</p>

<p>这种情况下，只要像上面演示的那样，给 Test 设置单独的依赖即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用策略模式增强图片浏览器的扩展性]]></title>
    <link href="http://triplecc.github.io/blog/2016-09-15-li-yong-ce-lue-mo-shi-zeng-qiang-tu-pian-liu-lan-qi-de-kuo-zhan-xing/"/>
    <updated>2016-09-15T10:33:54+08:00</updated>
    <id>http://triplecc.github.io/blog/li-yong-ce-lue-mo-shi-zeng-qiang-tu-pian-liu-lan-qi-de-kuo-zhan-xing</id>
    <content type="html"><![CDATA[<p>说到图片浏览器，项目中比较常用的成熟框架有Objective-C版本的<a href="https://github.com/mwaterfall/MWPhotoBrowser">MWPhotoBrowser</a>，<a href="https://github.com/ideaismobile/IDMPhotoBrowser">IDMPhotoBrowser</a>或者Swift版本的<a href="https://github.com/suzuki-0000/SKPhotoBrowser">SKPhotoBrowser</a>。<br></p>

<p>从核心功能来看，MWPhotoBrowser，IDMPhotoBrowser这两个框架，都很好地实现了对本地资源、相册资源、网络资源的获取与显示。并且很好地封装了网络和相册的获取方式，在我看来，这是他的优势，但同时，高度的集成也催生了一些不足。<br></p>

<p>这样做的优势不言而喻，调用者只需要很少的几行代码，就可以集成一个图片浏览器框架，省时省力。以MWPhotoBrowser为例，在不设置额外属性的情况下，只需要下面两行代码就可以创建：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MWPhotoBrowser</span> <span class="o">*</span><span class="n">browser</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MWPhotoBrowser</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithPhotos</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">photos</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">browser</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用者只要关注如何提供MWPhotoBrowser所要展示资源就可以了，不需要做额外的操作，非常地简洁方便。<br></p>

<p>关于不足，由于MWPhotoBrowser内部实现了获取网络图片功能，在追求内部实现尽量精简的前提下，不可避免地要依赖加载图片的第三方库(SDWebImage)。如果原来项目并没有使用SDWebImage，而是用YYWebImage或者Kingfisher，那么使用MWPhotoBrowser便会引入冗余的框架，从而让项目额外增加了一种图片缓存机制，不利于内存以及磁盘使用率的优化。<br></p>

<p>对于相册资源的访问，MWPhotoBrowser内部也实现了通过PHAsset或者ALAsset获取相片的功能。不过一般来说，项目会有自己的一套相册选择器，进而会有相应的相册资源获取策略。所以以个人观点来看，如何获取相册资源，应该由使用者告知，而不是在框架内部自己实现一套，这样更加符合DRY。<br></p>

<p>接下来，我会针对上面的不足，实现一套兼容本地资源、相册资源、网络资源的简易图片选择器。<br>
本文章对应的所有代码在仓库<a href="https://github.com/tobevoid/TBVImageBrowser">TBVImageBrowser</a>中。</p>

<!--More-->


<h3>框架概览</h3>

<p>TBVImageBrowser的主要组成如下：<br>
<img src="http://triplecc.github.io/images/Snip20160915_3.png" alt="图一" /><br>
<img src="http://triplecc.github.io/images/Snip20160915_4.png" alt="图二" /><br></p>

<p>从图一可以看出，TBVImageBrowserView持有了一个遵守TBVImageProviderManagerProtocol的对象。根据此持有的策略管理对象，可以通过抽象策略接口TBVImageProviderProtocol访问对应的具体策略类：TBVWebImageProvider、TBVLocalImageProvider、TBVAssetImageProvider和自定义的Provider。<br></p>

<p>实际上具体的策略都可以由使用者实现，也就是说图一中的TBVWebImageProvider、TBVLocalImageProvider、TBVAssetImageProvider都可以去除，只要提供遵守策略接口TBVImageProviderProtocol的具体策略类就行了。一般来说，访问资源的策略由使用者提供，因为使用者知道自己实际的获取方式。<br></p>

<p>从图二中可以看出，TBVImageBrowserView持有的策略管理对象的内部组成。只要遵守TBVImageProviderManagerProtocol协议，都可以成为策略管理对象。</p>

<p>除了以上几个协议，我还抽出了TBVImageIdentifierProtocol、TBVImageElementProtocol以及TBVImageProgressPresenterProtocol协议。
TBVImageProviderIdentifierProtocol的声明如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">TBVImageIdentifierProtocol</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@required</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">identifier</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>identifier作为匹配Provider和资源类型的标志，是每个策略必须要实现的。<br>
TBVImageElementProtocol的声明如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">TBVImageElementProtocol</span> <span class="o">&lt;</span><span class="n">TBVImageIdentifierProtocol</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@required</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSObject</span> <span class="o">*</span><span class="n">resource</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">progress</span><span class="p">;</span>
</span><span class='line'><span class="k">@optional</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">options</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>TBVImageElementProtocol遵守了TBVImageProviderIdentifierProtocol协议，提供解析自身资源的Provider标志。resource用来存储实际需要获取的资源，progress则表示获取的进度。<br>
TBVImageProgressPresenterProtocol的声明如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">TBVImageProgressPresenterProtocol</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="n">presenter</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setPresenterProgress:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">progress</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于项目中可能有自己的一套loading progress控件，仅仅为了图片选择器而引入另一套控件是不划算的，所以BVImageBrowser的loading progress控件也让使用者来提供，尽量减少不必要依赖。</p>

<h3>TBVImageProviderManager</h3>

<p>TBVImageProviderManager帮助TBVImageBrowserView管理所有添加的策略，让TBVImageBrowserView得以关注其浏览业务本身，而不必掺杂获取资源的具体逻辑。<br></p>

<p>首先是添加删除策略接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addImageProvider:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">TBVImageProviderProtocol</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">provider</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSCParameterAssert</span><span class="p">(</span><span class="n">provider</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">provider</span><span class="p">.</span><span class="n">identifier</span><span class="p">,</span> <span class="s">@&quot;identifier of %@ can not be nil.&quot;</span><span class="p">,</span> <span class="n">provider</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TBVLogInfo</span><span class="p">(</span><span class="s">@&quot;add provider %@&quot;</span><span class="p">,</span> <span class="n">provider</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@synchronized</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">providerMap</span><span class="p">[</span><span class="n">provider</span><span class="p">.</span><span class="n">identifier</span><span class="p">]</span> <span class="o">=</span> <span class="n">provider</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">removeImageProvider:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">TBVImageProviderProtocol</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">provider</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">provider</span><span class="p">.</span><span class="n">identifier</span><span class="p">,</span> <span class="s">@&quot;identifier of %@ can not be nil.&quot;</span><span class="p">,</span> <span class="n">provider</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TBVLogInfo</span><span class="p">(</span><span class="s">@&quot;remove provider %@&quot;</span><span class="p">,</span> <span class="n">provider</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@synchronized</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">providerMap</span> <span class="nl">removeObjectForKey</span><span class="p">:</span><span class="n">provider</span><span class="p">.</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">providerMap</span><span class="p">.</span><span class="n">allKeys</span> <span class="nl">containsObject</span><span class="p">:</span><span class="n">provider</span><span class="p">.</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>TBVImageProviderManager中会声明一个providerMap字典，以策略的identifier作key，策略作为value。
接下来是获取资源的接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">imageSignalForElement:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">TBVImageElementProtocol</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">element</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">element</span><span class="p">.</span><span class="n">identifier</span><span class="p">,</span> <span class="s">@&quot;identifier of %@ can not be nil.&quot;</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">@</span><span class="n">weakify</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">@</span><span class="n">strongify</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>        <span class="n">TBVLogInfo</span><span class="p">(</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">image resource:</span><span class="se">\n\t</span><span class="s">%@;</span><span class="se">\n</span><span class="s">identifier:</span><span class="se">\n\t</span><span class="s">%@;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">element</span><span class="p">.</span><span class="n">resource</span><span class="p">,</span> <span class="n">element</span><span class="p">.</span><span class="n">identifier</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">providerMap</span><span class="p">.</span><span class="n">allKeys</span> <span class="nl">containsObject</span><span class="p">:</span><span class="n">element</span><span class="p">.</span><span class="n">identifier</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="nb">self</span><span class="p">.</span><span class="n">providerMap</span><span class="p">[</span><span class="n">element</span><span class="p">.</span><span class="n">identifier</span><span class="p">]</span>
</span><span class='line'>                    <span class="nl">imageSignalForElement</span><span class="p">:</span><span class="n">element</span>
</span><span class='line'>                    <span class="nl">progress</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">CGFloat</span> <span class="n">progress</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">element</span><span class="p">.</span><span class="n">progress</span> <span class="o">=</span> <span class="n">progress</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}]];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">userInfo</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'>            <span class="n">userInfo</span><span class="p">[</span><span class="n">kTBVImageBrowserErrorKey</span><span class="p">]</span> <span class="o">=</span>
</span><span class='line'>            <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;image provider with identifier %@ was not found&quot;</span><span class="p">,</span> <span class="n">element</span><span class="p">.</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendError</span><span class="p">:[</span><span class="bp">NSError</span> <span class="nl">errorWithDomain</span><span class="p">:</span><span class="s">@&quot;TBVImageProviderManager&quot;</span>
</span><span class='line'>                                                        <span class="nl">code</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>                                                    <span class="nl">userInfo</span><span class="p">:</span><span class="n">userInfo</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'>        <span class="n">switchToLatest</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">catch</span><span class="p">:</span><span class="o">^</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TBVLogError</span><span class="p">(</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">error domain: </span><span class="se">\n\t</span><span class="s">%@; </span><span class="se">\n</span><span class="s">error code: </span><span class="se">\n\t</span><span class="s">%ld; </span><span class="se">\n</span><span class="s">error info: </span><span class="se">\n\t</span><span class="s">%@;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">domain</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">code</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">userInfo</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="n">empty</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>TBVImageProviderManager根据element提供的identifier，去providerMap字典中查找匹配的策略，并调用策略接口，获取element的resource中存储的资源。</p>

<h3>载入自定义loading progress控件</h3>

<p>在加载一个loading progress控件时，我需要什么样的接口?<br>
首先是控件本身，TBVImageBrowserView需要使用者创建这个控件的实体给TBVImageBrowserView，而控件的具体属性则由调用者在创建控件时一并设置。然后因为是loading progress控件，理所当然地应该提供设置progress的接口。由这两个需求催生TBVImageProgressPresenterProtocol协议，来对使用者提供的loading progress控件进行限定。<br></p>

<p>有了满足要求的控件，如何在内部进行创建？TBVImageBrowserView需要使用者提供控件对应Class，然后在内部以以下方式进行添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupProgressPresenter:</span><span class="p">(</span><span class="kt">Class</span><span class="p">)</span><span class="nv">progressPresenter</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">progressView</span> <span class="o">||</span> <span class="o">!</span><span class="n">progressPresenter</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">progressPresenter</span> <span class="nl">conformsToProtocol</span><span class="p">:@</span><span class="n">protocol</span><span class="p">(</span><span class="n">TBVImageProgressPresenterProtocol</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">id</span> <span class="n">presenter</span> <span class="o">=</span> <span class="p">[</span><span class="n">progressPresenter</span> <span class="n">presenter</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">presenter</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">UIView</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">progressView</span> <span class="o">=</span> <span class="n">presenter</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">contentView</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">progressView</span><span class="p">];</span>
</span><span class='line'>            <span class="bp">CGSize</span> <span class="n">size</span> <span class="o">=</span> <span class="n">CGSizeEqualToSize</span><span class="p">(</span><span class="n">CGSizeZero</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">progressView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">)</span> <span class="o">?</span>
</span><span class='line'>                <span class="n">CGSizeMake</span><span class="p">(</span><span class="mf">40.0f</span><span class="p">,</span> <span class="mf">40.0f</span><span class="p">)</span> <span class="o">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">progressView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span> <span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">progressView</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">make</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="l">@(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="l">)</span><span class="p">);</span>
</span><span class='line'>                <span class="n">make</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="l">@(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="l">)</span><span class="p">);</span>
</span><span class='line'>                <span class="n">make</span><span class="p">.</span><span class="n">center</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">contentView</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TBVLogError</span><span class="p">(</span><span class="s">@&quot;progressPresenter should be subclass of UIView.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TBVLogError</span><span class="p">(</span><span class="s">@&quot;progressPresenter should comfirm TBVImageProgressPresenterProtocol.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，载入自定义的loading progress控件已经实现了。接下来以DACircularProgress控件为例，说明如何使用。<br>
首先，创建DALabeledCircularProgressView的分类，然后在分类中遵守TBVImageProgressPresenterProtocol协议，并实现其中的接口:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">DALabeledCircularProgressView</span> <span class="nl">(TBVImageProgressPresenter)</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">presenter</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DALabeledCircularProgressView</span> <span class="o">*</span><span class="n">progressView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">DALabeledCircularProgressView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">progressView</span><span class="p">.</span><span class="n">thicknessRatio</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">progressView</span><span class="p">.</span><span class="n">progressLabel</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">progressView</span><span class="p">.</span><span class="n">progressLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mi">12</span><span class="p">];</span>
</span><span class='line'>    <span class="n">progressView</span><span class="p">.</span><span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">progressView</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setPresenterProgress:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">progress</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">setProgress</span><span class="p">:</span><span class="n">progress</span> <span class="nl">animated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">progress</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">progress</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="n">TBVLogDebug</span><span class="p">(</span><span class="s">@&quot;load progress %f&quot;</span><span class="p">,</span> <span class="n">progress</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">progressLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%.02f&quot;</span><span class="p">,</span> <span class="n">progress</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且在初始化TBVImageBrowserView时，传入DALabeledCircularProgressView类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">_configuration</span><span class="p">.</span><span class="n">progressPresenterClass</span> <span class="o">=</span> <span class="p">[</span><span class="n">DALabeledCircularProgressView</span> <span class="k">class</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>TBVImageBrowser是在自己做IM发送相册图片时造的轮子，由于后期项目本身并没有使用SDWebImage，并且有一套自己访问相册的策略，所以MWPhotoBrowser并不是很符合自己的需求。<br></p>

<p>TBVImageBrowser遵循了一个原则：使用者应该知道自己如何得到资源，并向框架提供获取资源的方法，这样才能让框架具有更好的扩展性。<br>
详细的使用方法在<a href="https://github.com/tobevoid/TBVImageBrowser">仓库说明</a>中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AssetsLibrary和PhotoKit做一个简易的相片选择器]]></title>
    <link href="http://triplecc.github.io/blog/2016-09-10-shi-yong-assetslibraryhe-photokitzuo-%5B%3F%5D-ge-xiang-pian-xuan-ze-qi/"/>
    <updated>2016-09-10T21:25:36+08:00</updated>
    <id>http://triplecc.github.io/blog/shi-yong-assetslibraryhe-photokitzuo-[?]-ge-xiang-pian-xuan-ze-qi</id>
    <content type="html"><![CDATA[<p>iOS8之后，苹果推出了PhotoKit，让开发者在处理相册相关的业务时，可以更加得心应手。github上的开发者针对PhotoKit做了一层很优秀的封装<a href="https://github.com/chiunam/CTAssetsPickerController">CTAssetsPickerController</a>，如果只需要支持iOS8+，那么可定制程度非常高的<a href="https://github.com/chiunam/CTAssetsPickerController">CTAssetsPickerController</a>是个不错的选择。<br>
但是由于现有的业务还是需要支持iOS7，所以并不能完全舍弃使用<code>AssetsLibrary</code>的方式来访问相册。因此也就需要自己封装一套兼容iOS7的相册管理器。</p>

<p>本文涉及代码：<a href="https://github.com/tobevoid/TBVAssetsPicker">TBVAssetsPicker</a></p>

<!--more-->


<h3>统一asset以及collection</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> AssetsLibrary </th>
<th style="text-align:left;"> PhotoKit </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> ALAssetsGroup </td>
<td style="text-align:left;"> PHAssetCollection </td>
</tr>
<tr>
<td style="text-align:left;"> ALAsset </td>
<td style="text-align:left;"> PHAsset </td>
</tr>
<tr>
<td style="text-align:left;"> TBVAsset </td>
<td style="text-align:left;"> TBVCollection </td>
</tr>
</tbody>
</table>


<p>相片选择器最终需要向外部提供统一的标识相片的结构。同样，统一结构能让相片选择器更加优雅地实现内部逻辑。所以这里我声明了两个对应的类：<code>TBVAsset</code>、<code>TBVCollection</code>，并提供一些最基本的功能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">TBVAsset</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  PHAsset or ALAsset</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSObject</span>  <span class="o">*</span><span class="n">asset</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">assetWithOriginAsset:</span><span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 本地标识 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">assetLocalIdentifer</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 源照片尺寸 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nf">assetPixelSize</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">TBVCollection</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  ALAssetsGroup or PHAssetCollection</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSObject</span>  <span class="o">*</span><span class="n">collection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">collectionWithOriginCollection:</span><span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">aCollection</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 相簿名 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">collectionTitle</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 估算的相簿相片个数 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">collectionEstimatedAssetCount</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 精确的相簿相片个数 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">collectionAccurateAssetCountWithFetchOptions:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">filterOptions</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">collectionAccurateAssetCountWithMediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了这些最基本的功能，在实现相册选择器时，就可以方便地对资源进行操作了。<br>
其实对于这部分的兼容处理，主要就是对两个不同的库进行封装，使其呈现同样的外观，后续的几步大体也是围绕这个目标进行。</p>

<h3>封装manager</h3>

<p>由于是两个不同版本的库，并且AssetsLibrary已经在iOS9时被弃用，使用时会产生<code>deprecated</code>警告，所以我分别对<code>ALAssetsLibrary</code>和<code>PHCachingImageManager</code>进行了封装，然后通过统一的接口<code>TBVAssetsManagerProtocol</code>暴露其功能。</p>

<p>一般相册选择器具有如下页面及对应功能（UI展示）：</p>

<ul>
<li>首页

<ul>
<li>相簿名</li>
<li>相簿缩略图</li>
<li>相簿拥有相片数</li>
</ul>
</li>
<li>预览页

<ul>
<li>相片缩略图</li>
<li>选中相片大小</li>
</ul>
</li>
<li>浏览页

<ul>
<li>相片大图</li>
<li>选中相片大小</li>
</ul>
</li>
</ul>


<p>所以我提供的接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//====================================</span>
</span><span class='line'><span class="c1">//              image</span>
</span><span class='line'><span class="c1">//====================================</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** requestImage返回都是一个RACTuple，first是Image，second是是否为degraded */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求特定大小的图片 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span>
</span><span class='line'>                         <span class="nf">targetSize:</span><span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nv">targetSize</span>
</span><span class='line'>                        <span class="nf">contentMode:</span><span class="p">(</span><span class="n">TBVAssetsPickerContentMode</span><span class="p">)</span><span class="nv">contentMode</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 请求相簿缩略图 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestPosterImageForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                                     <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求相片缩略图 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestPosterImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求相片原图 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestFullResolutionImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//====================================</span>
</span><span class='line'><span class="c1">//              asset / collection</span>
</span><span class='line'><span class="c1">//====================================</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求相片资源大小 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestSizeForAssets:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">&lt;</span><span class="n">TBVAsset</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nv">assets</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求所有相簿 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAllCollections</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求所有相片资源 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAssetsForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                                <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求相机胶卷相簿（针对一般业务首先进入相机胶卷的预览页） */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestCameraRollCollection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//====================================</span>
</span><span class='line'><span class="c1">//              video</span>
</span><span class='line'><span class="c1">//====================================</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求AVPlayerItem */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestVideoForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求AVURLAsset */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestURLAssetForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现以上接口，一般相册选择器的功能点就已经完成大半了。<br></p>

<h2>TBVAssetsPickerManager</h2>

<p>由于自定义的相册manager都遵守<code>TBVAssetsManagerProtocol</code>，<code>TBVAssetsPickerManager</code>
的实现就变得相对简单，没有一大串令人厌烦的<code>if-else</code>。当然<code>TBVAssetsPickerManager</code>本身也是遵守<code>TBVAssetsManagerProtocol</code>的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">TBVAssetsPickerManager</span><span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSObject</span><span class="o">&lt;</span><span class="n">TBVAssetsManagerProtocol</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">realManager</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">requestIdList</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">photoKitAvailable</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark life cycle</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="n">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_photoKitAvailable</span> <span class="o">=</span> <span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;PHImageManager&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark TBVAssetsManagerProtocol</span>
</span><span class='line'><span class="p">....</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark getter setter</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="n">realManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_realManager</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">photoKitAvailable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_realManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBVCachingImageManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_realManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBVAssetsLibrary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_realManager</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样<code>_realManager</code>拿到的就是当前版本最新的相册manager了。</p>

<h3>接口的实现</h3>

<p>其实接口文档描述的还是非常清晰的，所以这里只是罗列了下代码，并没有针对每一步做解释，因为这些基本的操作进去头文件看看就全明白了。</p>

<h6>- requestImageForAsset:targetSize:(CGSize)targetSize:contentMode:</h6>

<p>这个接口主要用来获取非原图。</p>

<ul>
<li>TBVCachingImageManager

<ul>
<li>关于PHImageRequestOptions的deliveryMode，

<ul>
<li>设置为PHImageRequestOptionsDeliveryModeOpportunistic并且synchronous为NO时，请求可能会先返回一张缩略图，然后再返回一张大图，这个可以通过获取请求回调字典中PHImageResultIsDegradedKey对应value来判别</li>
<li>PHImageRequestOptionsDeliveryModeHighQualityFormat和PHImageRequestOptionsDeliveryModeFastFormat都返回一张图片，只不过前者返回的图片的质量高于或等于请求的质量，而后者可能返回一张质量稍低的图片</li>
</ul>
</li>
</ul>
</li>
<li>TBVAssetsLibrary

<ul>
<li>由于AssetsLibrary并没有提供获取特定尺寸的相片接口，所以这里只是返回thumbnail、aspectRatioThumbnail、fullScreenImage中尺寸和目标大小最接近的一张图片。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span>
</span><span class='line'>                         <span class="nf">targetSize:</span><span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nv">targetSize</span>
</span><span class='line'>                        <span class="nf">contentMode:</span><span class="p">(</span><span class="n">TBVAssetsPickerContentMode</span><span class="p">)</span><span class="nv">contentMode</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PHImageRequestID</span> <span class="n">requestId</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span>
</span><span class='line'>                                      <span class="nl">requestImageForAsset</span><span class="p">:(</span><span class="n">PHAsset</span> <span class="o">*</span><span class="p">)</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span>
</span><span class='line'>                                      <span class="nl">targetSize</span><span class="p">:</span><span class="n">targetSize</span>
</span><span class='line'>                                      <span class="nl">contentMode</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">contentModeForCustomContentMode</span><span class="p">:</span><span class="n">contentMode</span><span class="p">]</span>
</span><span class='line'>                                      <span class="nl">options</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span>
</span><span class='line'>                                      <span class="nl">resultHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">result</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="bp">NSDictionary</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                          <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">RACTuplePack</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">])];</span>
</span><span class='line'>                                          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">]</span> <span class="n">boolValue</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                                              <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>                                          <span class="p">}</span>
</span><span class='line'>                                      <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">RACDisposable</span> <span class="nl">disposableWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span> <span class="nl">cancelImageRequest</span><span class="p">:</span><span class="n">requestId</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">aAsset</span>
</span><span class='line'>                         <span class="nf">targetSize:</span><span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nv">targetSize</span>
</span><span class='line'>                        <span class="nf">contentMode:</span><span class="p">(</span><span class="n">TBVAssetsPickerContentMode</span><span class="p">)</span><span class="nv">contentMode</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[[</span><span class="n">RACSignal</span> <span class="k">return</span><span class="o">:</span><span class="n">aAsset</span><span class="p">.</span><span class="n">asset</span><span class="p">]</span>
</span><span class='line'>                <span class="nl">deliverOn</span><span class="p">:[</span><span class="n">RACScheduler</span> <span class="n">scheduler</span><span class="p">]]</span>
</span><span class='line'>                <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span> <span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGImageRef</span> <span class="n">resultImageRef</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">BOOL</span> <span class="n">degraded</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">targetSize</span><span class="p">.</span><span class="n">width</span> <span class="o">&lt;</span> <span class="n">CGImageGetWidth</span><span class="p">(</span><span class="n">asset</span><span class="p">.</span><span class="n">thumbnail</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="n">targetSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&lt;</span> <span class="n">CGImageGetHeight</span><span class="p">(</span><span class="n">asset</span><span class="p">.</span><span class="n">thumbnail</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// TBVAssetsPickerContentModeFill</span>
</span><span class='line'>            <span class="n">resultImageRef</span> <span class="o">=</span> <span class="n">asset</span><span class="p">.</span><span class="n">thumbnail</span><span class="p">;</span>
</span><span class='line'>            <span class="n">degraded</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">resultImageRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CGImageRef</span> <span class="n">aspectRatioThumbnail</span> <span class="o">=</span> <span class="n">asset</span><span class="p">.</span><span class="n">aspectRatioThumbnail</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">targetSize</span><span class="p">.</span><span class="n">width</span> <span class="o">&lt;</span> <span class="n">CGImageGetWidth</span><span class="p">(</span><span class="n">aspectRatioThumbnail</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="n">targetSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&lt;</span> <span class="n">CGImageGetHeight</span><span class="p">(</span><span class="n">aspectRatioThumbnail</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// TBVAssetsPickerContentModeFit</span>
</span><span class='line'>                <span class="n">resultImageRef</span> <span class="o">=</span> <span class="n">aspectRatioThumbnail</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">resultImageRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="bp">ALAssetRepresentation</span> <span class="o">*</span><span class="n">assetRepresentation</span> <span class="o">=</span> <span class="p">[</span><span class="n">asset</span> <span class="n">defaultRepresentation</span><span class="p">];</span>
</span><span class='line'>                <span class="n">resultImageRef</span> <span class="o">=</span> <span class="p">[</span><span class="n">assetRepresentation</span> <span class="n">fullScreenImage</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="bp">UIImage</span> <span class="o">*</span><span class="n">resultImage</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">resultImageRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">resultImage</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageWithCGImage</span><span class="p">:</span><span class="n">resultImageRef</span>
</span><span class='line'>                                              <span class="nl">scale</span><span class="p">:</span><span class="n">BQAP_SCREEN_SCALE</span>
</span><span class='line'>                                        <span class="nl">orientation</span><span class="p">:</span><span class="n">UIImageOrientationUp</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RACTuplePack</span><span class="p">(</span><span class="n">resultImage</span><span class="p">,</span> <span class="l">@(</span><span class="n">degraded</span><span class="l">)</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestPosterImageForCollection:mediaType:</h6>

<ul>
<li>TBVCachingImageManager

<ul>
<li>通过-fetchKeyAssetsInAssetCollection:options:获取相簿keyAssets，最多可以返回三个</li>
<li>最终还是通过requestPosterImageForAsset:获取缩略图</li>
<li>获取keyAssets前，需要设置options对资源进行过滤：</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">tbv_fetchOptionsWithCustomMediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">mediaTypes</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">tbv_mediaTypesWithCustonMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">mediaTypes</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PHFetchOptions</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PHFetchOptions</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">predicateString</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableString</span> <span class="n">string</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">mediaType</span> <span class="k">in</span> <span class="n">mediaTypes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">predicateString</span> <span class="nl">appendFormat</span><span class="p">:</span><span class="s">@&quot;mediaType = %@&quot;</span><span class="p">,</span> <span class="n">mediaType</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">mediaType</span> <span class="nl">isEqual</span><span class="p">:</span><span class="n">mediaTypes</span><span class="p">.</span><span class="n">lastObject</span><span class="p">])</span> <span class="p">[</span><span class="n">predicateString</span> <span class="nl">appendString</span><span class="p">:</span><span class="s">@&quot; || &quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">options</span><span class="p">.</span><span class="n">predicate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSPredicate</span> <span class="nl">predicateWithFormat</span><span class="p">:</span><span class="n">predicateString</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">options</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>TBVAssetsLibrary

<ul>
<li>ALAssetsGroup有posterImage属性，直接返回相簿缩略图</li>
<li>和PhotoKit不同，AssetLibrary通过ALAssetsGroup的setAssetsFilter方法进行过滤</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">group</span> <span class="nl">setAssetsFilter</span><span class="p">:[</span><span class="bp">ALAssetsFilter</span> <span class="nl">tbv_assetsFilterWithCustomMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样设置以后，后续针对group的操作都会在过滤的结果中进行了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestPosterImageForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                              <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PHFetchOptions</span> <span class="o">*</span><span class="n">fetchOptions</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHFetchOptions</span> <span class="nl">tbv_fetchOptionsWithCustomMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">];</span>
</span><span class='line'>        <span class="n">fetchOptions</span><span class="p">.</span><span class="n">sortDescriptors</span> <span class="o">=</span> <span class="l">@[</span><span class="p">[</span><span class="bp">NSSortDescriptor</span> <span class="nl">sortDescriptorWithKey</span><span class="p">:</span><span class="s">@&quot;creationDate&quot;</span>
</span><span class='line'>                                                                       <span class="nl">ascending</span><span class="p">:</span><span class="nb">YES</span><span class="p">]</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>        <span class="n">PHAssetCollection</span> <span class="o">*</span><span class="n">realCollection</span> <span class="o">=</span> <span class="p">(</span><span class="n">PHAssetCollection</span> <span class="o">*</span><span class="p">)</span><span class="n">collection</span><span class="p">.</span><span class="n">collection</span><span class="p">;</span>
</span><span class='line'>        <span class="cm">/* fetchKeyAssetsInAssetCollection 获取至多三张 */</span>
</span><span class='line'>        <span class="n">PHFetchResult</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHAsset</span> <span class="nl">fetchKeyAssetsInAssetCollection</span><span class="p">:</span><span class="n">realCollection</span>
</span><span class='line'>                                                                 <span class="nl">options</span><span class="p">:</span><span class="n">fetchOptions</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="n">RACSignal</span> <span class="n">empty</span><span class="p">]];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TBVAsset</span> <span class="o">*</span><span class="n">posterAsset</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVAsset</span> <span class="nl">assetWithOriginAsset</span><span class="p">:</span><span class="n">result</span><span class="p">.</span><span class="n">firstObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">requestPosterImageForAsset</span><span class="p">:</span><span class="n">posterAsset</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}]</span> <span class="n">switchToLatest</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAssetsForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                                <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">assets</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="n">group</span> <span class="o">=</span> <span class="p">(</span><span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="p">)</span><span class="n">collection</span><span class="p">.</span><span class="n">collection</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">group</span> <span class="nl">setAssetsFilter</span><span class="p">:[</span><span class="bp">ALAssetsFilter</span> <span class="nl">tbv_assetsFilterWithCustomMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">group</span> <span class="nl">enumerateAssetsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span><span class="n">result</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">index</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">assets</span> <span class="nl">addObject</span><span class="p">:[</span><span class="n">TBVAsset</span> <span class="nl">assetWithOriginAsset</span><span class="p">:</span><span class="n">result</span><span class="p">]];</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">assets</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestPosterImageForAsset:</h6>

<p>获取asset的缩略图，需要注意的一点就是：在获取缩略图的情况下，Fill比Fit获取的图片要清晰</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestPosterImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">CGSize</span> <span class="n">posterSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">kBQPosterImageWidth</span> <span class="o">*</span> <span class="n">BQAP_SCREEN_SCALE</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">kBQPosterImageHeight</span> <span class="o">*</span> <span class="n">BQAP_SCREEN_SCALE</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* 在获取缩略图的情况下，Fill比Fit获取的图片要清晰 */</span>
</span><span class='line'>        <span class="n">PHImageRequestID</span> <span class="n">requestId</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span>
</span><span class='line'>                                      <span class="nl">requestImageForAsset</span><span class="p">:(</span><span class="n">PHAsset</span> <span class="o">*</span><span class="p">)</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span>
</span><span class='line'>                                      <span class="nl">targetSize</span><span class="p">:</span><span class="n">posterSize</span>
</span><span class='line'>                                      <span class="nl">contentMode</span><span class="p">:</span><span class="n">PHImageContentModeAspectFill</span>
</span><span class='line'>                                      <span class="nl">options</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span>
</span><span class='line'>                                      <span class="nl">resultHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">result</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="bp">NSDictionary</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                          <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">RACTuplePack</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">])];</span>
</span><span class='line'>                                          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">]</span> <span class="n">boolValue</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                                              <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>                                          <span class="p">}</span>
</span><span class='line'>                                      <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">RACDisposable</span> <span class="nl">disposableWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span> <span class="nl">cancelImageRequest</span><span class="p">:</span><span class="n">requestId</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestPosterImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">CGSize</span> <span class="n">posterSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">kBQPosterImageWidth</span> <span class="o">*</span> <span class="n">BQAP_SCREEN_SCALE</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">kBQPosterImageHeight</span> <span class="o">*</span> <span class="n">BQAP_SCREEN_SCALE</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">requestImageForAsset</span><span class="p">:</span><span class="n">asset</span>
</span><span class='line'>                                             <span class="nl">targetSize</span><span class="p">:</span><span class="n">posterSize</span>
</span><span class='line'>                                            <span class="nl">contentMode</span><span class="p">:</span><span class="n">TBVAssetsPickerContentModeFill</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}]</span> <span class="n">switchToLatest</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestFullResolutionImageForAsset:</h6>

<p>获取原图时有一点很重要，就是尽量不要快速连续地获取原图，大图也可以列入这个范畴。连续地获取大图或者原图，设备的内存会急剧增高，甚至崩溃，这种情况通常在上传图片时比较常见。
所以在上传图片时，尽量上传一张原图后再获取下一张原图进行上传，而不是全部获取完成之后再上传。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestFullResolutionImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span><span class="p">.</span><span class="n">networkAccessAllowed</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="n">PHImageRequestID</span> <span class="n">requestId</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span>
</span><span class='line'>                                      <span class="nl">requestImageForAsset</span><span class="p">:(</span><span class="n">PHAsset</span> <span class="o">*</span><span class="p">)</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span>
</span><span class='line'>                                      <span class="nl">targetSize</span><span class="p">:</span><span class="n">PHImageManagerMaximumSize</span>
</span><span class='line'>                                      <span class="nl">contentMode</span><span class="p">:</span><span class="n">PHImageContentModeDefault</span>
</span><span class='line'>                                      <span class="nl">options</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span>
</span><span class='line'>                                      <span class="nl">resultHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">result</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="bp">NSDictionary</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                          <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">RACTuplePack</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">])];</span>
</span><span class='line'>                                          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">]</span> <span class="n">boolValue</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                                              <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>                                          <span class="p">}</span>
</span><span class='line'>                                      <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">RACDisposable</span> <span class="nl">disposableWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span> <span class="nl">cancelImageRequest</span><span class="p">:</span><span class="n">requestId</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestFullResolutionImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[[</span><span class="n">RACSignal</span> <span class="k">return</span><span class="o">:</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">deliverOn</span><span class="p">:[</span><span class="n">RACScheduler</span> <span class="n">scheduler</span><span class="p">]]</span>
</span><span class='line'>        <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span> <span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">ALAssetRepresentation</span> <span class="o">*</span><span class="n">assetRepresentation</span> <span class="o">=</span> <span class="p">[</span><span class="n">asset</span> <span class="n">defaultRepresentation</span><span class="p">];</span>
</span><span class='line'>            <span class="n">CGImageRef</span> <span class="n">fullResolutionImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">assetRepresentation</span> <span class="n">fullResolutionImage</span><span class="p">];</span>
</span><span class='line'>            <span class="bp">UIImage</span> <span class="o">*</span><span class="n">resultImage</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageWithCGImage</span><span class="p">:</span><span class="n">fullResolutionImage</span>
</span><span class='line'>                                                       <span class="nl">scale</span><span class="p">:</span><span class="n">BQAP_SCREEN_SCALE</span>
</span><span class='line'>                                                 <span class="nl">orientation</span><span class="p">:</span><span class="n">UIImageOrientationUp</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">RACTuplePack</span><span class="p">(</span><span class="n">resultImage</span><span class="p">,</span> <span class="l">@(</span><span class="nb">NO</span><span class="l">)</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestSizeForAssets:</h6>

<p>请求大小是针对的图片，所以对非图片的asset进行了过滤</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestSizeForAssets:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">&lt;</span><span class="n">TBVAsset</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nv">assets</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">RACSequence</span> <span class="o">*</span><span class="n">requestSequence</span> <span class="o">=</span> <span class="p">[[</span><span class="n">assets</span><span class="p">.</span><span class="n">rac_sequence</span>
</span><span class='line'>        <span class="nl">filter</span><span class="p">:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">((</span><span class="n">PHAsset</span> <span class="o">*</span><span class="p">)</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span><span class="p">).</span><span class="n">mediaType</span> <span class="o">==</span> <span class="n">PHAssetMediaTypeImage</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>        <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span><span class="p">.</span><span class="n">deliveryMode</span> <span class="o">=</span> <span class="n">PHImageRequestOptionsDeliveryModeHighQualityFormat</span><span class="p">;</span>
</span><span class='line'>                <span class="n">PHImageRequestID</span> <span class="n">requestId</span> <span class="o">=</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span>
</span><span class='line'>                                             <span class="nl">requestImageDataForAsset</span><span class="p">:(</span><span class="n">PHAsset</span> <span class="o">*</span><span class="p">)</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span>
</span><span class='line'>                                             <span class="nl">options</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span>
</span><span class='line'>                                             <span class="nl">resultHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">imageData</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="bp">NSString</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">dataUTI</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="n">UIImageOrientation</span> <span class="n">orientation</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="bp">NSDictionary</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                                 <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="l">@(</span><span class="n">imageData</span><span class="p">.</span><span class="n">length</span><span class="l">)</span><span class="p">];</span>
</span><span class='line'>                                                 <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>                                             <span class="p">}];</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">[</span><span class="n">RACDisposable</span> <span class="nl">disposableWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span> <span class="nl">cancelImageRequest</span><span class="p">:</span><span class="n">requestId</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}];</span>
</span><span class='line'>            <span class="p">}];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">RACSignal</span>
</span><span class='line'>        <span class="nl">zip</span><span class="p">:</span><span class="n">requestSequence</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">RACTuple</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">value</span><span class="p">.</span><span class="n">rac_sequence</span> <span class="nl">foldLeftWithStart</span><span class="p">:</span><span class="mi">@0</span> <span class="nl">reduce</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">accumulator</span><span class="p">,</span> <span class="kt">id</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="l">@(</span><span class="p">[</span><span class="n">accumulator</span> <span class="n">integerValue</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">value</span> <span class="n">integerValue</span><span class="p">]</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestSizeForAssets:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">&lt;</span><span class="n">TBVAsset</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nv">assets</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span>
</span><span class='line'>        <span class="k">return</span><span class="o">:</span><span class="p">[[[[</span><span class="n">assets</span><span class="p">.</span><span class="n">rac_sequence</span>
</span><span class='line'>            <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>               <span class="k">return</span> <span class="n">asset</span><span class="p">.</span><span class="n">asset</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}]</span>
</span><span class='line'>            <span class="nl">filter</span><span class="p">:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span><span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">[</span><span class="n">asset</span> <span class="nl">valueForProperty</span><span class="p">:</span><span class="n">ALAssetPropertyType</span><span class="p">]</span> <span class="o">==</span> <span class="n">ALAssetTypePhoto</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}]</span>
</span><span class='line'>            <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span><span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="l">@(</span><span class="p">[</span><span class="n">asset</span> <span class="n">defaultRepresentation</span><span class="p">].</span><span class="n">size</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}]</span>
</span><span class='line'>            <span class="nl">foldLeftWithStart</span><span class="p">:</span><span class="l">@(</span><span class="mi">0</span><span class="l">)</span> <span class="nl">reduce</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">accumulator</span><span class="p">,</span> <span class="kt">id</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="l">@(</span><span class="p">[</span><span class="n">accumulator</span> <span class="n">integerValue</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">value</span> <span class="n">integerValue</span><span class="p">]</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}]];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestAllCollections</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAllCollections</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PHFetchResult</span> <span class="o">*</span><span class="n">smartResult</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHAssetCollection</span>
</span><span class='line'>                                      <span class="nl">fetchAssetCollectionsWithType</span><span class="p">:</span><span class="n">PHAssetCollectionTypeSmartAlbum</span>
</span><span class='line'>                                      <span class="nl">subtype</span><span class="p">:</span><span class="n">PHAssetCollectionSubtypeAlbumRegular</span>
</span><span class='line'>                                      <span class="nl">options</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="n">PHFetchResult</span> <span class="o">*</span><span class="n">topLevelUserCollections</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHCollectionList</span> <span class="nl">fetchTopLevelUserCollectionsWithOptions</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">collections</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">PHAssetCollection</span> <span class="o">*</span><span class="n">aCollection</span> <span class="k">in</span> <span class="n">smartResult</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TBVCollection</span> <span class="o">*</span><span class="n">collection</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVCollection</span> <span class="nl">collectionWithOriginCollection</span><span class="p">:</span><span class="n">aCollection</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">collections</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">collection</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">PHAssetCollection</span> <span class="o">*</span><span class="n">aCollection</span> <span class="k">in</span> <span class="n">topLevelUserCollections</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TBVCollection</span> <span class="o">*</span><span class="n">collection</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVCollection</span> <span class="nl">collectionWithOriginCollection</span><span class="p">:</span><span class="n">aCollection</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">collections</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">collection</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">collections</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAllCollections</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">collections</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">assetsLibrary</span> <span class="nl">enumerateGroupsWithTypes</span><span class="p">:</span><span class="n">ALAssetsGroupAll</span>
</span><span class='line'>                                          <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="n">group</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">group</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">TBVCollection</span> <span class="o">*</span><span class="n">collection</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVCollection</span> <span class="nl">collectionWithOriginCollection</span><span class="p">:</span><span class="n">group</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">collections</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">collection</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">collections</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="nl">failureBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendError</span><span class="p">:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestAssetsForCollection:mediaType:</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAssetsForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                                <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PHFetchOptions</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHFetchOptions</span> <span class="nl">tbv_fetchOptionsWithCustomMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">];</span>
</span><span class='line'>        <span class="n">PHFetchResult</span> <span class="o">*</span><span class="n">fetchResult</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHAsset</span> <span class="nl">fetchAssetsInAssetCollection</span><span class="p">:(</span><span class="n">PHAssetCollection</span> <span class="o">*</span><span class="p">)</span><span class="n">collection</span><span class="p">.</span><span class="n">collection</span>
</span><span class='line'>                                                                   <span class="nl">options</span><span class="p">:</span><span class="n">options</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">assets</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="nl">arrayWithCapacity</span><span class="p">:</span><span class="n">fetchResult</span><span class="p">.</span><span class="n">count</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">PHAsset</span> <span class="o">*</span><span class="n">asset</span> <span class="k">in</span> <span class="n">fetchResult</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">assets</span> <span class="nl">addObject</span><span class="p">:[</span><span class="n">TBVAsset</span> <span class="nl">assetWithOriginAsset</span><span class="p">:</span><span class="n">asset</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">assets</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAssetsForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                                <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">assets</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="n">group</span> <span class="o">=</span> <span class="p">(</span><span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="p">)</span><span class="n">collection</span><span class="p">.</span><span class="n">collection</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">group</span> <span class="nl">setAssetsFilter</span><span class="p">:[</span><span class="bp">ALAssetsFilter</span> <span class="nl">tbv_assetsFilterWithCustomMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">group</span> <span class="nl">enumerateAssetsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span><span class="n">result</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">index</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">assets</span> <span class="nl">addObject</span><span class="p">:[</span><span class="n">TBVAsset</span> <span class="nl">assetWithOriginAsset</span><span class="p">:</span><span class="n">result</span><span class="p">]];</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">assets</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestCameraRollCollection</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestCameraRollCollection</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PHFetchResult</span> <span class="o">*</span><span class="n">smartAlbums</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHAssetCollection</span>
</span><span class='line'>                                      <span class="nl">fetchAssetCollectionsWithType</span><span class="p">:</span><span class="n">PHAssetCollectionTypeSmartAlbum</span>
</span><span class='line'>                                      <span class="nl">subtype</span><span class="p">:</span><span class="n">PHAssetCollectionSubtypeSmartAlbumUserLibrary</span>
</span><span class='line'>                                      <span class="nl">options</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="n">TBVCollection</span> <span class="nl">collectionWithOriginCollection</span><span class="p">:</span><span class="n">smartAlbums</span><span class="p">.</span><span class="n">firstObject</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestCameraRollCollection</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">assetsLibrary</span> <span class="nl">enumerateGroupsWithTypes</span><span class="p">:</span><span class="n">ALAssetsGroupSavedPhotos</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="n">group</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="n">TBVCollection</span> <span class="nl">collectionWithOriginCollection</span><span class="p">:</span><span class="n">group</span><span class="p">]];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="nl">failureBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendError</span><span class="p">:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestVideoForAsset:和-requestURLAssetForAsset:</h6>

<p>由于业务上没有视频的需求，所以这一块还没有去实现。</p>

<h3>实现过程中的一些小坑</h3>

<h6>用ALAssetsLibrary申请访问相册权限</h6>

<p>这一点貌似有些代码用authorizationStatus就能实现，不过
应用的时候还是发现不能触发请求权限alert，所以这里需要访问下相册的资源<a href="http://stackoverflow.com/questions/13572220/ask-permission-to-access-camera-roll">ask-permission-to-access-camera-roll</a>，
来触发这个请求动作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">tbv_forceTriggerPermissionAsking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">sendStatus</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="l">@(</span><span class="p">[</span><span class="nb">self</span> <span class="n">tbv_authorizationStatus</span><span class="p">]</span><span class="l">)</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="n">tbv_authorizationStatus</span><span class="p">]</span> <span class="o">!=</span> <span class="n">BQAuthorizationStatusNotDetermined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sendStatus</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="bp">ALAssetsLibrary</span> <span class="o">*</span><span class="n">lib</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">ALAssetsLibrary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">lib</span> <span class="nl">enumerateGroupsWithTypes</span><span class="p">:</span><span class="n">ALAssetsGroupSavedPhotos</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="n">group</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sendStatus</span><span class="p">();</span>
</span><span class='line'>            <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="nl">failureBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sendStatus</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}]</span> <span class="n">deliverOnMainThread</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>ALAssetsLibrary请求的ALAsset被置空问题</h6>

<p>官方文档里面有这么一句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">The</span> <span class="n">lifetimes</span> <span class="n">of</span> <span class="n">objects</span> <span class="n">you</span> <span class="n">get</span> <span class="n">back</span> <span class="n">from</span> <span class="n">a</span> <span class="n">library</span> <span class="n">instance</span> <span class="n">are</span> <span class="n">tied</span> <span class="n">to</span> <span class="n">the</span> <span class="n">lifetime</span> <span class="n">of</span> <span class="n">the</span> <span class="n">library</span> <span class="n">instance</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在使用ALAssetsLibrary请求回来的资源时，是不能释放对应的ALAssetsLibrary对象的。在发送多图的场合，如果不注意保持住ALAssetsLibrary对象，很容易发生后面几张图片获取不到的情况。</p>

<p>所以，要么在选择器返回选中的资源时，强引用对应的manager，要么这个manager由调用者传给相册选择器。</p>

<h6>更改应用权限并切回前台</h6>

<p>如果应用在后台时，更改了权限，当切回前台后，App会重新启动 。这里如果设置了断点，别以为是程序崩了。</p>

<h3>不足</h3>

<p>一个很明显的问题是使用了RAC的版本后，相册选择器滚动的性能会下降，没有以前通过回调来的顺畅。如果稍微快速一点滚动的话，CPU很容易就上100%。</p>

<p>可能是使用RAC的方式不是很正确造成的，后续尽可能优化这一块。</p>

<h2>2016-9-25补充</h2>

<p>关于grid界面卡顿的原因:<br>
因为这个界面的cell非常多，如果快速滚动时不对获取图片的信号进行throttle，那么CPU的占用率就会很高，从而界面就会变得卡顿。<br>
在这里设置throttle为0.05左右就可以使界面变得比较顺畅，并且不会有太大的刷新延迟以至于影响用户体验。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">RAC</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">contentImageView</span><span class="p">.</span><span class="n">image</span><span class="p">)</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">viewModel</span><span class="p">.</span><span class="n">contentImageSignal</span>
</span><span class='line'>        <span class="nl">throttle</span><span class="p">:</span><span class="mf">0.05</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">takeUntil</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">rac_prepareForReuseSignal</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">RACTuple</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">value</span> <span class="n">first</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识碎片六]]></title>
    <link href="http://triplecc.github.io/blog/2016-08-10-ioszhi-shi-sui-pian-liu/"/>
    <updated>2016-08-10T21:23:43+08:00</updated>
    <id>http://triplecc.github.io/blog/ioszhi-shi-sui-pian-liu</id>
    <content type="html"><![CDATA[<p>1、dispatch_after及NSTimer造成对象无法释放<br>
2、宏定义<code>##</code>与<code>#</code><br>
3、Swift实现原子属性<br>
4、Xcode图像化调试错误<br>
5、UITabBarController调用viewDidLoad的时机<br></p>

<!--more-->


<h2>dispatch_after及NSTimer造成对象无法释放</h2>

<p>dispatch_after：<br></p>

<ul>
<li>由于dispatch_after会持有block内的对象，所以会使这个对象延迟释放。使用时最好能确保block内的对象都是weak的，这样不容易出问题。</li>
</ul>


<p>NSTimer:</p>

<ul>
<li>NSTimer在手动停止或截止时间点到达前，是不会释放的。所以为了能让使用NSTimer的对象能够顺利释放自身，最好对NSTimer使用<strong>__weak</strong>关键字，并且在dealloc时，手动停止NSTimer。如下：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">__weak</span> <span class="bp">NSTimer</span> <span class="o">*</span><span class="n">_timer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">dealloc</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">_timer</span> <span class="n">invalidate</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>宏定义<code>##</code>与<code>#</code></h2>

<ul>
<li><code>##</code>链接符

<ul>
<li>将两个字串连接起来

<ul>
<li><p>“##”是一种分隔连接方式，它的作用是先分隔，然后进行强制连接。</p></li>
<li><p>预处理器一般把<code>空格</code>解释成分段标志，对于每一段和前面比较，相同的就被替换。这样做的结果是， 被替换段之间存在一些空格。如果我们不希望出现这些空格，就可以通过添加一些 ##来替代空格。</p></li>
<li><p>另外一些分隔标志是，包括操作符，比如 +, -, *, /, [,], …，</p></li>
<li><p>强制连接的作用是，去掉和前面的字符串之间的空格，而把两者连接起来</p></li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define A1(name, type) type name_##type##_type </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define A2(name, type) type name##_##type##_type</span>
</span><span class='line'>
</span><span class='line'><span class="n">A1</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span> <span class="cm">/* 等价于: int name_int_type; */</span>
</span><span class='line'>
</span><span class='line'><span class="n">A2</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span> <span class="cm">/* 等价于: int a1_int_type; */</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="p">)</span> <span class="err">在第一个宏定义中，”</span><span class="n">name</span><span class="err">”和第一个”</span><span class="n">_</span><span class="err">”之间，以及第</span><span class="mi">2</span><span class="err">个”</span><span class="n">_</span><span class="err">”和第二个</span>
</span><span class='line'>
</span><span class='line'> <span class="err">”</span><span class="n">type</span><span class="err">”之间没有被分隔，所以预处理器会把</span><span class="n">name_</span><span class="err">##</span><span class="n">type</span><span class="err">##</span><span class="n">_type</span><span class="err">解释成</span><span class="mi">3</span><span class="err">段：</span>
</span><span class='line'>
</span><span class='line'> <span class="err">“</span><span class="n">name_</span><span class="err">”、“</span><span class="n">type</span><span class="err">”、以及“</span><span class="n">_type</span><span class="err">”，这中间只有“</span><span class="n">type</span><span class="err">”是在宏前面出现过</span>
</span><span class='line'>
</span><span class='line'> <span class="err">的，所以它可以被宏替换。</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="p">)</span> <span class="err">而在第二个宏定义中，“</span><span class="n">name</span><span class="err">”和第一个“</span><span class="n">_</span><span class="err">”之间也被分隔了，所以</span>
</span><span class='line'>
</span><span class='line'> <span class="err">预处理器会把</span><span class="n">name</span><span class="err">##</span><span class="n">_</span><span class="err">##</span><span class="n">type</span><span class="err">##</span><span class="n">_type</span><span class="err">解释成</span><span class="mi">4</span><span class="err">段：“</span><span class="n">name</span><span class="err">”、“</span><span class="n">_</span><span class="err">”、“</span><span class="n">type</span><span class="err">”</span>
</span><span class='line'>
</span><span class='line'> <span class="err">以及“</span><span class="n">_type</span><span class="err">”，这其间，就有两个可以被宏替换了。</span>
</span><span class='line'>
</span><span class='line'><span class="mi">3</span><span class="p">)</span> <span class="n">A1</span><span class="err">和</span><span class="n">A2</span><span class="err">的定义也可以如下：</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define A1(name, type) type name_ ##type ##_type</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">##前面随意加上一些空格</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define A2(name, type) type name ##_ ##type ##_type</span>
</span><span class='line'>
</span><span class='line'><span class="err">结果是##</span> <span class="err">会把前面的空格去掉完成强连接，得到和上面结果相同的宏定义</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>#</code></p>

<ul>
<li>对这个变量替换后，添加双引号</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 在打印枚举名时很好用</span>
</span><span class='line'><span class="cp">#define BQ_PUSH_MESSAGE_TYPE_ELEMENT(key) @(key) : @#key</span>
</span><span class='line'>
</span><span class='line'><span class="n">BQPushMessageTypeStringsMap</span> <span class="o">=</span> <span class="l">@{</span>
</span><span class='line'>                                    <span class="n">BQ_PUSH_MESSAGE_TYPE_ELEMENT</span><span class="p">(</span><span class="n">BQPushMessageTypeChat</span><span class="p">),</span>
</span><span class='line'>                                    <span class="n">BQ_PUSH_MESSAGE_TYPE_ELEMENT</span><span class="p">(</span><span class="n">BQPushMessageTypeSystem</span><span class="p">),</span>
</span><span class='line'>                                    <span class="n">BQ_PUSH_MESSAGE_TYPE_ELEMENT</span><span class="p">(</span><span class="n">BQPushMessageTypeLive</span><span class="p">),</span>
</span><span class='line'>                                    <span class="l">}</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Swift实现原子属性</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="n">SafeForm</span> <span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">lock</span><span class="p">:</span> <span class="n">AnyObject</span><span class="o">!</span>
</span><span class='line'>     <span class="n">public</span> <span class="k">var</span> <span class="nl">value</span><span class="p">:</span> <span class="n">U</span>
</span><span class='line'>     <span class="n">public</span> <span class="k">var</span> <span class="nl">safeValue</span><span class="p">:</span> <span class="n">U</span> <span class="p">{</span>
</span><span class='line'>         <span class="kr">get</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">return</span> <span class="n">withLock</span> <span class="p">{</span>
</span><span class='line'>               <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="kr">set</span> <span class="p">{</span>
</span><span class='line'>             <span class="n">withLock</span> <span class="p">{</span>
</span><span class='line'>                 <span class="n">value</span> <span class="o">=</span> <span class="n">newValue</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="cm">/* 不可与safeValue混用 */</span>
</span><span class='line'>     <span class="n">public</span> <span class="k">func</span> <span class="n">sync_enter</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">objc_sync_enter</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="n">public</span> <span class="k">func</span> <span class="n">sync_exit</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">objc_sync_exit</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="n">private</span> <span class="k">func</span> <span class="n">withLock</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span><span class="p">(@</span><span class="n">noescape</span> <span class="nl">action</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">R</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">R</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">objc_sync_enter</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'>         <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">action</span><span class="p">()</span>
</span><span class='line'>         <span class="n">objc_sync_exit</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上感觉原子属性的作用并不是很明显，对一个多步操作，还是需要自己手动加锁。</p>

<h2>Xcode图像化调试错误</h2>

<p>报错：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">Assertion</span> <span class="n">failure</span> <span class="k">in</span> <span class="o">-</span><span class="p">[</span><span class="bp">UITextView</span> <span class="n">_firstBaselineOffsetFromTop</span><span class="p">],</span> <span class="o">/</span><span class="n">BuildRoot</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Caches</span><span class="o">/</span><span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">xbs</span><span class="o">/</span><span class="n">Sources</span><span class="o">/</span><span class="n">UIKit_Sim</span><span class="o">/</span><span class="n">UIKit</span><span class="o">-</span><span class="mf">3512.60.7</span><span class="o">/</span><span class="bp">UITextView</span><span class="p">.</span><span class="nl">m</span><span class="p">:</span><span class="mi">1683</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加以下代码即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">UITextView</span><span class="nl">(MYTextView)</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="bp">UITextView</span> <span class="nl">(MYTextView)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">_firstBaselineOffsetFromTop</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">_baselineOffsetFromBottom</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UITextView</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">_firstBaselineOffsetFromTop</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">_baselineOffsetFromBottom</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>UITabBarController调用viewDidLoad的时机</h2>

<p>继承UITabBarController后，从外部调用init创建，即使没有加载它的view，它也会调用viewDidLoad，这点和UIViewController不一样。 <br>
所以在使用Swift时，需要注意在UITableBarController中声明为!类型的属性，容易造成强制解包崩溃的问题。<br>
详细信息</p>

<ul>
<li><a href="http://www.andrewmonshizadeh.com/2015/02/23/uitabbarcontroller-is-different/">UITabBarController is Different</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
