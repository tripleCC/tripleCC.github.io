<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tripleCC的技术博客]]></title>
  <link href="http://triplecc.github.io/atom.xml" rel="self"/>
  <link href="http://triplecc.github.io/"/>
  <updated>2016-11-12T15:54:44+08:00</updated>
  <id>http://triplecc.github.io/</id>
  <author>
    <name><![CDATA[tripleCC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C使用范型实现map提示]]></title>
    <link href="http://triplecc.github.io/blog/2016-11-12-objective-cshi-yong-fan-xing-shi-xian-mapti-shi/"/>
    <updated>2016-11-12T14:45:35+08:00</updated>
    <id>http://triplecc.github.io/blog/objective-cshi-yong-fan-xing-shi-xian-mapti-shi</id>
    <content type="html"><![CDATA[<p>在当前项目的一些内容加工逻辑较多的界面，我会使用<code>ViewModel</code>来对<code>Model</code>进行一层包装，这样可以保持<code>Model</code>的纯净，也可以减少<code>Controller</code>中弱逻辑代码的堆叠。当然，部分公用内容也是可以通过给<code>Model</code>添加分类来实现的，<code>ViewModel</code>更多是提供特定页面的定制化内容。</p>

<p>由于项目并没有采用<code>MVVM</code>模式，也就没有引入<code>ReactiveCocoa</code>，所以项目里面比较多这样的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">&lt;</span><span class="n">TBVEmployee</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">employees</span> <span class="o">=</span> <span class="l">@[</span><span class="p">[</span><span class="n">TBVEmployee</span> <span class="n">new</span><span class="p">]</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">TBVEmployee</span> <span class="o">*</span><span class="n">employee</span> <span class="k">in</span> <span class="n">employees</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TBVEmployeeItemViewModel</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVEmployeeItemViewModel</span> <span class="nl">itemWithEmployee</span><span class="p">:</span><span class="n">employee</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">items</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码主要是为了将<code>Model</code> 转化成<code>ViewModel</code>。</p>

<!--more-->


<p>这里可以给<code>NSArray</code>增加一个<code>tbv_map</code>方法，让这段代码阅读起来更加函数式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">NSArray</span> <span class="nl">(SwiftOperation)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">tbv_map:</span><span class="p">(</span><span class="kt">id</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">id</span> <span class="n">value</span><span class="p">))</span><span class="nv">block</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="bp">NSArray</span> <span class="nl">(SwiftOperation)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">tbv_map:</span><span class="p">(</span><span class="kt">id</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">id</span><span class="p">))</span><span class="nv">block</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSCParameterAssert</span><span class="p">(</span><span class="n">block</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">element</span> <span class="k">in</span> <span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">temp</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">block</span><span class="p">(</span><span class="n">element</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加分类后，上面那段代码可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">employees</span> <span class="o">=</span> <span class="l">@[</span><span class="p">[</span><span class="n">TBVEmployee</span> <span class="n">new</span><span class="p">]</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">employees</span> <span class="nl">tbv_map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">TBVEmployeeItemViewModel</span> <span class="nl">itemWithEmployee</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>嗯！看起来清爽了不少。但是写多了之后会有一个小瑕疵：为了能<code>map</code> <code>NSArray</code>能容纳的所有类型，<code>block</code>的传参使用了<code>id</code>类型，当需要使用形参的个别属性时，我需要手动更改<code>id</code>为具体的类名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">employees</span> <span class="nl">tbv_map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">TBVEmployee</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;employee&#39;s name: %@&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">TBVEmployeeItemViewModel</span> <span class="nl">itemWithEmployee</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>有没有什么法子，能让<code>Xcode</code>的智能提示帮我直接预测到想要<code>map</code>的元素类型呢？</p>

<p>答案是<code>Objective-C</code>的范型。虽然<code>Objective-C</code>对于范型的支持还是比较弱的，但是处理当前的这个需求还是可以的。</p>

<p>先给<code>NSArray</code>分类添加范型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">NSArray</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">SwiftOperation</span><span class="p">)</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nl">tbv_map</span><span class="p">:(</span><span class="kt">id</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">T</span> <span class="n">value</span><span class="p">))</span><span class="n">block</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在使用时，指定需要<code>map</code>数组的元素类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">&lt;</span><span class="n">TBVEmployee</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="n">employees</span> <span class="o">=</span> <span class="l">@[</span><span class="p">[</span><span class="n">TBVEmployee</span> <span class="n">new</span><span class="p">]</span><span class="l">]</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后<code>Xcode</code>就会根据数组元素的类型，做出智能提示啦：</p>

<p><img src="./images/2016-11-12-3.26.30.png" alt="" /></p>

<p>以此还可以增加其它的操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">NSArray</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">SwiftOperation</span><span class="p">)</span>
</span><span class='line'><span class="cm">/** -&gt; swift map */</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nl">tbv_map</span><span class="p">:(</span><span class="kt">id</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">T</span> <span class="n">value</span><span class="p">))</span><span class="n">block</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** -&gt; swift filter */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">tbv_filter:</span><span class="p">(</span><span class="kt">BOOL</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">T</span> <span class="n">value</span><span class="p">))</span><span class="nv">block</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** -&gt; swift reduce */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">tbv_foldLeftWithStart:</span><span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="nv">start</span> <span class="nf">reduce:</span><span class="p">(</span><span class="n">T</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">T</span> <span class="n">result</span><span class="p">,</span> <span class="n">T</span> <span class="n">next</span><span class="p">))</span><span class="nv">reduce</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** -&gt; swift forEach */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tbv_forEach:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">T</span> <span class="n">value</span><span class="p">))</span><span class="nv">block</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里只添加了<code>NSArray</code>类型的操作，<code>NSDictionary</code>、<code>NSSet</code>这类集合类型也可以以此类推来实现。不过上面的方法只是做了一层简易的包装，并没有延迟计算啥的，只是让我写起来能更加开心、舒畅点吧。</p>

<p>突然好怀念在项目里面用<code>Reactive Extension</code>的日子啊＝＝，那感觉真是爽的不要不要的。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一次短暂的mac开发之旅]]></title>
    <link href="http://triplecc.github.io/blog/2016-10-22-yi-ci-duan-zan-de-mackai-fa-zhi-lu/"/>
    <updated>2016-10-22T22:43:37+08:00</updated>
    <id>http://triplecc.github.io/blog/yi-ci-duan-zan-de-mackai-fa-zhi-lu</id>
    <content type="html"><![CDATA[<p>回杭近一周，发现公司后台写的接口文档还是比较清晰的。特别是自己组负责的业务线，接口文档上的字段和实际返回的字段几乎没有差别。</p>

<p>询问了周围小伙伴如何写模型文件之后，发现无非三种方式：</p>

<ul>
<li>手写啦＝＝</li>
<li><code>Xcode8</code>以前的用<code>ESJsonFormat</code>插件，<code>Xcode8</code>以后手写</li>
<li>用<code>JSONExport</code>生成</li>
</ul>


<p>针对以上三种方式，我做了一个简短的分析：</p>

<ul>
<li>这个不用说了，耗时费力不讨好。量少好说，量大就比较蛋疼了。</li>
<li><code>xcode8</code>之后，第三方插件被禁止了。虽说有方法能让<code>xcode8</code>重新用上这个插件，但是即使用上了这个插件，还是需要自己写注释，并且生成模型需要后台返回的<code>json</code>。</li>
<li>和上一个方式一样，只是从插件编程了<code>mac</code>软件</li>
</ul>


<p>在打听完后，我随即产生了自己写一个转换工具的想法。</p>

<p>原因如下：</p>

<ul>
<li>后台文档已经写的比较清晰，可以从网页上把这些数据都爬下来，然后生成含有注释的模型</li>
<li>可以自动将<code>Vo</code>结尾的模型和属性，转成<code>Model</code>结尾的模型和属性，并且生成<code>YYModel</code>需要的映射关系</li>
<li>因为接口文档都处于一个统一的<code>baseURL</code>下，加上模型名称就是完整路径，所以可以很方便地进行批量处理</li>
<li>不需要测试后台发布的接口后，再通过获取接口返回的<code>json</code>生成模型；只要接口文档一发布就可以生成模型</li>
</ul>


<!--more-->


<p>然后我花了一个周末的时间，完成了一个简易的模型抓取生成工具。具体界面如下：<br></p>

<p><img src="http://triplecc.github.io/images/2016-10-30fetcher.png" alt="" /></p>

<p>输入浏览公司内部资料所需要的用户名和密码，并且输入自己需要的抓取的模型名，点击开始抓取，然后就等桌面上生成对应的模型文件了。当然，在界面上的预览窗口可以看到生成文件的内容，以及生成文件的保存地址。</p>

<p>话不多说，接下来记录下自己写这个<code>mac</code>工具的过程。</p>

<h3>确认要抓取的内容及条件</h3>

<p>首先摘一个接口的文档：<br></p>

<p><img src="http://triplecc.github.io/images/2016-10-30.png" alt="" /></p>

<p>总结两点：</p>

<ul>
<li>需要的数据有数字编号或者没有编号（也可以说从第二行开始＝＝）</li>
<li>需要的数据在表格的2、3、4行（对应1、2、3索引）</li>
</ul>


<p>接下来再看下需要抓取内容的HTML:<br></p>

<p><img src="http://triplecc.github.io/images/2016-10-30xpath.png" alt="" /></p>

<p>可以看到，拿到第一个标签为<code>table</code>、类名为<code>confluenceTable</code>的元素，然后再取第一个标签为<code>tbody</code>的元素即可获取所有需要的数据。</p>

<p>最后，查看接口需要在登录状态，所以得在<code>chrome</code>的开发者工具中获取登录请求的<code>URL</code>和参数。由于接口文档所在服务器搭在公司内网，所以并没有太过复杂的验证，还是比较方便的。</p>

<h3>确定使用的技术</h3>

<p>由于对<code>Python</code>不是很熟悉，所以还是先使用<code>swift</code>来写。选用的框架如下：</p>

<ul>
<li>RxSwift</li>
<li>Ji (HTML解析用)</li>
<li>Moya</li>
</ul>


<p>最后说下<code>mac</code>开发，我直接采用了<code>storyboard</code>的方式。主要是自己以前没有接触过<code>mac</code>开发，使用IB能降低难度和开发时间。</p>

<h3>实际开发过程</h3>

<p>数据获取解析和软件界面逻辑编写的时间占比大概在7-3左右。<br></p>

<h5>数据获取解析</h5>

<p> 通过<code>Moya</code>请求获取<code>HTML</code>就不说了，主要记录下如何使用<code>Ji</code>来解析<code>HTML</code>。</p>

<p> 获取第一个标签为<code>table</code>、类名为<code>confluenceTable</code>的元素代码如下：</p>

<p> ```swift
 extension TDFInterfaceFetcherHTMLParser  {
    var firstTableBody: [JiNode]? {
        return firstContentTable.flatMap{ $0.firstChildWithName(&ldquo;tbody&rdquo;)?.children }
    }</p>

<pre><code>private var firstContentTable: JiNode?{
    let lastTable = rootNode?
        .descendantsWithName("table")
        .filter{ $0.attributes["class"] == "confluenceTable" }
        .first
    return lastTable
}
</code></pre>

<p>}</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 
</span><span class='line'>- `descendantsWithName("table")`可以获取所有标签为`table`的元素
</span><span class='line'>- `JiNode`的`attributes`是标签所有属性的键值对，这里过滤掉`class`不是`confluenceTable`的`JiNode`
</span><span class='line'>- `JiNode`的`firstChildWithName("tbody").children`可以获取子节点中，第一个标签为`tbody`的元素的所有子节点。
</span><span class='line'>
</span><span class='line'>得到所有目标子节点后，再通过以下方法获取叶子节点：
</span></code></pre></td></tr></table></div></figure>


<p>swift
//1、是叶子节点，添加到数组
//2、不是叶子节点，遍历其所有子节点</p>

<p>extension JiNode {
    func allLeafNodes() -> [JiNode] {
        var leafNodes = <a href="">JiNode</a>
        if !hasChildren {
            leafNodes.append(self)
        } else {
            children.forEach {
                leafNodes.append(contentsOf: $0.allLeafNodes())
            }
        }
        return leafNodes
    }
}</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>接下来通过`JiNode`的`value`属性获取所有叶子节点对应元素的内容就好了：
</span></code></pre></td></tr></table></div></figure>


<p>swift
firstTableBody.map{ $0.allLeafNodes().flatMap{ $0.value } }</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>经过上面代码的处理，输出的数据如下：
</span></code></pre></td></tr></table></div></figure>


<p>[&ldquo;编号&rdquo;, &ldquo;参数名（中文）&rdquo;, &ldquo;参数名（英文）&rdquo;, &ldquo;类型&rdquo;, &ldquo;对应表&rdquo;, &ldquo;对应字段&rdquo;, &ldquo;备注&rdquo;]
[&ldquo;1&rdquo;, &ldquo;采购单ID&rdquo;, &ldquo;id&rdquo;, &ldquo;String&rdquo;, &ldquo;purchase_info&rdquo;, &ldquo;id&rdquo;, &ldquo;　&rdquo;]
[&ldquo;2&rdquo;, &ldquo;所属实体ID&rdquo;, &ldquo;entityId&rdquo;, &ldquo;String&rdquo;, &ldquo;purchase_info&rdquo;, &ldquo;entity_id&rdquo;, &ldquo;　&rdquo;]
[&ldquo;3&rdquo;, &ldquo;自实体ID&rdquo;, &ldquo;selfEntityId&rdquo;, &ldquo;String&rdquo;, &ldquo;purchase_info&rdquo;, &ldquo;self_entity_id&rdquo;, &ldquo;　&rdquo;]
[&ldquo;4&rdquo;, &ldquo;自实体名称&rdquo;, &ldquo;selfEntityName&rdquo;, &ldquo;String&rdquo;, &ldquo;　&rdquo;, &ldquo;　&rdquo;, &ldquo;　&rdquo;]
[&ldquo;5&rdquo;, &ldquo;供应商Id&rdquo;, &ldquo;supplyId&rdquo;, &ldquo;String&rdquo;, &ldquo;purchase_info&rdquo;, &ldquo;supply_id&rdquo;, &ldquo;　&rdquo;]
[&ldquo;6&rdquo;, &ldquo;供应商名称&rdquo;, &ldquo;supplyName&rdquo;, &ldquo;String&rdquo;, &ldquo;supply&rdquo;, &ldquo;name&rdquo;, &ldquo;　&rdquo;]
[&ldquo;7&rdquo;, &ldquo;仓库Id&rdquo;, &ldquo;warehouseId&rdquo;, &ldquo;String&rdquo;, &ldquo;purchase_info&rdquo;, &ldquo;warehouse_id&rdquo;, &ldquo;　&rdquo;]
[&ldquo;8&rdquo;, &ldquo;仓库名称&rdquo;, &ldquo;warehouseName&rdquo;, &ldquo;String&rdquo;, &ldquo;warehouse&rdquo;, &ldquo;name&rdquo;, &ldquo;　&rdquo;]
[&ldquo;9&rdquo;, &ldquo;单号&rdquo;, &ldquo;no&rdquo;, &ldquo;String&rdquo;, &ldquo;purchase_info&rdquo;, &ldquo;no&rdquo;, &ldquo;　&rdquo;]</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>OK！后面的事情就相对简单了，主要是结合`Objective-C`的语法以及自身采用的`JSON`转模型框架来对上面的数组进行加工。项目里采用的是YYModel，所以最终输出结果大致如下：
</span></code></pre></td></tr></table></div></figure>


<p>objc
//======================================  <br/>
// TDFPurchaseModel.h <br/>
//======================================</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>@interface TDFPurchaseModel : NSObject<br/>
/<strong> 采购单ID <em>/<br/>
@property (nonatomic, copy) NSString </em>id; <br/>
/</strong> 所属实体ID <em>/ <br/>
@property (nonatomic, copy) NSString </em>entityId;
/<strong> 自实体ID <em>/<br/>
@property (nonatomic, copy) NSString </em>selfEntityId;
/</strong> 自实体名称 <em>/<br/>
@property (nonatomic, copy) NSString </em>selfEntityName; <br/>
/<em><em> 供应商Id </em>/<br/>
@property (nonatomic, copy) NSString </em>supplyId;
&hellip;&hellip;</p>

<p>//======================================  <br/>
// TDFPurchaseModel.m <br/>
//======================================</p>

<h1>import &ldquo;TDFPurchaseModel.h&rdquo;</h1>

<p>@implementation TDFPurchaseModel  <br/>
+ (nullable NSDictionary<NSString *, id> *)modelCustomPropertyMapper {<br/>
    return @{ <br/>
        @&ldquo;purchaseDetails&rdquo; : @&ldquo;purchaseDetailsVo&rdquo; <br/>
    };<br/>
} <br/>
@end</p>

<p>```</p>

<h5>软件界面逻辑编写</h5>

<p><code>mac</code>界面的搭建，我主要参考了<code>JSONExport</code>。不过对于没有接触过<code>mac</code>开发的我来说，直接上手去拖拽控件还是出现了一些问题。</p>

<p>记忆最深的是在<code>mac</code>开发中，拖拽到<code>storyboard</code>中的控件，其内部可能内置多个子控件。当我直接以<code>iOS</code>开发在<code>storyboard</code>中拖拽控件的方式设置约束时，就会出现一些问题：</p>

<p><img src="http://triplecc.github.io/images/Snip20161030_1.png" alt="" /></p>

<p>这样的约束是针对内部的<code>NSTextView</code>设置的，当输入文本超过父控件时，依赖于<code>NSTextView</code>高度约束的控件会发生变化。所以应该像下面这样，在侧边栏设置：</p>

<p><img src="http://triplecc.github.io/images/Snip20161030_3.png" alt="" /></p>

<p>至于其它，由于只是搭了一个简单的界面，也不好说些啥。不过现在感觉做<code>iOS</code>开发的，上手<code>mac</code>开发还是相对容易一些。</p>

<p>最后挂下抓取结果图：</p>

<p><img src="http://triplecc.github.io/images/2016-10-30result.png" alt="" /></p>

<h3>总结</h3>

<p>写这个软件大概花了我一天半的时间，不过应该能给身边的小伙伴省下一些不必要的时间开销，还是挺高兴的。<br></p>

<p>感觉程序员还是要多思考，不过是对代码还是对业务流程。不能说以前的人这么写，或者这么做了，我就跟着这么做，而不加以思考这样的代码或者流程到底合不合理，是不是正确/最优的做法，否则很难跳出自己的舒适区域。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用RxSwift+Moya+ObjectMapper接入模型]]></title>
    <link href="http://triplecc.github.io/blog/2016-10-15-shi-yong-rxswift-plus-moya-plus-objectmapperjie-ru-mo-xing/"/>
    <updated>2016-10-15T11:40:37+08:00</updated>
    <id>http://triplecc.github.io/blog/shi-yong-rxswift-plus-moya-plus-objectmapperjie-ru-mo-xing</id>
    <content type="html"><![CDATA[<p>一般情况下，从业务方从API中请求JSON数据时，一般都会经过以下三步：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--------1------------2----------
</span><span class='line'>原始数据 -&gt; JSON/字典  -&gt; Model</span></code></pre></td></tr></table></div></figure>


<p>当然，大部分情况下，原始数据就是JSON，所以第一步基本上只是对接受数据的一个类型转换。一般在网络层中，由组件方提供1步骤，而业务方往往在网络组件的回调中提供步骤2。简单的转换逻辑明了了，接下来就可以试下用Moya实现步骤1，ObjectMapper实现步骤2。</p>

<p>在结合RxSwift+Moya+ObjectMapper三者之后，常规JSON数据的获取与解析变得更加精简。以近期编写的一个V2ex API为例，获取个人信息接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">fetchMemberInfo</span><span class="p">(</span><span class="n">_</span> <span class="nl">username</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="n">V2exAppContext</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">currentUsername</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">_</span> <span class="kt">id</span><span class="o">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">V2exMember</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">V2exProvider</span>
</span><span class='line'>        <span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">ShowMembers</span><span class="p">(</span><span class="nl">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="kt">id</span><span class="o">:</span> <span class="kt">id</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">mapObject</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>嗯，没错，最终的调用就是这么简单明了！<br></p>

<!--more-->


<p>那么，上述函数的内部是如何实现的呢？<br></p>

<p>首先说下Moya。Moya是针对网络的一层封装，并且Moya在较为后期的版本中，还提供了RxSwift以及ReactiveCocoa的接口。针对RxSwift，Moya提供了以下两个好用的扩展：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">open</span> <span class="k">func</span> <span class="n">request</span><span class="p">(</span><span class="n">_</span> <span class="nl">token</span><span class="p">:</span> <span class="n">Target</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">mapJSON</span><span class="p">(</span><span class="nl">failsOnEmptyData</span><span class="p">:</span> <span class="n">Bool</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Any</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>前者用来请求原始数据，后者则将原始数据转化成json。当然，Moya还提供了其他Rx扩展，比如<code>filterStatus</code>系列方法，这里就不展开了。</p>

<p>有了上面两个方法，业务方请求数据时，就可以这样调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">V2exProvider</span> <span class="o">=</span> <span class="n">RxMoyaProvider</span><span class="o">&lt;</span><span class="n">V2ex</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">V2exProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="n">request</span><span class="p">(.</span><span class="n">ShowMembers</span><span class="p">(</span><span class="nl">username</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="kt">id</span><span class="o">:</span> <span class="nb">nil</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">mapJSON</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面<code>json</code>即为解析完成的JSON数据流。<br>
得到JSON数据流之后，就可以执行步骤2了，这里选用的是ObjectMapper。ObjectMapper是一个Swift编写的模型<->JSON转换库，应用代码非常简单，只要模型遵守Mappable协议，并且实现对应的方法就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span> <span class="n">Map</span><span class="p">)</span>
</span><span class='line'><span class="kr">mutating</span> <span class="k">func</span> <span class="n">mapping</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span> <span class="n">Map</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在模型中设置对应属性的值，这里以V2ex的Member为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="nl">V2exMember</span><span class="p">:</span> <span class="n">Mappable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">status</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">url</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">username</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">website</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">twitter</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">psn</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">github</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">btc</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">location</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">tagline</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">bio</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">created</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">avatar</span><span class="p">:</span> <span class="n">V2exAvatar</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span> <span class="n">Map</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">mutating</span> <span class="k">func</span> <span class="n">mapping</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span> <span class="n">Map</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">status</span>      <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;status&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="kt">id</span>          <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">url</span>         <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;url&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">username</span>    <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;username&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">website</span>     <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;username&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">twitter</span>     <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;twitter&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">psn</span>         <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;psn&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">github</span>      <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;github&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">btc</span>         <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;btc&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">location</span>    <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;location&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">tagline</span>     <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;tagline&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">bio</span>         <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;bio&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">created</span>     <span class="o">&lt;-</span> <span class="n">map</span><span class="p">[</span><span class="s">&quot;created&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">avatar</span> <span class="o">=</span> <span class="n">V2exAvatar</span><span class="p">(</span><span class="nl">JSON</span><span class="p">:</span> <span class="n">map</span><span class="p">.</span><span class="n">JSON</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，对于struct类型的模型，这种转换方式还是很优雅的。生成模型的话，也只需要很简单的代码就可以完成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">Mapper</span><span class="o">&lt;</span><span class="n">V2exMember</span><span class="o">&gt;</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="nl">JSONObject</span><span class="p">:</span> <span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这里为止，步骤2也完成了，接下就可以将步骤1、2连接起来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">ObservableType</span> <span class="k">where</span> <span class="n">E</span> <span class="o">==</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">func</span> <span class="n">mapObject</span><span class="o">&lt;</span><span class="nl">T</span><span class="p">:</span> <span class="n">Mappable</span><span class="o">&gt;</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">RxSwift</span><span class="p">.</span><span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mapJSON</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">ConcurrentDispatchQueueScheduler</span><span class="p">(</span><span class="nl">globalConcurrentQueueQOS</span><span class="p">:</span> <span class="p">.</span><span class="n">background</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="nl">JSONObject</span><span class="p">:</span> <span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">flatMap</span><span class="p">{</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span> <span class="p">}</span> <span class="o">??</span>
</span><span class='line'>                    <span class="n">Observable</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="bp">NSError</span><span class="p">(</span><span class="nl">domain</span><span class="p">:</span> <span class="s">&quot;V2ex&quot;</span><span class="p">,</span>
</span><span class='line'>                                             <span class="nl">code</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                             <span class="nl">userInfo</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;Error&quot;</span> <span class="o">:</span> <span class="s">&quot;failed to map object&quot;</span><span class="p">]))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">func</span> <span class="n">mapObjectArray</span><span class="o">&lt;</span><span class="nl">T</span><span class="p">:</span> <span class="n">Mappable</span><span class="o">&gt;</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">RxSwift</span><span class="p">.</span><span class="n">Observable</span><span class="o">&lt;</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mapJSON</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">ConcurrentDispatchQueueScheduler</span><span class="p">(</span><span class="nl">globalConcurrentQueueQOS</span><span class="p">:</span> <span class="p">.</span><span class="n">background</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">array</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="p">[</span><span class="n">T</span><span class="p">]</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>                <span class="k">if</span> <span class="k">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">array</span> <span class="kt">as</span><span class="o">?</span> <span class="p">[</span><span class="n">Any</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">array</span><span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="nl">JSONObject</span><span class="p">:</span> <span class="err">$</span><span class="mi">0</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="bp">NSError</span><span class="p">(</span><span class="nl">domain</span><span class="p">:</span> <span class="s">&quot;V2ex&quot;</span><span class="p">,</span>
</span><span class='line'>                                                <span class="nl">code</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                                <span class="nl">userInfo</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;Error&quot;</span> <span class="o">:</span> <span class="s">&quot;failed to map object array&quot;</span><span class="p">]))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>mapObject</code>将原始数据转换成单个模型，而<code>mapObjectArray</code>将原始数据转换成模型数组。使用Rx.flatMap是为了方便抛出错误，终止正常数据流的流动。<br></p>

<p>总的来说，这三者结合后写出来的代码给人一种畅快淋漓的感觉。不过在很多项目中，从后台获取的JSON也许不会那么规范，或者说层次分明，这样一来，需要处理的情况就复杂多了，对于上面的Rx扩展能否保持这个精简的体量还待观察。</p>

<p>文中提到的代码可以在这里<a href="https://github.com/tobevoid/V2exLogin">这里</a>找到。</p>

<hr />

<h3>参考</h3>

<p><a href="https://github.com/Hearst-DD/ObjectMapper">ObjectMapper</a><br>
<a href="https://github.com/Moya/Moya">Moya</a><br>
<a href="http://blog.callmewhy.com/2015/11/01/moya-rxswift-argo-lets-go/">通过 Moya+RxSwift+Argo 完成网络请求</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveX中Using操作的应用]]></title>
    <link href="http://triplecc.github.io/blog/2016-10-06-rxswiftzhong-usingde-ying-yong/"/>
    <updated>2016-10-06T23:22:34+08:00</updated>
    <id>http://triplecc.github.io/blog/rxswiftzhong-usingde-ying-yong</id>
    <content type="html"><![CDATA[<p><code>create a disposable resource that has the same lifespan as the Observable</code>，即创建一个和Observable具有相同生命周期的disposable资源。<br>
这是ReactiveX对于Using的描述。</p>

<p><img src="http://triplecc.github.io/images/2016-10-06-using.png" alt="" /></p>

<p>可以看出，当一个ObserverA订阅Using返回的Observable时，Using会使用调用者传入的Resource工厂方法[resourceFactory]创建对应的资源，并且使用Observable工厂方法[observableFactory]创建ObserverA实际上想要订阅的Observable。当ObserverA终止时，对应的Resource也会被释放[dispose]。</p>

<!--more-->


<p>下面是一个简单的例子(以下的代码都基于RxSwift)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">MyDisposables</span><span class="p">:</span> <span class="n">Disposable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;dispose&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">Observable</span>
</span><span class='line'>    <span class="p">.</span><span class="n">using</span><span class="p">({</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">MyDisposables</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">MyDisposables</span><span class="p">()</span>
</span><span class='line'>    <span class="p">})</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="p">.</span><span class="n">interval</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nl">scheduler</span><span class="p">:</span> <span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">take</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码段对应的输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="n">dispose</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，当AnonymousObserver[匿名观察者]订阅using返回的Observable时，using内部创建了定期输出Int值的ObservableA，以及资源MyDisposables。在发送5个消息之后，ObservableA被终止，与此同时，MyDisposables资源被using释放。<br></p>

<p>理解起来还是比较简单的，但是在什么场景中会使用到这个操作呢？<br></p>

<hr />

<h3>监听Obervable</h3>

<p>先看下RxSwift官方Demo中的一段关于GitHub登陆的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">signingIn</span> <span class="o">=</span> <span class="n">ActivityIndicator</span><span class="p">()</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">signingIn</span> <span class="o">=</span> <span class="n">signingIn</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">usernameAndPassword</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">combineLatest</span><span class="p">(</span><span class="n">input</span><span class="p">.</span><span class="n">username</span><span class="p">,</span> <span class="n">input</span><span class="p">.</span><span class="n">password</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="err">$</span><span class="mi">1</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">signedIn</span> <span class="o">=</span> <span class="n">input</span><span class="p">.</span><span class="n">loginTaps</span><span class="p">.</span><span class="n">withLatestFrom</span><span class="p">(</span><span class="n">usernameAndPassword</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">API</span><span class="p">.</span><span class="n">signup</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">catchErrorJustReturn</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">trackActivity</span><span class="p">(</span><span class="n">signingIn</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatMapLatest</span> <span class="p">{</span> <span class="n">loggedIn</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="n">loggedIn</span> <span class="o">?</span> <span class="s">&quot;Mock: Signed in to GitHub.&quot;</span> <span class="o">:</span> <span class="s">&quot;Mock: Sign in to GitHub failed&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">wireframe</span><span class="p">.</span><span class="n">promptFor</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="nl">cancelAction</span><span class="p">:</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span> <span class="nl">actions</span><span class="p">:</span> <span class="p">[])</span>
</span><span class='line'>            <span class="c1">// propagate original value</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>                <span class="n">loggedIn</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">shareReplay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>signingIn是当前是否正在登陆Observable；signedIn是当前登陆动作Observable。<br>
signedIn体现的事件流如下:</p>

<ul>
<li>按下登陆按钮</li>
<li>使用当前用户名及密码进行登陆</li>
<li>展示登陆结果</li>
</ul>


<p>其中涉及到的Rx相关操作（<a href="http://rxmarbles.com">详细图示</a>）：</p>

<ul>
<li>combineLatest: 合并最后的username和password，形成一个新的Observable</li>
<li>withLatestFrom: 形成一个以loginTaps发送事件时间为采样时间点，发送usernameAndPassword内容的Observable</li>
</ul>


<hr />

<h3>困惑点</h3>

<p>接下来当时比较困扰我的一个点：这段代码是如何做到监听当前是否正在登陆的？<br>
其中涉及到记录开始登陆的操作如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="n">API</span><span class="p">.</span><span class="n">signup</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="nl">password</span><span class="p">:</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">catchErrorJustReturn</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">trackActivity</span><span class="p">(</span><span class="n">signingIn</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">extension</span> <span class="n">ObservableConvertibleType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">func</span> <span class="n">trackActivity</span><span class="p">(</span><span class="n">_</span> <span class="nl">activityIndicator</span><span class="p">:</span> <span class="n">ActivityIndicator</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">activityIndicator</span><span class="p">.</span><span class="n">trackActivityOfObservable</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重点关注<code>.trackActivity(signingIn)</code>这个调用。当时我的困惑是这样的：</p>

<ul>
<li><code>.trackActivity(signingIn)</code>是在<code>signup(username, password: password)</code>后调用的，也就是说登陆事件已经结束了，程序才开始监听登陆动作？（这个理解是错误的）</li>
</ul>


<p>上面的假设当然是错误的。那么，要想获得正确的结果，事件流应该是一个怎么样的执行顺序呢？<br>
最直白的想法应该就是下面三步：</p>

<ul>
<li>设置当前状态为正在执行登陆</li>
<li>执行登陆操作</li>
<li>设置当前状态为没有执行登陆</li>
</ul>


<p>那么问题来了。首先，<code>signup(username, password: password)</code>生成了登陆动作Observable，当有Observer订阅这个Observable时，Observable就会执行登陆操作，并发送对应的结果。这就造成了<code>.trackActivity(signingIn)</code> 不能直接返回上游传递过来的事件流，因为这样做的话，刚好切合了上面的那个假设。所以<code>.trackActivity(signingIn)</code>应该做到以下几件事情：</p>

<ul>
<li>A1、保留登陆动作ObservableA，返回自定义的一个ObservableB</li>
<li>A2、当外部Observer订阅ObservableB时，设置当前状态为正在执行登陆</li>
<li>A3、设置当前状态为正在执行登陆，然后让外部的Observer重新订阅到ObservableA</li>
<li>A4、登陆操作执行完毕后，设置当前状态为没有执行登陆</li>
</ul>


<hr />

<h3>解惑</h3>

<p>下面时signingIn所属类ActivityIndicator的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="nl">ActivityIndicator</span> <span class="p">:</span> <span class="n">DriverConvertibleType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">typealias</span> <span class="n">E</span> <span class="o">=</span> <span class="n">Bool</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="n">_lock</span> <span class="o">=</span> <span class="bp">NSRecursiveLock</span><span class="p">()</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="n">_variable</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_loading</span><span class="p">:</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">Bool</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_loading</span> <span class="o">=</span> <span class="n">_variable</span><span class="p">.</span><span class="n">asDriver</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">trackActivityOfObservable</span><span class="o">&lt;</span><span class="nl">O</span><span class="p">:</span> <span class="n">ObservableConvertibleType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">source</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">using</span><span class="p">({</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ActivityToken</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">increment</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ActivityToken</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">source</span><span class="p">.</span><span class="n">asObservable</span><span class="p">(),</span> <span class="nl">disposeAction</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">decrement</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span> <span class="p">{</span> <span class="n">t</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">t</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">func</span> <span class="n">increment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_lock</span><span class="p">.</span><span class="n">lock</span><span class="p">()</span>
</span><span class='line'>        <span class="n">_variable</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">_variable</span><span class="p">.</span><span class="n">value</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">_lock</span><span class="p">.</span><span class="n">unlock</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">func</span> <span class="n">decrement</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_lock</span><span class="p">.</span><span class="n">lock</span><span class="p">()</span>
</span><span class='line'>        <span class="n">_variable</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">_variable</span><span class="p">.</span><span class="n">value</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">_lock</span><span class="p">.</span><span class="n">unlock</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">public</span> <span class="k">func</span> <span class="n">asDriver</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Driver</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_loading</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先看下<code>_variable</code>对应的Variable类型。<br>
Variable实际上是BehaviorSubject的一层包装，不同的是它只暴露数据，不会被终止或者失败。<br>
BehaviorSubject会在订阅者订阅时，发送一个最近或初始数据，并且订阅者可以接收BehaviorSubject随后发送的所有数据。<br>
下面是一个Variable的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码段对应的输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在回过头来看下<code>_variable</code>、<code>_loading</code>这两个属性。<br>
<code>_loading</code>在ActivityIndicator的初始化方法中的赋值如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">_loading</span> <span class="o">=</span> <span class="n">_variable</span><span class="p">.</span><span class="n">asDriver</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>_variable</code>的初始值为0。所以这部分的逻辑很容易理解：<code>_loading</code>通过<code>_variable</code>发送的值是否大于0来判断当前是否在执行动作，并且通过increment、decrement方法来设置<code>_variable</code>发送的值（改变当前正在执行的动作数）。<br></p>

<p>重点还是在trackActivityOfObservable方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">fileprivate</span> <span class="k">func</span> <span class="n">trackActivityOfObservable</span><span class="o">&lt;</span><span class="nl">O</span><span class="p">:</span> <span class="n">ObservableConvertibleType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">source</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">using</span><span class="p">({</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ActivityToken</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">increment</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ActivityToken</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">source</span><span class="p">.</span><span class="n">asObservable</span><span class="p">(),</span> <span class="nl">disposeAction</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">decrement</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span> <span class="p">{</span> <span class="n">t</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中对应的resourceFactory：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ActivityToken</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">increment</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ActivityToken</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">source</span><span class="p">.</span><span class="n">asObservable</span><span class="p">(),</span> <span class="nl">disposeAction</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">decrement</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>observableFactory：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">{</span> <span class="n">t</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span><span class="p">.</span><span class="n">asObservable</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActivityToken的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">private</span> <span class="k">struct</span> <span class="n">ActivityToken</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">ObservableConvertibleType</span><span class="p">,</span> <span class="n">Disposable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_source</span><span class="p">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_dispose</span><span class="p">:</span> <span class="n">Cancelable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">disposeAction</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_source</span> <span class="o">=</span> <span class="n">source</span>
</span><span class='line'>        <span class="n">_dispose</span> <span class="o">=</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">disposeAction</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_dispose</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">asObservable</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_source</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，ActivityToken就是一个保存了当前需要监听的Observable的资源。<br>
当外部Observer订阅trackActivityOfObservable返回的ObservableB时，using调用resourceFactory做了以下操作：</p>

<ul>
<li>增加当前正在执行的动作数</li>
<li>使用ActivityToken保存需要监听的ObservableA，并且在ActivityToken释放时，恢复当前正在执行的动作数</li>
</ul>


<p>接下来在调用observableFactory时，using把在resourceFactory中保存的ObservableA重新暴露给Observer。<br>
通过这种方式，就能在ObservableA发送数据之前，执行额外的操作<code>self.increment()</code>，也就是上面<code>.trackActivity(signingIn)</code>应该做到的A2。并且因为using会在observableFactory返回的ObservableA终止时释放resourceFactory创建的资源，所以当ObservableA终止时，会执行<code>self.decrement</code>，也就是A4。<br>
嗯，目前为止，上面的疑惑算是解决了。<br>
总结一下，就是通过using操作hold主需要监听的Observable，然后在执行了想要的额外动作后，重新暴露Observable给外部的Observer。</p>

<hr />

<h3>using内部实现</h3>

<p>最后，研究下using的内部实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="k">func</span> <span class="n">using</span><span class="o">&lt;</span><span class="nl">R</span><span class="p">:</span> <span class="n">Disposable</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">resourceFactory</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">R</span><span class="p">,</span> <span class="nl">observableFactory</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">R</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Using</span><span class="p">(</span><span class="nl">resourceFactory</span><span class="p">:</span> <span class="n">resourceFactory</span><span class="p">,</span> <span class="nl">observableFactory</span><span class="p">:</span> <span class="n">observableFactory</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>using实际上返回的是一个Using类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Using</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="nl">ResourceType</span><span class="p">:</span> <span class="n">Disposable</span><span class="o">&gt;:</span> <span class="n">Producer</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">E</span> <span class="o">=</span> <span class="n">SourceType</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">ResourceFactory</span> <span class="o">=</span> <span class="p">()</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">ResourceType</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">ObservableFactory</span> <span class="o">=</span> <span class="p">(</span><span class="n">ResourceType</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fileprivate</span> <span class="k">let</span> <span class="nl">_resourceFactory</span><span class="p">:</span> <span class="n">ResourceFactory</span>
</span><span class='line'>    <span class="n">fileprivate</span> <span class="k">let</span> <span class="nl">_observableFactory</span><span class="p">:</span> <span class="n">ObservableFactory</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">resourceFactory</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">ResourceFactory</span><span class="p">,</span> <span class="nl">observableFactory</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">ObservableFactory</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_resourceFactory</span> <span class="o">=</span> <span class="n">resourceFactory</span>
</span><span class='line'>        <span class="n">_observableFactory</span> <span class="o">=</span> <span class="n">observableFactory</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">run</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">E</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">sink</span> <span class="o">=</span> <span class="n">UsingSink</span><span class="p">(</span><span class="nl">parent</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">observer</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sink</span><span class="p">.</span><span class="n">disposable</span> <span class="o">=</span> <span class="n">sink</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sink</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using为Producer的子类，并且重载了run方法。<br>
再看下Producer的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Producer</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">subscribe</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">Element</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">CurrentThreadScheduler</span><span class="p">.</span><span class="n">isScheduleRequired</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">run</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">CurrentThreadScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">.</span><span class="n">schedule</span><span class="p">(())</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">run</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">Element</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">abstractMethod</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Producer调用subscribe时，会调用子类的run，并传入当前的Oberver。回到Using的实现，Producer的run方法中创建了UsingSink实例，并调用它的run方法。那么来看下最关键的UsingSink：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">UsingSink</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="nl">ResourceType</span><span class="p">:</span> <span class="n">Disposable</span><span class="p">,</span> <span class="nl">O</span><span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Sink</span><span class="o">&lt;</span><span class="n">O</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">ObserverType</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">SourceType</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">Parent</span> <span class="o">=</span> <span class="n">Using</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="n">ResourceType</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">E</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_parent</span><span class="p">:</span> <span class="n">Parent</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">parent</span><span class="p">:</span> <span class="n">Parent</span><span class="p">,</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_parent</span> <span class="o">=</span> <span class="n">parent</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">observer</span><span class="p">:</span> <span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">run</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">disposable</span> <span class="o">=</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">try</span> <span class="n">_parent</span><span class="p">.</span><span class="n">_resourceFactory</span><span class="p">()</span>
</span><span class='line'>            <span class="n">disposable</span> <span class="o">=</span> <span class="n">resource</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">source</span> <span class="o">=</span> <span class="n">try</span> <span class="n">_parent</span><span class="p">.</span><span class="n">_observableFactory</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>                <span class="n">source</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nb">self</span><span class="p">),</span>
</span><span class='line'>                <span class="n">disposable</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="k">let</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Observable</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="n">error</span><span class="p">).</span><span class="n">subscribe</span><span class="p">(</span><span class="nb">self</span><span class="p">),</span>
</span><span class='line'>                <span class="n">disposable</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">on</span><span class="p">(</span><span class="n">_</span> <span class="nl">event</span><span class="p">:</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">event</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="k">let</span> <span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">forwardOn</span><span class="p">(.</span><span class="n">next</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>        <span class="k">case</span> <span class="k">let</span> <span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">forwardOn</span><span class="p">(.</span><span class="n">error</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
</span><span class='line'>            <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">completed</span><span class="p">:</span>
</span><span class='line'>            <span class="n">forwardOn</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>            <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在run方法中，UsingSink先是调用<code>_resourceFactory()</code>创建了资源resource，然后以resource为参数调用<code>_observableFactory()</code>来创建想要的Obervable。并且通过<code>Disposables.create(source.subscribe(self),disposable)</code>让resource的生命周期和Obervable一致。<br>
实际上UsingSink只是在run中做了两件特殊的事情：</p>

<ul>
<li>在让source订阅自身前，创建了resource（一般会在这里做额外的操作）</li>
<li>使用的source不是由上游给的，而是通过<code>_observableFactory</code>创建的（一般的操作比如map、flatMap等，都是由上游给的）</li>
</ul>


<hr />

<h3>参考</h3>

<p><a href="http://www.introtorx.com/Content/v1.0.10621.0/11_AdvancedErrorHandling.html#Using">.Net中关于Using的例子</a><br>
<a href="http://rxmarbles.com">Rx操作图示</a><br>
<a href="http://reactivex.io/documentation/operators/using.html">官方文档中对于using的说明</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于RxSwift中的DisposeBag]]></title>
    <link href="http://triplecc.github.io/blog/2016-10-03-guan-yu-rxswiftzhong-de-disposebag/"/>
    <updated>2016-10-03T16:08:31+08:00</updated>
    <id>http://triplecc.github.io/blog/guan-yu-rxswiftzhong-de-disposebag</id>
    <content type="html"><![CDATA[<p>在RxSwift中，订阅者都会返回一个Disposable（默认是Disposables），以便使用者可以在后续的操作中，取消此次订阅。<br>
使用者可以调用dispose方法来进行取消订阅：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">disposables</span> <span class="o">=</span> <span class="n">Observable</span>
</span><span class='line'>    <span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nl">scheduler</span><span class="p">:</span> <span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">subscribe</span> <span class="p">{</span> <span class="n">event</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="n">disposables</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于手动取消订阅后，对应的subscribe回调会不会调用，官方的手册是这么说的：</p>

<ul>
<li>当scheduler是串行调度器，并且使用者在此调度器上调用了dispose，那么回调就不会执行［MainScheduler是在主线程/UI线程的串行调度器］</li>
<li>其他情况都不能保证回调的执行与否［并行情况下，执行顺序无法保证］</li>
</ul>


<!--More-->


<p>所以官方并不推荐手动调用dispose，而是通过DisposeBag、takeUntil或者其他非手动调用dispose途径。
而且官方建议始终使用<code>.addDisposableTo(disposeBag)</code>来管理订阅，即使对于一般的订阅，这个操作是没有必要的。</p>

<p>关于DisposeBag，它的行为类似ARC，不过是由RxSwift进行管理的。它会在自身被销毁的时候，对添加到自身的Disposables手动调用dispose：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">private</span> <span class="k">func</span> <span class="nf">dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">oldDisposables</span> <span class="o">=</span> <span class="n">_dispose</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">disposable</span> <span class="k">in</span> <span class="n">oldDisposables</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">disposable</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">private</span> <span class="k">func</span> <span class="nf">_dispose</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Disposable</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_lock</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span> <span class="n">defer</span> <span class="p">{</span> <span class="n">_lock</span><span class="p">.</span><span class="n">unlock</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">disposables</span> <span class="o">=</span> <span class="n">_disposables</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_disposables</span><span class="p">.</span><span class="n">removeAll</span><span class="p">(</span><span class="nl">keepingCapacity</span><span class="p">:</span> <span class="nb">false</span><span class="p">)</span>
</span><span class='line'>    <span class="n">_isDisposed</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">disposables</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">deinit</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加Disposables：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="nf">insert</span><span class="p">(</span><span class="n">_</span> <span class="nl">disposable</span><span class="p">:</span> <span class="n">Disposable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_insert</span><span class="p">(</span><span class="n">disposable</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">private</span> <span class="k">func</span> <span class="nf">_insert</span><span class="p">(</span><span class="n">_</span> <span class="nl">disposable</span><span class="p">:</span> <span class="n">Disposable</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_lock</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span> <span class="n">defer</span> <span class="p">{</span> <span class="n">_lock</span><span class="p">.</span><span class="n">unlock</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">_isDisposed</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">disposable</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_disposables</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">disposable</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其内部用自旋锁处理多线程的安全问题。关于defer的OC版本，可以看<a href="http://blog.sunnyxx.com/2014/09/15/objc-attribute-cleanup/">objc-attribute-cleanup</a>。ReactiveCocoa里也是有相应的@onExit实现。<br>
要想DisposeBag中的所有Disposables执行dispose，只要赋一个新的值给disposeBag变量就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样一来，原先的订阅都会被取消掉。</p>

<p>ReactiveCocoa的列表应用中，常常会看到这样的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">RAC</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">contentImageView</span><span class="p">.</span><span class="n">image</span><span class="p">)</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">viewModel</span><span class="p">.</span><span class="n">contentImageSignal</span>
</span><span class='line'>    <span class="nl">throttle</span><span class="p">:</span><span class="mf">0.05</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">takeUntil</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">rac_prepareForReuseSignal</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">RACTuple</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">value</span> <span class="n">first</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示在cell复用时，取消对contentImageSignal的订阅。<br>
RxSwift就可以这样实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">disposeBag</span><span class="p">:</span> <span class="n">DisposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="n">viewModel</span><span class="p">.</span><span class="n">contentImage</span>
</span><span class='line'>    <span class="p">.</span><span class="n">throttle</span><span class="p">(</span><span class="mf">0.05</span><span class="p">,</span> <span class="nl">scheduler</span><span class="p">:</span> <span class="n">MainScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">bindTo</span><span class="p">(</span><span class="n">contentImageView</span><span class="p">.</span><span class="n">rx</span><span class="p">.</span><span class="n">image</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="kr">override</span> <span class="k">func</span> <span class="n">prepareForReuse</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">.</span><span class="n">prepareForReuse</span><span class="p">()</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">disposeBag</span> <span class="o">=</span> <span class="n">DisposeBag</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于cell有高复用性与重复性特点，所以关于响应式编程在cell中应用最好注意以下几点：</p>

<ul>
<li>cell复用时[prepareForReuse]需要取消原先的事务</li>
<li>为了避免因用户快速滑动界面，而产生大量创建事务与取消事务的动作，在cell刚进入可见区域时，不立刻执行事务</li>
<li>限制事务的并发数</li>
</ul>


<p>所以，一般一个界面中有非常多的cell时，对其中元素进行绑定最好加上throttle操作，以使界面更加流畅。</p>

<hr />

<h3>参考</h3>

<p><a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Warnings.md">Warnings</a><br>
<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md">GettingStarted</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxSwift实现初探]]></title>
    <link href="http://triplecc.github.io/blog/2016-10-01-rxswiftshi-xian-chu-tan/"/>
    <updated>2016-10-01T16:08:36+08:00</updated>
    <id>http://triplecc.github.io/blog/rxswiftshi-xian-chu-tan</id>
    <content type="html"><![CDATA[<p>和ReactiveCocoa的实现类似，RxSwift也是通过不停地订阅上游的Observable来实现数据的流动。<br>
Rx操作大体分为两种：</p>

<ul>
<li>创建: create、just、of、from等</li>
<li>处理: map、flatMap、do等</li>
</ul>


<p>接下来通过下面的操作来简单分析下代码执行过程：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="nl">onNext</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>




<!--More-->


<p>以下是执行过程中创建实例的过程:</p>

<ul>
<li>just操作创建Just实例（Just类是一个Observable）</li>
<li>map操作创建Map实例，Map实例保存了上游的Observable，这里是Just（Map类是一个Observable）</li>
<li>Map实例的subscribe操作创建了AnonymousObserver实例（AnonymousObserver是一个Observer）</li>
</ul>


<p>以下是执行Map实例执行subscribe后，代码的执行过程：</p>

<ul>
<li>AnonymousObserver通过Map实例的subscribeSafe方法订阅了Map实例</li>
<li>Map实例通过subscribe方法间接调用了自身的run方法</li>
<li>run方法创建了MapSink实例，MapSink保存了下游的Observer，即AnonymousObserver（MapSink是一个Observer）；同时run方法让MapSink订阅Map实例保存的上游Observable，即Just。</li>
<li>Just执行subscribe方法，在其中直接调用<code>observer.on(.next(_element))</code>向下游的Observer，即MapSink发送消息</li>
<li>MapSink接收到消息进行处理，然后向下游的Observer发送消息，即AnonymousObserver</li>
<li>AnonymousObserver执行最终处理</li>
</ul>


<p>上面就是Rx操作执行过程的全部内容，可以总结两点：</p>

<ul>
<li>创建操作的subscribe方法会直接向下游Observer发送消息</li>
<li>处理操作一般会创建两个实例，一个是Observable，一个是Observer。Observable用来保存上游Observable并且让下游Observer可以进行订阅，而Observer则用来保存下游的Observer以及订阅上游的Observable</li>
</ul>


<p>接下来结合代码分析下实现。<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">subscribe</span><span class="p">(</span><span class="nl">file</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="err">#</span><span class="n">file</span><span class="p">,</span> <span class="nl">line</span><span class="p">:</span> <span class="n">UInt</span> <span class="o">=</span> <span class="err">#</span><span class="n">line</span><span class="p">,</span> <span class="nl">function</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="err">#</span><span class="n">function</span><span class="p">,</span> <span class="nl">onNext</span><span class="p">:</span> <span class="p">((</span><span class="n">E</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">onError</span><span class="p">:</span> <span class="p">((</span><span class="n">Swift</span><span class="p">.</span><span class="n">Error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">onCompleted</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">onDisposed</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nl">disposable</span><span class="p">:</span> <span class="n">Disposable</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">disposed</span> <span class="o">=</span> <span class="n">onDisposed</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">disposable</span> <span class="o">=</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">disposed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">disposable</span> <span class="o">=</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 创建匿名Observer</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">observer</span> <span class="o">=</span> <span class="n">AnonymousObserver</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span> <span class="n">e</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">e</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 调用对应的回调函数</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="k">let</span> <span class="n">value</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">onNext</span><span class="o">?</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="k">let</span> <span class="n">e</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">onError</span> <span class="o">=</span> <span class="n">onError</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">onError</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">print</span><span class="p">(</span><span class="s">&quot;Received unhandled error: \(file):\(line):\(function) -&gt; \(e)&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">disposable</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">completed</span><span class="p">:</span>
</span><span class='line'>            <span class="n">onCompleted</span><span class="o">?</span><span class="p">()</span>
</span><span class='line'>            <span class="n">disposable</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">subscribeSafe</span><span class="p">(</span><span class="n">observer</span><span class="p">),</span>
</span><span class='line'>        <span class="n">disposable</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">subscribeSafe</span><span class="o">&lt;</span><span class="nl">O</span><span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">E</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 让observer订阅自身</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">asObservable</span><span class="p">().</span><span class="n">subscribe</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Observable可以调用subscribe方法来设置对应的回调。其内部实现是创建一个匿名的Observer，然后
让这个匿名Observer订阅Observable。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Producer</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">subscribe</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">Element</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 执行子类的run方法，在run方法中，一般会保存传入的Observer</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">CurrentThreadScheduler</span><span class="p">.</span><span class="n">isScheduleRequired</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">run</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">CurrentThreadScheduler</span><span class="p">.</span><span class="n">instance</span><span class="p">.</span><span class="n">schedule</span><span class="p">(())</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">run</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">Element</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">abstractMethod</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Producer是Just和Map的父类，同时也是一个Observable。通过调用subscribe方法来设置对应的Observer。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="n">ResultType</span><span class="o">&gt;:</span> <span class="n">Producer</span><span class="o">&lt;</span><span class="n">ResultType</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">Selector</span> <span class="o">=</span> <span class="p">(</span><span class="n">SourceType</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">ResultType</span>
</span><span class='line'>  <span class="c1">// 上游的Obervable</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_source</span><span class="p">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_selector</span><span class="p">:</span> <span class="n">Selector</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="o">&gt;</span><span class="p">,</span> <span class="nl">selector</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">Selector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_source</span> <span class="o">=</span> <span class="n">source</span>
</span><span class='line'>        <span class="n">_selector</span> <span class="o">=</span> <span class="n">selector</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if TRACE_RESOURCES</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">AtomicIncrement</span><span class="p">(</span><span class="o">&amp;</span><span class="n">numberOfMapOperators</span><span class="p">)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">composeMap</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">selector</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">ResultType</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">R</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">originalSelector</span> <span class="o">=</span> <span class="n">_selector</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="n">R</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">source</span><span class="p">:</span> <span class="n">_source</span><span class="p">,</span> <span class="nl">selector</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nl">s</span><span class="p">:</span> <span class="n">SourceType</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">R</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">let</span> <span class="nl">r</span><span class="p">:</span> <span class="n">ResultType</span> <span class="o">=</span> <span class="n">try</span> <span class="n">originalSelector</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">try</span> <span class="n">selector</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">run</span><span class="o">&lt;</span><span class="nl">O</span><span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">ResultType</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">sink</span> <span class="o">=</span> <span class="n">MapSink</span><span class="p">(</span><span class="nl">selector</span><span class="p">:</span> <span class="n">_selector</span><span class="p">,</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">observer</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sink</span><span class="p">.</span><span class="n">disposable</span> <span class="o">=</span> <span class="n">_source</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sink</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cp">#if TRACE_RESOURCES</span>
</span><span class='line'>    <span class="k">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">AtomicDecrement</span><span class="p">(</span><span class="o">&amp;</span><span class="n">numberOfMapOperators</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中的_source表示上游的Observable。run方法的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">run</span><span class="o">&lt;</span><span class="nl">O</span><span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">ResultType</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 创建Observer，并且保存下游的Observer</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">sink</span> <span class="o">=</span> <span class="n">MapSink</span><span class="p">(</span><span class="nl">selector</span><span class="p">:</span> <span class="n">_selector</span><span class="p">,</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 订阅上游的Observable</span>
</span><span class='line'>    <span class="n">sink</span><span class="p">.</span><span class="n">disposable</span> <span class="o">=</span> <span class="n">_source</span><span class="p">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">sink</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sink</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先是创建了MapSink，并保存了下游的Observer，然后让sink去订阅上游的Observable。</p>

<p>MapSink的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">MapSink</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="p">,</span> <span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Sink</span><span class="o">&lt;</span><span class="n">O</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">ObserverType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">Selector</span> <span class="o">=</span> <span class="p">(</span><span class="n">SourceType</span><span class="p">)</span> <span class="n">throws</span> <span class="o">-&gt;</span> <span class="n">ResultType</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">ResultType</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span>
</span><span class='line'>    <span class="k">typealias</span> <span class="n">Element</span> <span class="o">=</span> <span class="n">SourceType</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_selector</span><span class="p">:</span> <span class="n">Selector</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">selector</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="n">Selector</span><span class="p">,</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_selector</span> <span class="o">=</span> <span class="n">selector</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">observer</span><span class="p">:</span> <span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 这里由上游进行调用，Observable或者Observer都可以</span>
</span><span class='line'>  <span class="c1">// 不过在流的源头还是需要Observable手动调用_observer.on</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">on</span><span class="p">(</span><span class="n">_</span> <span class="nl">event</span><span class="p">:</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">SourceType</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">event</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="k">let</span> <span class="n">element</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">mappedElement</span> <span class="o">=</span> <span class="n">try</span> <span class="n">_selector</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'>                <span class="n">forwardOn</span><span class="p">(.</span><span class="n">next</span><span class="p">(</span><span class="n">mappedElement</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">catch</span> <span class="k">let</span> <span class="n">e</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">forwardOn</span><span class="p">(.</span><span class="n">error</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'>                <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="k">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">forwardOn</span><span class="p">(.</span><span class="n">error</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
</span><span class='line'>            <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">completed</span><span class="p">:</span>
</span><span class='line'>            <span class="n">forwardOn</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>            <span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MapSink继承自Sink，Sink的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Sink</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">SingleAssignmentDisposable</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 保存的下游Observer</span>
</span><span class='line'>    <span class="n">fileprivate</span> <span class="k">let</span> <span class="nl">_observer</span><span class="p">:</span> <span class="n">O</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#if TRACE_RESOURCES</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">AtomicIncrement</span><span class="p">(</span><span class="o">&amp;</span><span class="n">resourceCount</span><span class="p">)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>        <span class="n">_observer</span> <span class="o">=</span> <span class="n">observer</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">final</span> <span class="k">func</span> <span class="n">forwardOn</span><span class="p">(</span><span class="n">_</span> <span class="nl">event</span><span class="p">:</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">O</span><span class="p">.</span><span class="n">E</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">isDisposed</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 调用子类的on方法时，会调用Sink的forwardOn方法，从而把事件传递到下游的Observer</span>
</span><span class='line'>        <span class="n">_observer</span><span class="p">.</span><span class="n">on</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">final</span> <span class="k">func</span> <span class="n">forwarder</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">SinkForward</span><span class="o">&lt;</span><span class="n">O</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SinkForward</span><span class="p">(</span><span class="nl">forward</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">deinit</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#if TRACE_RESOURCES</span>
</span><span class='line'>       <span class="k">let</span> <span class="n">_</span> <span class="o">=</span>  <span class="n">AtomicDecrement</span><span class="p">(</span><span class="o">&amp;</span><span class="n">resourceCount</span><span class="p">)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦上游调用了Observer的on方法，Observer会调用保存的下游Observer的on方法，从而触发一个链式调用。</p>

<p>Just的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Just</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Producer</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">let</span> <span class="nl">_element</span><span class="p">:</span> <span class="n">Element</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">element</span><span class="p">:</span> <span class="n">Element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_element</span> <span class="o">=</span> <span class="n">element</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">subscribe</span><span class="o">&lt;</span><span class="nl">O</span> <span class="p">:</span> <span class="n">ObserverType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nl">observer</span><span class="p">:</span> <span class="n">O</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Disposable</span> <span class="k">where</span> <span class="n">O</span><span class="p">.</span><span class="n">E</span> <span class="o">==</span> <span class="n">Element</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">observer</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">next</span><span class="p">(</span><span class="n">_element</span><span class="p">))</span>
</span><span class='line'>        <span class="n">observer</span><span class="p">.</span><span class="n">on</span><span class="p">(.</span><span class="n">completed</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Disposables</span><span class="p">.</span><span class="n">create</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很明显，Just是流的源头，所以它直接重载了subscribe方法，通过主动调用Observer的on方法，让数据能向下游流动。</p>

<hr />

<h3>总结</h3>

<p>从just到subscribe，方法的调用方向大致如下：</p>

<p><img src="http://triplecc.github.io/images/Snip20161007_1.png" alt="" /></p>

<p>首先是通过<code>.</code>的方法调用，期间创建了各类Observable。<br>
直到外部调用了subscribe，即订阅了Observable，在(1)中创建的Observable开始依次调用subscribe，期间创建了各类Observer。<br>
最后subscribe到达源头，源头调用Observer的on方法，在(2)中创建的Observer开始依次调用on，最终把结果输出到subscribe回调中。</p>

<hr />

<h3>参考</h3>

<p><a href="http://tech.meituan.com/RACSignalSubscription.html">RACSignal的Subscription深入分析</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识碎片七]]></title>
    <link href="http://triplecc.github.io/blog/2016-09-24-ioszhi-shi-sui-pian-qi/"/>
    <updated>2016-09-24T10:43:37+08:00</updated>
    <id>http://triplecc.github.io/blog/ioszhi-shi-sui-pian-qi</id>
    <content type="html"><![CDATA[<p>1、Xcode8日志及Pod的Swift3.0问题</p>

<!--more-->


<h2>Xcode8日志及Pod的Swift3.0问题</h2>

<p>目前的Xcode8会打印多余的日志，需要进入对应scheme中的enviroment variables设置下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OS_ACTIVITY_MODE    disable</span></code></pre></td></tr></table></div></figure>


<p>如果设置了以上信息后，出现了真机调试不会打印日志的情况的话，去掉<code>disable</code>，保留<code>OS_ACTIVITY_MODE</code>。</p>

<p>Pod更新Swift三方库后编译，会出现转换语法的错误，需要在podfile中添加以下语句再更新：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post_install do |installer|
</span><span class='line'>    installer.pods_project.targets.each do |target|
</span><span class='line'>        target.build_configurations.each do |config|
</span><span class='line'>            config.build_settings['SWIFT_VERSION'] = '3.0'
</span><span class='line'>            config.build_settings['MACOSX_DEPLOYMENT_TARGET'] = '10.10'
</span><span class='line'>        end
</span><span class='line'>    end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>如果还想使用2.3的话：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post_install do |installer|
</span><span class='line'>  installer.pods_project.targets.each do |target|
</span><span class='line'>    target.build_configurations.each do |config|
</span><span class='line'>      config.build_settings['MACOSX_DEPLOYMENT_TARGET'] = '10.10'
</span><span class='line'>      #### IT IS IMPORTANT TO SET IT TO 2.3
</span><span class='line'>      config.build_settings['SWIFT_VERSION'] = '2.3' 
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用策略模式增强图片浏览器的扩展性]]></title>
    <link href="http://triplecc.github.io/blog/2016-09-15-li-yong-ce-lue-mo-shi-zeng-qiang-tu-pian-liu-lan-qi-de-kuo-zhan-xing/"/>
    <updated>2016-09-15T10:33:54+08:00</updated>
    <id>http://triplecc.github.io/blog/li-yong-ce-lue-mo-shi-zeng-qiang-tu-pian-liu-lan-qi-de-kuo-zhan-xing</id>
    <content type="html"><![CDATA[<p>说到图片浏览器，项目中比较常用的成熟框架有Objective-C版本的<a href="https://github.com/mwaterfall/MWPhotoBrowser">MWPhotoBrowser</a>，<a href="https://github.com/ideaismobile/IDMPhotoBrowser">IDMPhotoBrowser</a>或者Swift版本的<a href="https://github.com/suzuki-0000/SKPhotoBrowser">SKPhotoBrowser</a>。<br></p>

<p>从核心功能来看，MWPhotoBrowser，IDMPhotoBrowser这两个框架，都很好地实现了对本地资源、相册资源、网络资源的获取与显示。并且很好地封装了网络和相册的获取方式，在我看来，这是他的优势，但同时，高度的集成也催生了一些不足。<br></p>

<p>这样做的优势不言而喻，调用者只需要很少的几行代码，就可以集成一个图片浏览器框架，省时省力。以MWPhotoBrowser为例，在不设置额外属性的情况下，只需要下面两行代码就可以创建：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MWPhotoBrowser</span> <span class="o">*</span><span class="n">browser</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MWPhotoBrowser</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithPhotos</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">photos</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">browser</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用者只要关注如何提供MWPhotoBrowser所要展示资源就可以了，不需要做额外的操作，非常地简洁方便。<br></p>

<p>关于不足，由于MWPhotoBrowser内部实现了获取网络图片功能，在追求内部实现尽量精简的前提下，不可避免地要依赖加载图片的第三方库(SDWebImage)。如果原来项目并没有使用SDWebImage，而是用YYWebImage或者Kingfisher，那么使用MWPhotoBrowser便会引入冗余的框架，从而让项目额外增加了一种图片缓存机制，不利于内存以及磁盘使用率的优化。<br></p>

<p>对于相册资源的访问，MWPhotoBrowser内部也实现了通过PHAsset或者ALAsset获取相片的功能。不过一般来说，项目会有自己的一套相册选择器，进而会有相应的相册资源获取策略。所以以个人观点来看，如何获取相册资源，应该由使用者告知，而不是在框架内部自己实现一套，这样更加符合DRY。<br></p>

<p>接下来，我会针对上面的不足，实现一套兼容本地资源、相册资源、网络资源的简易图片选择器。<br>
本文章对应的所有代码在仓库<a href="https://github.com/tobevoid/TBVImageBrowser">TBVImageBrowser</a>中。</p>

<!--More-->


<h3>框架概览</h3>

<p>TBVImageBrowser的主要组成如下：<br>
<img src="http://triplecc.github.io/images/Snip20160915_3.png" alt="图一" /><br>
<img src="http://triplecc.github.io/images/Snip20160915_4.png" alt="图二" /><br></p>

<p>从图一可以看出，TBVImageBrowserView持有了一个遵守TBVImageProviderManagerProtocol的对象。根据此持有的策略管理对象，可以通过抽象策略接口TBVImageProviderProtocol访问对应的具体策略类：TBVWebImageProvider、TBVLocalImageProvider、TBVAssetImageProvider和自定义的Provider。<br></p>

<p>实际上具体的策略都可以由使用者实现，也就是说图一中的TBVWebImageProvider、TBVLocalImageProvider、TBVAssetImageProvider都可以去除，只要提供遵守策略接口TBVImageProviderProtocol的具体策略类就行了。一般来说，访问资源的策略由使用者提供，因为使用者知道自己实际的获取方式。<br></p>

<p>从图二中可以看出，TBVImageBrowserView持有的策略管理对象的内部组成。只要遵守TBVImageProviderManagerProtocol协议，都可以成为策略管理对象。</p>

<p>除了以上几个协议，我还抽出了TBVImageIdentifierProtocol、TBVImageElementProtocol以及TBVImageProgressPresenterProtocol协议。
TBVImageProviderIdentifierProtocol的声明如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">TBVImageIdentifierProtocol</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@required</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">identifier</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>identifier作为匹配Provider和资源类型的标志，是每个策略必须要实现的。<br>
TBVImageElementProtocol的声明如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">TBVImageElementProtocol</span> <span class="o">&lt;</span><span class="n">TBVImageIdentifierProtocol</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@required</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSObject</span> <span class="o">*</span><span class="n">resource</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">progress</span><span class="p">;</span>
</span><span class='line'><span class="k">@optional</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">options</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>TBVImageElementProtocol遵守了TBVImageProviderIdentifierProtocol协议，提供解析自身资源的Provider标志。resource用来存储实际需要获取的资源，progress则表示获取的进度。<br>
TBVImageProgressPresenterProtocol的声明如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">TBVImageProgressPresenterProtocol</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="n">presenter</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setPresenterProgress:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">progress</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于项目中可能有自己的一套loading progress控件，仅仅为了图片选择器而引入另一套控件是不划算的，所以BVImageBrowser的loading progress控件也让使用者来提供，尽量减少不必要依赖。</p>

<h3>TBVImageProviderManager</h3>

<p>TBVImageProviderManager帮助TBVImageBrowserView管理所有添加的策略，让TBVImageBrowserView得以关注其浏览业务本身，而不必掺杂获取资源的具体逻辑。<br></p>

<p>首先是添加删除策略接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addImageProvider:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">TBVImageProviderProtocol</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">provider</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSCParameterAssert</span><span class="p">(</span><span class="n">provider</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">provider</span><span class="p">.</span><span class="n">identifier</span><span class="p">,</span> <span class="s">@&quot;identifier of %@ can not be nil.&quot;</span><span class="p">,</span> <span class="n">provider</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TBVLogInfo</span><span class="p">(</span><span class="s">@&quot;add provider %@&quot;</span><span class="p">,</span> <span class="n">provider</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@synchronized</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">providerMap</span><span class="p">[</span><span class="n">provider</span><span class="p">.</span><span class="n">identifier</span><span class="p">]</span> <span class="o">=</span> <span class="n">provider</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">removeImageProvider:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">TBVImageProviderProtocol</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">provider</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">provider</span><span class="p">.</span><span class="n">identifier</span><span class="p">,</span> <span class="s">@&quot;identifier of %@ can not be nil.&quot;</span><span class="p">,</span> <span class="n">provider</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TBVLogInfo</span><span class="p">(</span><span class="s">@&quot;remove provider %@&quot;</span><span class="p">,</span> <span class="n">provider</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@synchronized</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">providerMap</span> <span class="nl">removeObjectForKey</span><span class="p">:</span><span class="n">provider</span><span class="p">.</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">providerMap</span><span class="p">.</span><span class="n">allKeys</span> <span class="nl">containsObject</span><span class="p">:</span><span class="n">provider</span><span class="p">.</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>TBVImageProviderManager中会声明一个providerMap字典，以策略的identifier作key，策略作为value。
接下来是获取资源的接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">imageSignalForElement:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">TBVImageElementProtocol</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">element</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">element</span><span class="p">.</span><span class="n">identifier</span><span class="p">,</span> <span class="s">@&quot;identifier of %@ can not be nil.&quot;</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">@</span><span class="n">weakify</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">@</span><span class="n">strongify</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>        <span class="n">TBVLogInfo</span><span class="p">(</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">image resource:</span><span class="se">\n\t</span><span class="s">%@;</span><span class="se">\n</span><span class="s">identifier:</span><span class="se">\n\t</span><span class="s">%@;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">element</span><span class="p">.</span><span class="n">resource</span><span class="p">,</span> <span class="n">element</span><span class="p">.</span><span class="n">identifier</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">providerMap</span><span class="p">.</span><span class="n">allKeys</span> <span class="nl">containsObject</span><span class="p">:</span><span class="n">element</span><span class="p">.</span><span class="n">identifier</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="nb">self</span><span class="p">.</span><span class="n">providerMap</span><span class="p">[</span><span class="n">element</span><span class="p">.</span><span class="n">identifier</span><span class="p">]</span>
</span><span class='line'>                    <span class="nl">imageSignalForElement</span><span class="p">:</span><span class="n">element</span>
</span><span class='line'>                    <span class="nl">progress</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">CGFloat</span> <span class="n">progress</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">element</span><span class="p">.</span><span class="n">progress</span> <span class="o">=</span> <span class="n">progress</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}]];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">userInfo</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'>            <span class="n">userInfo</span><span class="p">[</span><span class="n">kTBVImageBrowserErrorKey</span><span class="p">]</span> <span class="o">=</span>
</span><span class='line'>            <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;image provider with identifier %@ was not found&quot;</span><span class="p">,</span> <span class="n">element</span><span class="p">.</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendError</span><span class="p">:[</span><span class="bp">NSError</span> <span class="nl">errorWithDomain</span><span class="p">:</span><span class="s">@&quot;TBVImageProviderManager&quot;</span>
</span><span class='line'>                                                        <span class="nl">code</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>                                                    <span class="nl">userInfo</span><span class="p">:</span><span class="n">userInfo</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'>        <span class="n">switchToLatest</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">catch</span><span class="p">:</span><span class="o">^</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TBVLogError</span><span class="p">(</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">error domain: </span><span class="se">\n\t</span><span class="s">%@; </span><span class="se">\n</span><span class="s">error code: </span><span class="se">\n\t</span><span class="s">%ld; </span><span class="se">\n</span><span class="s">error info: </span><span class="se">\n\t</span><span class="s">%@;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">domain</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">code</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">userInfo</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="n">empty</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>TBVImageProviderManager根据element提供的identifier，去providerMap字典中查找匹配的策略，并调用策略接口，获取element的resource中存储的资源。</p>

<h3>载入自定义loading progress控件</h3>

<p>在加载一个loading progress控件时，我需要什么样的接口?<br>
首先是控件本身，TBVImageBrowserView需要使用者创建这个控件的实体给TBVImageBrowserView，而控件的具体属性则由调用者在创建控件时一并设置。然后因为是loading progress控件，理所当然地应该提供设置progress的接口。由这两个需求催生TBVImageProgressPresenterProtocol协议，来对使用者提供的loading progress控件进行限定。<br></p>

<p>有了满足要求的控件，如何在内部进行创建？TBVImageBrowserView需要使用者提供控件对应Class，然后在内部以以下方式进行添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupProgressPresenter:</span><span class="p">(</span><span class="kt">Class</span><span class="p">)</span><span class="nv">progressPresenter</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">progressView</span> <span class="o">||</span> <span class="o">!</span><span class="n">progressPresenter</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">progressPresenter</span> <span class="nl">conformsToProtocol</span><span class="p">:@</span><span class="n">protocol</span><span class="p">(</span><span class="n">TBVImageProgressPresenterProtocol</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">id</span> <span class="n">presenter</span> <span class="o">=</span> <span class="p">[</span><span class="n">progressPresenter</span> <span class="n">presenter</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">presenter</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">UIView</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">progressView</span> <span class="o">=</span> <span class="n">presenter</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">contentView</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">progressView</span><span class="p">];</span>
</span><span class='line'>            <span class="bp">CGSize</span> <span class="n">size</span> <span class="o">=</span> <span class="n">CGSizeEqualToSize</span><span class="p">(</span><span class="n">CGSizeZero</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">progressView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">)</span> <span class="o">?</span>
</span><span class='line'>                <span class="n">CGSizeMake</span><span class="p">(</span><span class="mf">40.0f</span><span class="p">,</span> <span class="mf">40.0f</span><span class="p">)</span> <span class="o">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">progressView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span> <span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">progressView</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">make</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="l">@(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="l">)</span><span class="p">);</span>
</span><span class='line'>                <span class="n">make</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="l">@(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="l">)</span><span class="p">);</span>
</span><span class='line'>                <span class="n">make</span><span class="p">.</span><span class="n">center</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">contentView</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TBVLogError</span><span class="p">(</span><span class="s">@&quot;progressPresenter should be subclass of UIView.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TBVLogError</span><span class="p">(</span><span class="s">@&quot;progressPresenter should comfirm TBVImageProgressPresenterProtocol.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，载入自定义的loading progress控件已经实现了。接下来以DACircularProgress控件为例，说明如何使用。<br>
首先，创建DALabeledCircularProgressView的分类，然后在分类中遵守TBVImageProgressPresenterProtocol协议，并实现其中的接口:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">DALabeledCircularProgressView</span> <span class="nl">(TBVImageProgressPresenter)</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">presenter</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DALabeledCircularProgressView</span> <span class="o">*</span><span class="n">progressView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">DALabeledCircularProgressView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">progressView</span><span class="p">.</span><span class="n">thicknessRatio</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">progressView</span><span class="p">.</span><span class="n">progressLabel</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">progressView</span><span class="p">.</span><span class="n">progressLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mi">12</span><span class="p">];</span>
</span><span class='line'>    <span class="n">progressView</span><span class="p">.</span><span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">progressView</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setPresenterProgress:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">progress</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">setProgress</span><span class="p">:</span><span class="n">progress</span> <span class="nl">animated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">progress</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">progress</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="n">TBVLogDebug</span><span class="p">(</span><span class="s">@&quot;load progress %f&quot;</span><span class="p">,</span> <span class="n">progress</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">progressLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%.02f&quot;</span><span class="p">,</span> <span class="n">progress</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且在初始化TBVImageBrowserView时，传入DALabeledCircularProgressView类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">_configuration</span><span class="p">.</span><span class="n">progressPresenterClass</span> <span class="o">=</span> <span class="p">[</span><span class="n">DALabeledCircularProgressView</span> <span class="k">class</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>TBVImageBrowser是在自己做IM发送相册图片时造的轮子，由于后期项目本身并没有使用SDWebImage，并且有一套自己访问相册的策略，所以MWPhotoBrowser并不是很符合自己的需求。<br></p>

<p>TBVImageBrowser遵循了一个原则：使用者应该知道自己如何得到资源，并向框架提供获取资源的方法，这样才能让框架具有更好的扩展性。<br>
详细的使用方法在<a href="https://github.com/tobevoid/TBVImageBrowser">仓库说明</a>中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AssetsLibrary和PhotoKit做一个简易的相片选择器]]></title>
    <link href="http://triplecc.github.io/blog/2016-09-10-shi-yong-assetslibraryhe-photokitzuo-%5B%3F%5D-ge-xiang-pian-xuan-ze-qi/"/>
    <updated>2016-09-10T21:25:36+08:00</updated>
    <id>http://triplecc.github.io/blog/shi-yong-assetslibraryhe-photokitzuo-[?]-ge-xiang-pian-xuan-ze-qi</id>
    <content type="html"><![CDATA[<p>iOS8之后，苹果推出了PhotoKit，让开发者在处理相册相关的业务时，可以更加得心应手。github上的开发者针对PhotoKit做了一层很优秀的封装<a href="https://github.com/chiunam/CTAssetsPickerController">CTAssetsPickerController</a>，如果只需要支持iOS8+，那么可定制程度非常高的<a href="https://github.com/chiunam/CTAssetsPickerController">CTAssetsPickerController</a>是个不错的选择。<br>
但是由于现有的业务还是需要支持iOS7，所以并不能完全舍弃使用<code>AssetsLibrary</code>的方式来访问相册。因此也就需要自己封装一套兼容iOS7的相册管理器。</p>

<p>本文涉及代码：<a href="https://github.com/tobevoid/TBVAssetsPicker">TBVAssetsPicker</a></p>

<!--more-->


<h3>统一asset以及collection</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> AssetsLibrary </th>
<th style="text-align:left;"> PhotoKit </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> ALAssetsGroup </td>
<td style="text-align:left;"> PHAssetCollection </td>
</tr>
<tr>
<td style="text-align:left;"> ALAsset </td>
<td style="text-align:left;"> PHAsset </td>
</tr>
<tr>
<td style="text-align:left;"> TBVAsset </td>
<td style="text-align:left;"> TBVCollection </td>
</tr>
</tbody>
</table>


<p>相片选择器最终需要向外部提供统一的标识相片的结构。同样，统一结构能让相片选择器更加优雅地实现内部逻辑。所以这里我声明了两个对应的类：<code>TBVAsset</code>、<code>TBVCollection</code>，并提供一些最基本的功能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">TBVAsset</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  PHAsset or ALAsset</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSObject</span>  <span class="o">*</span><span class="n">asset</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">assetWithOriginAsset:</span><span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 本地标识 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">assetLocalIdentifer</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 源照片尺寸 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nf">assetPixelSize</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">TBVCollection</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  ALAssetsGroup or PHAssetCollection</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSObject</span>  <span class="o">*</span><span class="n">collection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">collectionWithOriginCollection:</span><span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">aCollection</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 相簿名 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">collectionTitle</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 估算的相簿相片个数 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">collectionEstimatedAssetCount</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 精确的相簿相片个数 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">collectionAccurateAssetCountWithFetchOptions:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">filterOptions</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nf">collectionAccurateAssetCountWithMediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了这些最基本的功能，在实现相册选择器时，就可以方便地对资源进行操作了。<br>
其实对于这部分的兼容处理，主要就是对两个不同的库进行封装，使其呈现同样的外观，后续的几步大体也是围绕这个目标进行。</p>

<h3>封装manager</h3>

<p>由于是两个不同版本的库，并且AssetsLibrary已经在iOS9时被弃用，使用时会产生<code>deprecated</code>警告，所以我分别对<code>ALAssetsLibrary</code>和<code>PHCachingImageManager</code>进行了封装，然后通过统一的接口<code>TBVAssetsManagerProtocol</code>暴露其功能。</p>

<p>一般相册选择器具有如下页面及对应功能（UI展示）：</p>

<ul>
<li>首页

<ul>
<li>相簿名</li>
<li>相簿缩略图</li>
<li>相簿拥有相片数</li>
</ul>
</li>
<li>预览页

<ul>
<li>相片缩略图</li>
<li>选中相片大小</li>
</ul>
</li>
<li>浏览页

<ul>
<li>相片大图</li>
<li>选中相片大小</li>
</ul>
</li>
</ul>


<p>所以我提供的接口如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//====================================</span>
</span><span class='line'><span class="c1">//              image</span>
</span><span class='line'><span class="c1">//====================================</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** requestImage返回都是一个RACTuple，first是Image，second是是否为degraded */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求特定大小的图片 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span>
</span><span class='line'>                         <span class="nf">targetSize:</span><span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nv">targetSize</span>
</span><span class='line'>                        <span class="nf">contentMode:</span><span class="p">(</span><span class="n">TBVAssetsPickerContentMode</span><span class="p">)</span><span class="nv">contentMode</span><span class="p">;</span>
</span><span class='line'><span class="cm">/** 请求相簿缩略图 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestPosterImageForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                                     <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求相片缩略图 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestPosterImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求相片原图 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestFullResolutionImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//====================================</span>
</span><span class='line'><span class="c1">//              asset / collection</span>
</span><span class='line'><span class="c1">//====================================</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求相片资源大小 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestSizeForAssets:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">&lt;</span><span class="n">TBVAsset</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nv">assets</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求所有相簿 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAllCollections</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求所有相片资源 */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAssetsForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                                <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求相机胶卷相簿（针对一般业务首先进入相机胶卷的预览页） */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestCameraRollCollection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//====================================</span>
</span><span class='line'><span class="c1">//              video</span>
</span><span class='line'><span class="c1">//====================================</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求AVPlayerItem */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestVideoForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 请求AVURLAsset */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestURLAssetForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现以上接口，一般相册选择器的功能点就已经完成大半了。<br></p>

<h2>TBVAssetsPickerManager</h2>

<p>由于自定义的相册manager都遵守<code>TBVAssetsManagerProtocol</code>，<code>TBVAssetsPickerManager</code>
的实现就变得相对简单，没有一大串令人厌烦的<code>if-else</code>。当然<code>TBVAssetsPickerManager</code>本身也是遵守<code>TBVAssetsManagerProtocol</code>的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">TBVAssetsPickerManager</span><span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSObject</span><span class="o">&lt;</span><span class="n">TBVAssetsManagerProtocol</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">realManager</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">requestIdList</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">assign</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">photoKitAvailable</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark life cycle</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="n">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_photoKitAvailable</span> <span class="o">=</span> <span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;PHImageManager&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark TBVAssetsManagerProtocol</span>
</span><span class='line'><span class="p">....</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark getter setter</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="n">realManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_realManager</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">photoKitAvailable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_realManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBVCachingImageManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_realManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TBVAssetsLibrary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_realManager</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样<code>_realManager</code>拿到的就是当前版本最新的相册manager了。</p>

<h3>接口的实现</h3>

<p>其实接口文档描述的还是非常清晰的，所以这里只是罗列了下代码，并没有针对每一步做解释，因为这些基本的操作进去头文件看看就全明白了。</p>

<h6>- requestImageForAsset:targetSize:(CGSize)targetSize:contentMode:</h6>

<p>这个接口主要用来获取非原图。</p>

<ul>
<li>TBVCachingImageManager

<ul>
<li>关于PHImageRequestOptions的deliveryMode，

<ul>
<li>设置为PHImageRequestOptionsDeliveryModeOpportunistic并且synchronous为NO时，请求可能会先返回一张缩略图，然后再返回一张大图，这个可以通过获取请求回调字典中PHImageResultIsDegradedKey对应value来判别</li>
<li>PHImageRequestOptionsDeliveryModeHighQualityFormat和PHImageRequestOptionsDeliveryModeFastFormat都返回一张图片，只不过前者返回的图片的质量高于或等于请求的质量，而后者可能返回一张质量稍低的图片</li>
</ul>
</li>
</ul>
</li>
<li>TBVAssetsLibrary

<ul>
<li>由于AssetsLibrary并没有提供获取特定尺寸的相片接口，所以这里只是返回thumbnail、aspectRatioThumbnail、fullScreenImage中尺寸和目标大小最接近的一张图片。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span>
</span><span class='line'>                         <span class="nf">targetSize:</span><span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nv">targetSize</span>
</span><span class='line'>                        <span class="nf">contentMode:</span><span class="p">(</span><span class="n">TBVAssetsPickerContentMode</span><span class="p">)</span><span class="nv">contentMode</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PHImageRequestID</span> <span class="n">requestId</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span>
</span><span class='line'>                                      <span class="nl">requestImageForAsset</span><span class="p">:(</span><span class="n">PHAsset</span> <span class="o">*</span><span class="p">)</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span>
</span><span class='line'>                                      <span class="nl">targetSize</span><span class="p">:</span><span class="n">targetSize</span>
</span><span class='line'>                                      <span class="nl">contentMode</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">contentModeForCustomContentMode</span><span class="p">:</span><span class="n">contentMode</span><span class="p">]</span>
</span><span class='line'>                                      <span class="nl">options</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span>
</span><span class='line'>                                      <span class="nl">resultHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">result</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="bp">NSDictionary</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                          <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">RACTuplePack</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">])];</span>
</span><span class='line'>                                          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">]</span> <span class="n">boolValue</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                                              <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>                                          <span class="p">}</span>
</span><span class='line'>                                      <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">RACDisposable</span> <span class="nl">disposableWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span> <span class="nl">cancelImageRequest</span><span class="p">:</span><span class="n">requestId</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">aAsset</span>
</span><span class='line'>                         <span class="nf">targetSize:</span><span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nv">targetSize</span>
</span><span class='line'>                        <span class="nf">contentMode:</span><span class="p">(</span><span class="n">TBVAssetsPickerContentMode</span><span class="p">)</span><span class="nv">contentMode</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[[</span><span class="n">RACSignal</span> <span class="k">return</span><span class="o">:</span><span class="n">aAsset</span><span class="p">.</span><span class="n">asset</span><span class="p">]</span>
</span><span class='line'>                <span class="nl">deliverOn</span><span class="p">:[</span><span class="n">RACScheduler</span> <span class="n">scheduler</span><span class="p">]]</span>
</span><span class='line'>                <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span> <span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGImageRef</span> <span class="n">resultImageRef</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">BOOL</span> <span class="n">degraded</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">targetSize</span><span class="p">.</span><span class="n">width</span> <span class="o">&lt;</span> <span class="n">CGImageGetWidth</span><span class="p">(</span><span class="n">asset</span><span class="p">.</span><span class="n">thumbnail</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="n">targetSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&lt;</span> <span class="n">CGImageGetHeight</span><span class="p">(</span><span class="n">asset</span><span class="p">.</span><span class="n">thumbnail</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// TBVAssetsPickerContentModeFill</span>
</span><span class='line'>            <span class="n">resultImageRef</span> <span class="o">=</span> <span class="n">asset</span><span class="p">.</span><span class="n">thumbnail</span><span class="p">;</span>
</span><span class='line'>            <span class="n">degraded</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">resultImageRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CGImageRef</span> <span class="n">aspectRatioThumbnail</span> <span class="o">=</span> <span class="n">asset</span><span class="p">.</span><span class="n">aspectRatioThumbnail</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">targetSize</span><span class="p">.</span><span class="n">width</span> <span class="o">&lt;</span> <span class="n">CGImageGetWidth</span><span class="p">(</span><span class="n">aspectRatioThumbnail</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="n">targetSize</span><span class="p">.</span><span class="n">height</span> <span class="o">&lt;</span> <span class="n">CGImageGetHeight</span><span class="p">(</span><span class="n">aspectRatioThumbnail</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// TBVAssetsPickerContentModeFit</span>
</span><span class='line'>                <span class="n">resultImageRef</span> <span class="o">=</span> <span class="n">aspectRatioThumbnail</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">resultImageRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="bp">ALAssetRepresentation</span> <span class="o">*</span><span class="n">assetRepresentation</span> <span class="o">=</span> <span class="p">[</span><span class="n">asset</span> <span class="n">defaultRepresentation</span><span class="p">];</span>
</span><span class='line'>                <span class="n">resultImageRef</span> <span class="o">=</span> <span class="p">[</span><span class="n">assetRepresentation</span> <span class="n">fullScreenImage</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="bp">UIImage</span> <span class="o">*</span><span class="n">resultImage</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">resultImageRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">resultImage</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageWithCGImage</span><span class="p">:</span><span class="n">resultImageRef</span>
</span><span class='line'>                                              <span class="nl">scale</span><span class="p">:</span><span class="n">BQAP_SCREEN_SCALE</span>
</span><span class='line'>                                        <span class="nl">orientation</span><span class="p">:</span><span class="n">UIImageOrientationUp</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">RACTuplePack</span><span class="p">(</span><span class="n">resultImage</span><span class="p">,</span> <span class="l">@(</span><span class="n">degraded</span><span class="l">)</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestPosterImageForCollection:mediaType:</h6>

<ul>
<li>TBVCachingImageManager

<ul>
<li>通过-fetchKeyAssetsInAssetCollection:options:获取相簿keyAssets，最多可以返回三个</li>
<li>最终还是通过requestPosterImageForAsset:获取缩略图</li>
<li>获取keyAssets前，需要设置options对资源进行过滤：</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">tbv_fetchOptionsWithCustomMediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">mediaTypes</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">tbv_mediaTypesWithCustonMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">mediaTypes</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PHFetchOptions</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PHFetchOptions</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSMutableString</span> <span class="o">*</span><span class="n">predicateString</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableString</span> <span class="n">string</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">mediaType</span> <span class="k">in</span> <span class="n">mediaTypes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">predicateString</span> <span class="nl">appendFormat</span><span class="p">:</span><span class="s">@&quot;mediaType = %@&quot;</span><span class="p">,</span> <span class="n">mediaType</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">mediaType</span> <span class="nl">isEqual</span><span class="p">:</span><span class="n">mediaTypes</span><span class="p">.</span><span class="n">lastObject</span><span class="p">])</span> <span class="p">[</span><span class="n">predicateString</span> <span class="nl">appendString</span><span class="p">:</span><span class="s">@&quot; || &quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">options</span><span class="p">.</span><span class="n">predicate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSPredicate</span> <span class="nl">predicateWithFormat</span><span class="p">:</span><span class="n">predicateString</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">options</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>TBVAssetsLibrary

<ul>
<li>ALAssetsGroup有posterImage属性，直接返回相簿缩略图</li>
<li>和PhotoKit不同，AssetLibrary通过ALAssetsGroup的setAssetsFilter方法进行过滤</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">group</span> <span class="nl">setAssetsFilter</span><span class="p">:[</span><span class="bp">ALAssetsFilter</span> <span class="nl">tbv_assetsFilterWithCustomMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样设置以后，后续针对group的操作都会在过滤的结果中进行了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestPosterImageForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                              <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PHFetchOptions</span> <span class="o">*</span><span class="n">fetchOptions</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHFetchOptions</span> <span class="nl">tbv_fetchOptionsWithCustomMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">];</span>
</span><span class='line'>        <span class="n">fetchOptions</span><span class="p">.</span><span class="n">sortDescriptors</span> <span class="o">=</span> <span class="l">@[</span><span class="p">[</span><span class="bp">NSSortDescriptor</span> <span class="nl">sortDescriptorWithKey</span><span class="p">:</span><span class="s">@&quot;creationDate&quot;</span>
</span><span class='line'>                                                                       <span class="nl">ascending</span><span class="p">:</span><span class="nb">YES</span><span class="p">]</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>        <span class="n">PHAssetCollection</span> <span class="o">*</span><span class="n">realCollection</span> <span class="o">=</span> <span class="p">(</span><span class="n">PHAssetCollection</span> <span class="o">*</span><span class="p">)</span><span class="n">collection</span><span class="p">.</span><span class="n">collection</span><span class="p">;</span>
</span><span class='line'>        <span class="cm">/* fetchKeyAssetsInAssetCollection 获取至多三张 */</span>
</span><span class='line'>        <span class="n">PHFetchResult</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHAsset</span> <span class="nl">fetchKeyAssetsInAssetCollection</span><span class="p">:</span><span class="n">realCollection</span>
</span><span class='line'>                                                                 <span class="nl">options</span><span class="p">:</span><span class="n">fetchOptions</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="n">RACSignal</span> <span class="n">empty</span><span class="p">]];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TBVAsset</span> <span class="o">*</span><span class="n">posterAsset</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVAsset</span> <span class="nl">assetWithOriginAsset</span><span class="p">:</span><span class="n">result</span><span class="p">.</span><span class="n">firstObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">requestPosterImageForAsset</span><span class="p">:</span><span class="n">posterAsset</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}]</span> <span class="n">switchToLatest</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAssetsForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                                <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">assets</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="n">group</span> <span class="o">=</span> <span class="p">(</span><span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="p">)</span><span class="n">collection</span><span class="p">.</span><span class="n">collection</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">group</span> <span class="nl">setAssetsFilter</span><span class="p">:[</span><span class="bp">ALAssetsFilter</span> <span class="nl">tbv_assetsFilterWithCustomMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">group</span> <span class="nl">enumerateAssetsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span><span class="n">result</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">index</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">assets</span> <span class="nl">addObject</span><span class="p">:[</span><span class="n">TBVAsset</span> <span class="nl">assetWithOriginAsset</span><span class="p">:</span><span class="n">result</span><span class="p">]];</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">assets</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestPosterImageForAsset:</h6>

<p>获取asset的缩略图，需要注意的一点就是：在获取缩略图的情况下，Fill比Fit获取的图片要清晰</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestPosterImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">CGSize</span> <span class="n">posterSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">kBQPosterImageWidth</span> <span class="o">*</span> <span class="n">BQAP_SCREEN_SCALE</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">kBQPosterImageHeight</span> <span class="o">*</span> <span class="n">BQAP_SCREEN_SCALE</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* 在获取缩略图的情况下，Fill比Fit获取的图片要清晰 */</span>
</span><span class='line'>        <span class="n">PHImageRequestID</span> <span class="n">requestId</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span>
</span><span class='line'>                                      <span class="nl">requestImageForAsset</span><span class="p">:(</span><span class="n">PHAsset</span> <span class="o">*</span><span class="p">)</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span>
</span><span class='line'>                                      <span class="nl">targetSize</span><span class="p">:</span><span class="n">posterSize</span>
</span><span class='line'>                                      <span class="nl">contentMode</span><span class="p">:</span><span class="n">PHImageContentModeAspectFill</span>
</span><span class='line'>                                      <span class="nl">options</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span>
</span><span class='line'>                                      <span class="nl">resultHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">result</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="bp">NSDictionary</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                          <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">RACTuplePack</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">])];</span>
</span><span class='line'>                                          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">]</span> <span class="n">boolValue</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                                              <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>                                          <span class="p">}</span>
</span><span class='line'>                                      <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">RACDisposable</span> <span class="nl">disposableWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span> <span class="nl">cancelImageRequest</span><span class="p">:</span><span class="n">requestId</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestPosterImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">CGSize</span> <span class="n">posterSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">kBQPosterImageWidth</span> <span class="o">*</span> <span class="n">BQAP_SCREEN_SCALE</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">kBQPosterImageHeight</span> <span class="o">*</span> <span class="n">BQAP_SCREEN_SCALE</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">requestImageForAsset</span><span class="p">:</span><span class="n">asset</span>
</span><span class='line'>                                             <span class="nl">targetSize</span><span class="p">:</span><span class="n">posterSize</span>
</span><span class='line'>                                            <span class="nl">contentMode</span><span class="p">:</span><span class="n">TBVAssetsPickerContentModeFill</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}]</span> <span class="n">switchToLatest</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestFullResolutionImageForAsset:</h6>

<p>获取原图时有一点很重要，就是尽量不要快速连续地获取原图，大图也可以列入这个范畴。连续地获取大图或者原图，设备的内存会急剧增高，甚至崩溃，这种情况通常在上传图片时比较常见。
所以在上传图片时，尽量上传一张原图后再获取下一张原图进行上传，而不是全部获取完成之后再上传。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestFullResolutionImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span><span class="p">.</span><span class="n">networkAccessAllowed</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="n">PHImageRequestID</span> <span class="n">requestId</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span>
</span><span class='line'>                                      <span class="nl">requestImageForAsset</span><span class="p">:(</span><span class="n">PHAsset</span> <span class="o">*</span><span class="p">)</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span>
</span><span class='line'>                                      <span class="nl">targetSize</span><span class="p">:</span><span class="n">PHImageManagerMaximumSize</span>
</span><span class='line'>                                      <span class="nl">contentMode</span><span class="p">:</span><span class="n">PHImageContentModeDefault</span>
</span><span class='line'>                                      <span class="nl">options</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span>
</span><span class='line'>                                      <span class="nl">resultHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">result</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="bp">NSDictionary</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                          <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">RACTuplePack</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">])];</span>
</span><span class='line'>                                          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">info</span><span class="p">[</span><span class="n">PHImageResultIsDegradedKey</span><span class="p">]</span> <span class="n">boolValue</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                                              <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>                                          <span class="p">}</span>
</span><span class='line'>                                      <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">RACDisposable</span> <span class="nl">disposableWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span> <span class="nl">cancelImageRequest</span><span class="p">:</span><span class="n">requestId</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestFullResolutionImageForAsset:</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="p">)</span><span class="nv">asset</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[[</span><span class="n">RACSignal</span> <span class="k">return</span><span class="o">:</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">deliverOn</span><span class="p">:[</span><span class="n">RACScheduler</span> <span class="n">scheduler</span><span class="p">]]</span>
</span><span class='line'>        <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span> <span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">ALAssetRepresentation</span> <span class="o">*</span><span class="n">assetRepresentation</span> <span class="o">=</span> <span class="p">[</span><span class="n">asset</span> <span class="n">defaultRepresentation</span><span class="p">];</span>
</span><span class='line'>            <span class="n">CGImageRef</span> <span class="n">fullResolutionImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">assetRepresentation</span> <span class="n">fullResolutionImage</span><span class="p">];</span>
</span><span class='line'>            <span class="bp">UIImage</span> <span class="o">*</span><span class="n">resultImage</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span> <span class="nl">imageWithCGImage</span><span class="p">:</span><span class="n">fullResolutionImage</span>
</span><span class='line'>                                                       <span class="nl">scale</span><span class="p">:</span><span class="n">BQAP_SCREEN_SCALE</span>
</span><span class='line'>                                                 <span class="nl">orientation</span><span class="p">:</span><span class="n">UIImageOrientationUp</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">RACTuplePack</span><span class="p">(</span><span class="n">resultImage</span><span class="p">,</span> <span class="l">@(</span><span class="nb">NO</span><span class="l">)</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestSizeForAssets:</h6>

<p>请求大小是针对的图片，所以对非图片的asset进行了过滤</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestSizeForAssets:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">&lt;</span><span class="n">TBVAsset</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nv">assets</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">RACSequence</span> <span class="o">*</span><span class="n">requestSequence</span> <span class="o">=</span> <span class="p">[[</span><span class="n">assets</span><span class="p">.</span><span class="n">rac_sequence</span>
</span><span class='line'>        <span class="nl">filter</span><span class="p">:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">((</span><span class="n">PHAsset</span> <span class="o">*</span><span class="p">)</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span><span class="p">).</span><span class="n">mediaType</span> <span class="o">==</span> <span class="n">PHAssetMediaTypeImage</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>        <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span><span class="p">.</span><span class="n">deliveryMode</span> <span class="o">=</span> <span class="n">PHImageRequestOptionsDeliveryModeHighQualityFormat</span><span class="p">;</span>
</span><span class='line'>                <span class="n">PHImageRequestID</span> <span class="n">requestId</span> <span class="o">=</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span>
</span><span class='line'>                                             <span class="nl">requestImageDataForAsset</span><span class="p">:(</span><span class="n">PHAsset</span> <span class="o">*</span><span class="p">)</span><span class="n">asset</span><span class="p">.</span><span class="n">asset</span>
</span><span class='line'>                                             <span class="nl">options</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">defaultImageRequestOptions</span>
</span><span class='line'>                                             <span class="nl">resultHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">imageData</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="bp">NSString</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">dataUTI</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="n">UIImageOrientation</span> <span class="n">orientation</span><span class="p">,</span>
</span><span class='line'>                                                             <span class="bp">NSDictionary</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                                 <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="l">@(</span><span class="n">imageData</span><span class="p">.</span><span class="n">length</span><span class="l">)</span><span class="p">];</span>
</span><span class='line'>                                                 <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>                                             <span class="p">}];</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">[</span><span class="n">RACDisposable</span> <span class="nl">disposableWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageManager</span> <span class="nl">cancelImageRequest</span><span class="p">:</span><span class="n">requestId</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}];</span>
</span><span class='line'>            <span class="p">}];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">RACSignal</span>
</span><span class='line'>        <span class="nl">zip</span><span class="p">:</span><span class="n">requestSequence</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">RACTuple</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">value</span><span class="p">.</span><span class="n">rac_sequence</span> <span class="nl">foldLeftWithStart</span><span class="p">:</span><span class="mi">@0</span> <span class="nl">reduce</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">accumulator</span><span class="p">,</span> <span class="kt">id</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="l">@(</span><span class="p">[</span><span class="n">accumulator</span> <span class="n">integerValue</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">value</span> <span class="n">integerValue</span><span class="p">]</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestSizeForAssets:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">&lt;</span><span class="n">TBVAsset</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nv">assets</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span>
</span><span class='line'>        <span class="k">return</span><span class="o">:</span><span class="p">[[[[</span><span class="n">assets</span><span class="p">.</span><span class="n">rac_sequence</span>
</span><span class='line'>            <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">TBVAsset</span> <span class="o">*</span><span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>               <span class="k">return</span> <span class="n">asset</span><span class="p">.</span><span class="n">asset</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}]</span>
</span><span class='line'>            <span class="nl">filter</span><span class="p">:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span><span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">[</span><span class="n">asset</span> <span class="nl">valueForProperty</span><span class="p">:</span><span class="n">ALAssetPropertyType</span><span class="p">]</span> <span class="o">==</span> <span class="n">ALAssetTypePhoto</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}]</span>
</span><span class='line'>            <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span><span class="n">asset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="l">@(</span><span class="p">[</span><span class="n">asset</span> <span class="n">defaultRepresentation</span><span class="p">].</span><span class="n">size</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}]</span>
</span><span class='line'>            <span class="nl">foldLeftWithStart</span><span class="p">:</span><span class="l">@(</span><span class="mi">0</span><span class="l">)</span> <span class="nl">reduce</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">accumulator</span><span class="p">,</span> <span class="kt">id</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="l">@(</span><span class="p">[</span><span class="n">accumulator</span> <span class="n">integerValue</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">value</span> <span class="n">integerValue</span><span class="p">]</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}]];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestAllCollections</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAllCollections</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PHFetchResult</span> <span class="o">*</span><span class="n">smartResult</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHAssetCollection</span>
</span><span class='line'>                                      <span class="nl">fetchAssetCollectionsWithType</span><span class="p">:</span><span class="n">PHAssetCollectionTypeSmartAlbum</span>
</span><span class='line'>                                      <span class="nl">subtype</span><span class="p">:</span><span class="n">PHAssetCollectionSubtypeAlbumRegular</span>
</span><span class='line'>                                      <span class="nl">options</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="n">PHFetchResult</span> <span class="o">*</span><span class="n">topLevelUserCollections</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHCollectionList</span> <span class="nl">fetchTopLevelUserCollectionsWithOptions</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">collections</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">PHAssetCollection</span> <span class="o">*</span><span class="n">aCollection</span> <span class="k">in</span> <span class="n">smartResult</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TBVCollection</span> <span class="o">*</span><span class="n">collection</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVCollection</span> <span class="nl">collectionWithOriginCollection</span><span class="p">:</span><span class="n">aCollection</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">collections</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">collection</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">PHAssetCollection</span> <span class="o">*</span><span class="n">aCollection</span> <span class="k">in</span> <span class="n">topLevelUserCollections</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TBVCollection</span> <span class="o">*</span><span class="n">collection</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVCollection</span> <span class="nl">collectionWithOriginCollection</span><span class="p">:</span><span class="n">aCollection</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">collections</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">collection</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">collections</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAllCollections</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">collections</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">assetsLibrary</span> <span class="nl">enumerateGroupsWithTypes</span><span class="p">:</span><span class="n">ALAssetsGroupAll</span>
</span><span class='line'>                                          <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="n">group</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">group</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">TBVCollection</span> <span class="o">*</span><span class="n">collection</span> <span class="o">=</span> <span class="p">[</span><span class="n">TBVCollection</span> <span class="nl">collectionWithOriginCollection</span><span class="p">:</span><span class="n">group</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">collections</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">collection</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">collections</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="nl">failureBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendError</span><span class="p">:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestAssetsForCollection:mediaType:</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAssetsForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                                <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PHFetchOptions</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHFetchOptions</span> <span class="nl">tbv_fetchOptionsWithCustomMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">];</span>
</span><span class='line'>        <span class="n">PHFetchResult</span> <span class="o">*</span><span class="n">fetchResult</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHAsset</span> <span class="nl">fetchAssetsInAssetCollection</span><span class="p">:(</span><span class="n">PHAssetCollection</span> <span class="o">*</span><span class="p">)</span><span class="n">collection</span><span class="p">.</span><span class="n">collection</span>
</span><span class='line'>                                                                   <span class="nl">options</span><span class="p">:</span><span class="n">options</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">assets</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="nl">arrayWithCapacity</span><span class="p">:</span><span class="n">fetchResult</span><span class="p">.</span><span class="n">count</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">PHAsset</span> <span class="o">*</span><span class="n">asset</span> <span class="k">in</span> <span class="n">fetchResult</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">assets</span> <span class="nl">addObject</span><span class="p">:[</span><span class="n">TBVAsset</span> <span class="nl">assetWithOriginAsset</span><span class="p">:</span><span class="n">asset</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">assets</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestAssetsForCollection:</span><span class="p">(</span><span class="n">TBVCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">collection</span>
</span><span class='line'>                                <span class="nf">mediaType:</span><span class="p">(</span><span class="n">TBVAssetsPickerMediaType</span><span class="p">)</span><span class="nv">mediaType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">assets</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="n">group</span> <span class="o">=</span> <span class="p">(</span><span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="p">)</span><span class="n">collection</span><span class="p">.</span><span class="n">collection</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">group</span> <span class="nl">setAssetsFilter</span><span class="p">:[</span><span class="bp">ALAssetsFilter</span> <span class="nl">tbv_assetsFilterWithCustomMediaType</span><span class="p">:</span><span class="n">mediaType</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">group</span> <span class="nl">enumerateAssetsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">ALAsset</span> <span class="o">*</span><span class="n">result</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">index</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">assets</span> <span class="nl">addObject</span><span class="p">:[</span><span class="n">TBVAsset</span> <span class="nl">assetWithOriginAsset</span><span class="p">:</span><span class="n">result</span><span class="p">]];</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="n">assets</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestCameraRollCollection</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// TBVCachingImageManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestCameraRollCollection</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PHFetchResult</span> <span class="o">*</span><span class="n">smartAlbums</span> <span class="o">=</span> <span class="p">[</span><span class="n">PHAssetCollection</span>
</span><span class='line'>                                      <span class="nl">fetchAssetCollectionsWithType</span><span class="p">:</span><span class="n">PHAssetCollectionTypeSmartAlbum</span>
</span><span class='line'>                                      <span class="nl">subtype</span><span class="p">:</span><span class="n">PHAssetCollectionSubtypeSmartAlbumUserLibrary</span>
</span><span class='line'>                                      <span class="nl">options</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="n">TBVCollection</span> <span class="nl">collectionWithOriginCollection</span><span class="p">:</span><span class="n">smartAlbums</span><span class="p">.</span><span class="n">firstObject</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// TBVAssetsLibrary</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">requestCameraRollCollection</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">assetsLibrary</span> <span class="nl">enumerateGroupsWithTypes</span><span class="p">:</span><span class="n">ALAssetsGroupSavedPhotos</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="n">group</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:[</span><span class="n">TBVCollection</span> <span class="nl">collectionWithOriginCollection</span><span class="p">:</span><span class="n">group</span><span class="p">]];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="nl">failureBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendError</span><span class="p">:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>-requestVideoForAsset:和-requestURLAssetForAsset:</h6>

<p>由于业务上没有视频的需求，所以这一块还没有去实现。</p>

<h3>实现过程中的一些小坑</h3>

<h6>用ALAssetsLibrary申请访问相册权限</h6>

<p>这一点貌似有些代码用authorizationStatus就能实现，不过
应用的时候还是发现不能触发请求权限alert，所以这里需要访问下相册的资源<a href="http://stackoverflow.com/questions/13572220/ask-permission-to-access-camera-roll">ask-permission-to-access-camera-roll</a>，
来触发这个请求动作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">tbv_forceTriggerPermissionAsking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">RACSignal</span> <span class="nl">createSignal</span><span class="p">:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">sendStatus</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext</span><span class="p">:</span><span class="l">@(</span><span class="p">[</span><span class="nb">self</span> <span class="n">tbv_authorizationStatus</span><span class="p">]</span><span class="l">)</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="n">tbv_authorizationStatus</span><span class="p">]</span> <span class="o">!=</span> <span class="n">BQAuthorizationStatusNotDetermined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sendStatus</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="bp">ALAssetsLibrary</span> <span class="o">*</span><span class="n">lib</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">ALAssetsLibrary</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">lib</span> <span class="nl">enumerateGroupsWithTypes</span><span class="p">:</span><span class="n">ALAssetsGroupSavedPhotos</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">ALAssetsGroup</span> <span class="o">*</span><span class="n">group</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sendStatus</span><span class="p">();</span>
</span><span class='line'>            <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="nl">failureBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sendStatus</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}]</span> <span class="n">deliverOnMainThread</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>ALAssetsLibrary请求的ALAsset被置空问题</h6>

<p>官方文档里面有这么一句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">The</span> <span class="n">lifetimes</span> <span class="n">of</span> <span class="n">objects</span> <span class="n">you</span> <span class="n">get</span> <span class="n">back</span> <span class="n">from</span> <span class="n">a</span> <span class="n">library</span> <span class="n">instance</span> <span class="n">are</span> <span class="n">tied</span> <span class="n">to</span> <span class="n">the</span> <span class="n">lifetime</span> <span class="n">of</span> <span class="n">the</span> <span class="n">library</span> <span class="n">instance</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在使用ALAssetsLibrary请求回来的资源时，是不能释放对应的ALAssetsLibrary对象的。在发送多图的场合，如果不注意保持住ALAssetsLibrary对象，很容易发生后面几张图片获取不到的情况。</p>

<p>所以，要么在选择器返回选中的资源时，强引用对应的manager，要么这个manager由调用者传给相册选择器。</p>

<h6>更改应用权限并切回前台</h6>

<p>如果应用在后台时，更改了权限，当切回前台后，App会重新启动 。这里如果设置了断点，别以为是程序崩了。</p>

<h3>不足</h3>

<p>一个很明显的问题是使用了RAC的版本后，相册选择器滚动的性能会下降，没有以前通过回调来的顺畅。如果稍微快速一点滚动的话，CPU很容易就上100%。</p>

<p>可能是使用RAC的方式不是很正确造成的，后续尽可能优化这一块。</p>

<h2>2016-9-25补充</h2>

<p>关于grid界面卡顿的原因:<br>
因为这个界面的cell非常多，如果快速滚动时不对获取图片的信号进行throttle，那么CPU的占用率就会很高，从而界面就会变得卡顿。<br>
在这里设置throttle为0.05左右就可以使界面变得比较顺畅，并且不会有太大的刷新延迟以至于影响用户体验。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">RAC</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">contentImageView</span><span class="p">.</span><span class="n">image</span><span class="p">)</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">viewModel</span><span class="p">.</span><span class="n">contentImageSignal</span>
</span><span class='line'>        <span class="nl">throttle</span><span class="p">:</span><span class="mf">0.05</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">takeUntil</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">rac_prepareForReuseSignal</span><span class="p">]</span>
</span><span class='line'>        <span class="nl">map</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">RACTuple</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">value</span> <span class="n">first</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识碎片六]]></title>
    <link href="http://triplecc.github.io/blog/2016-08-10-ioszhi-shi-sui-pian-liu/"/>
    <updated>2016-08-10T21:23:43+08:00</updated>
    <id>http://triplecc.github.io/blog/ioszhi-shi-sui-pian-liu</id>
    <content type="html"><![CDATA[<p>1、dispatch_after及NSTimer造成对象无法释放<br>
2、宏定义<code>##</code>与<code>#</code><br>
3、Swift实现原子属性<br>
4、Xcode图像化调试错误<br>
5、UITabBarController调用viewDidLoad的时机<br></p>

<!--more-->


<h2>dispatch_after及NSTimer造成对象无法释放</h2>

<p>dispatch_after：<br></p>

<ul>
<li>由于dispatch_after会持有block内的对象，所以会使这个对象延迟释放。使用时最好能确保block内的对象都是weak的，这样不容易出问题。</li>
</ul>


<p>NSTimer:</p>

<ul>
<li>NSTimer在手动停止或截止时间点到达前，是不会释放的。所以为了能让使用NSTimer的对象能够顺利释放自身，最好对NSTimer使用<strong>__weak</strong>关键字，并且在dealloc时，手动停止NSTimer。如下：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">__weak</span> <span class="bp">NSTimer</span> <span class="o">*</span><span class="n">_timer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">dealloc</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">_timer</span> <span class="n">invalidate</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>宏定义<code>##</code>与<code>#</code></h2>

<ul>
<li><code>##</code>链接符

<ul>
<li>将两个字串连接起来

<ul>
<li><p>“##”是一种分隔连接方式，它的作用是先分隔，然后进行强制连接。</p></li>
<li><p>预处理器一般把<code>空格</code>解释成分段标志，对于每一段和前面比较，相同的就被替换。这样做的结果是， 被替换段之间存在一些空格。如果我们不希望出现这些空格，就可以通过添加一些 ##来替代空格。</p></li>
<li><p>另外一些分隔标志是，包括操作符，比如 +, -, *, /, [,], …，</p></li>
<li><p>强制连接的作用是，去掉和前面的字符串之间的空格，而把两者连接起来</p></li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define A1(name, type) type name_##type##_type </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define A2(name, type) type name##_##type##_type</span>
</span><span class='line'>
</span><span class='line'><span class="n">A1</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span> <span class="cm">/* 等价于: int name_int_type; */</span>
</span><span class='line'>
</span><span class='line'><span class="n">A2</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span> <span class="cm">/* 等价于: int a1_int_type; */</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="p">)</span> <span class="err">在第一个宏定义中，”</span><span class="n">name</span><span class="err">”和第一个”</span><span class="n">_</span><span class="err">”之间，以及第</span><span class="mi">2</span><span class="err">个”</span><span class="n">_</span><span class="err">”和第二个</span>
</span><span class='line'>
</span><span class='line'> <span class="err">”</span><span class="n">type</span><span class="err">”之间没有被分隔，所以预处理器会把</span><span class="n">name_</span><span class="err">##</span><span class="n">type</span><span class="err">##</span><span class="n">_type</span><span class="err">解释成</span><span class="mi">3</span><span class="err">段：</span>
</span><span class='line'>
</span><span class='line'> <span class="err">“</span><span class="n">name_</span><span class="err">”、“</span><span class="n">type</span><span class="err">”、以及“</span><span class="n">_type</span><span class="err">”，这中间只有“</span><span class="n">type</span><span class="err">”是在宏前面出现过</span>
</span><span class='line'>
</span><span class='line'> <span class="err">的，所以它可以被宏替换。</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="p">)</span> <span class="err">而在第二个宏定义中，“</span><span class="n">name</span><span class="err">”和第一个“</span><span class="n">_</span><span class="err">”之间也被分隔了，所以</span>
</span><span class='line'>
</span><span class='line'> <span class="err">预处理器会把</span><span class="n">name</span><span class="err">##</span><span class="n">_</span><span class="err">##</span><span class="n">type</span><span class="err">##</span><span class="n">_type</span><span class="err">解释成</span><span class="mi">4</span><span class="err">段：“</span><span class="n">name</span><span class="err">”、“</span><span class="n">_</span><span class="err">”、“</span><span class="n">type</span><span class="err">”</span>
</span><span class='line'>
</span><span class='line'> <span class="err">以及“</span><span class="n">_type</span><span class="err">”，这其间，就有两个可以被宏替换了。</span>
</span><span class='line'>
</span><span class='line'><span class="mi">3</span><span class="p">)</span> <span class="n">A1</span><span class="err">和</span><span class="n">A2</span><span class="err">的定义也可以如下：</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define A1(name, type) type name_ ##type ##_type</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">##前面随意加上一些空格</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define A2(name, type) type name ##_ ##type ##_type</span>
</span><span class='line'>
</span><span class='line'><span class="err">结果是##</span> <span class="err">会把前面的空格去掉完成强连接，得到和上面结果相同的宏定义</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>#</code></p>

<ul>
<li>对这个变量替换后，添加双引号</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 在打印枚举名时很好用</span>
</span><span class='line'><span class="cp">#define BQ_PUSH_MESSAGE_TYPE_ELEMENT(key) @(key) : @#key</span>
</span><span class='line'>
</span><span class='line'><span class="n">BQPushMessageTypeStringsMap</span> <span class="o">=</span> <span class="l">@{</span>
</span><span class='line'>                                    <span class="n">BQ_PUSH_MESSAGE_TYPE_ELEMENT</span><span class="p">(</span><span class="n">BQPushMessageTypeChat</span><span class="p">),</span>
</span><span class='line'>                                    <span class="n">BQ_PUSH_MESSAGE_TYPE_ELEMENT</span><span class="p">(</span><span class="n">BQPushMessageTypeSystem</span><span class="p">),</span>
</span><span class='line'>                                    <span class="n">BQ_PUSH_MESSAGE_TYPE_ELEMENT</span><span class="p">(</span><span class="n">BQPushMessageTypeLive</span><span class="p">),</span>
</span><span class='line'>                                    <span class="l">}</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Swift实现原子属性</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="n">SafeForm</span> <span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">lock</span><span class="p">:</span> <span class="n">AnyObject</span><span class="o">!</span>
</span><span class='line'>     <span class="n">public</span> <span class="k">var</span> <span class="nl">value</span><span class="p">:</span> <span class="n">U</span>
</span><span class='line'>     <span class="n">public</span> <span class="k">var</span> <span class="nl">safeValue</span><span class="p">:</span> <span class="n">U</span> <span class="p">{</span>
</span><span class='line'>         <span class="kr">get</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">return</span> <span class="n">withLock</span> <span class="p">{</span>
</span><span class='line'>               <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="kr">set</span> <span class="p">{</span>
</span><span class='line'>             <span class="n">withLock</span> <span class="p">{</span>
</span><span class='line'>                 <span class="n">value</span> <span class="o">=</span> <span class="n">newValue</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="cm">/* 不可与safeValue混用 */</span>
</span><span class='line'>     <span class="n">public</span> <span class="k">func</span> <span class="n">sync_enter</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">objc_sync_enter</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="n">public</span> <span class="k">func</span> <span class="n">sync_exit</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">objc_sync_exit</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="n">private</span> <span class="k">func</span> <span class="n">withLock</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span><span class="p">(@</span><span class="n">noescape</span> <span class="nl">action</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">R</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">R</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">objc_sync_enter</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'>         <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">action</span><span class="p">()</span>
</span><span class='line'>         <span class="n">objc_sync_exit</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上感觉原子属性的作用并不是很明显，对一个多步操作，还是需要自己手动加锁。</p>

<h2>Xcode图像化调试错误</h2>

<p>报错：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">Assertion</span> <span class="n">failure</span> <span class="k">in</span> <span class="o">-</span><span class="p">[</span><span class="bp">UITextView</span> <span class="n">_firstBaselineOffsetFromTop</span><span class="p">],</span> <span class="o">/</span><span class="n">BuildRoot</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Caches</span><span class="o">/</span><span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">xbs</span><span class="o">/</span><span class="n">Sources</span><span class="o">/</span><span class="n">UIKit_Sim</span><span class="o">/</span><span class="n">UIKit</span><span class="o">-</span><span class="mf">3512.60.7</span><span class="o">/</span><span class="bp">UITextView</span><span class="p">.</span><span class="nl">m</span><span class="p">:</span><span class="mi">1683</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加以下代码即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">UITextView</span><span class="nl">(MYTextView)</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="bp">UITextView</span> <span class="nl">(MYTextView)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">_firstBaselineOffsetFromTop</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">_baselineOffsetFromBottom</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UITextView</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">_firstBaselineOffsetFromTop</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">_baselineOffsetFromBottom</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>UITabBarController调用viewDidLoad的时机</h2>

<p>继承UITabBarController后，从外部调用init创建，即使没有加载它的view，它也会调用viewDidLoad，这点和UIViewController不一样。 <br>
所以在使用Swift时，需要注意在UITableBarController中声明为!类型的属性，容易造成强制解包崩溃的问题。<br>
详细信息</p>

<ul>
<li><a href="http://www.andrewmonshizadeh.com/2015/02/23/uitabbarcontroller-is-different/">UITabBarController is Different</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YYModel阅读小记]]></title>
    <link href="http://triplecc.github.io/blog/2016-06-05-yymodelyue-du-xiao-ji/"/>
    <updated>2016-06-05T22:22:15+08:00</updated>
    <id>http://triplecc.github.io/blog/yymodelyue-du-xiao-ji</id>
    <content type="html"><![CDATA[<p>YYModel是由ibireme开发的一套小而精美的模型转换框架，采用分类的形式，无需继承框架的某个基类就可以方便地完成模型的转换，且内部做了自动类型转换和安全处理，可以有效地防止因模型类型和后台给的数据类型不一样而产生的崩溃问题。<br>
近些天抽空拜读了一下其源码，果然是思维严谨，考虑的一些细节也很到位，让人自叹弗如。虽然作者说这个框架是花了两个周末的时间完成的，但是其代码质量还是非常让人惊艳的，值得仔细阅读。</p>

<!--more-->


<h4>基本结构</h4>

<p>YYModel总共由5个文件组成，其中核心文件只有以下四个：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">YYClassInfo</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'><span class="n">YYClassInfo</span><span class="p">.</span><span class="n">m</span>
</span><span class='line'><span class="bp">NSObject</span><span class="o">+</span><span class="n">YYModel</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'><span class="bp">NSObject</span><span class="o">+</span><span class="n">YYModel</span><span class="p">.</span><span class="n">m</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>YYClassInfo</code>主要将成员变量、方法、成员属性以及类这四类信息，从C层面的函数调用抽象成OC的类。这个文件主要的类有以下四个：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">YYClassInfo</span>           <span class="c1">// 类</span>
</span><span class='line'><span class="n">YYClassPropertyInfo</span>        <span class="c1">// 成员属性    </span>
</span><span class='line'><span class="n">YYClassMethodInfo</span>      <span class="c1">// 方法  </span>
</span><span class='line'><span class="n">YYClassIvarInfo</span>            <span class="c1">// 成员变量</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>YYClassInfo</code>包含三个以后三者的<code>name</code>为键，以后三者为值的字典。由于YYModel使用遍历属性的方式来达到模型转换的目的，所以其中的<code>propertyInfos</code>起比较重要的作用。</p>

<p>该文件还包含一个枚举类型：<code>YYEncodingType</code>，列举了各类编码信息，包括值类型、方法限定类型、属性修饰类型。<code>YYEncodingType</code>使用掩码的方式对这三类不同的枚举信息进行分类，各占据1个字节：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">YYEncodingTypeMask</span>                <span class="o">=</span> <span class="mh">0xFF</span>       <span class="c1">//值类型</span>
</span><span class='line'><span class="n">YYEncodingTypeQualifierMask</span>      <span class="o">=</span> <span class="mh">0xFF00</span>       <span class="c1">//方法限定类型</span>
</span><span class='line'><span class="n">YYEncodingTypePropertyMask</span>      <span class="o">=</span> <span class="mh">0xFF0000</span>      <span class="c1">//属性修饰类型</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>YYEncodingTypeQualifierMask</code>和<code>YYEncodingTypePropertyMask</code>可以进行逻辑与操作，来表示被多个修饰符修饰或限定的属性或方法。<br>
详细的编码信息可以从以下链接获取：<br>
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html">Declared Properties</a><br>
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">Type Encodings</a><br></p>

<h3>核心代码</h3>

<p>模型转换的核心功能无非两种：model->json、json->model，所以这里主要纪录下框架中这两个主要功能的阅读笔记。</p>

<h4>json->model</h4>

<p><code>yy_modelWithJSON</code>是json转模型的入口，可以先从这个方法入手。</p>

<pre><code class="`objc"> + (instancetype)yy_modelWithJSON:(id)json {
    NSDictionary *dic = [self _yy_dictionaryWithJSON:json];
    return [self yy_modelWithDictionary:dic];
}
</code></pre>

<p> 以上代码通过<code>_yy_dictionaryWithJSON</code>将json转换成了字典，再调用<code>yy_modelWithDictionary</code>对字典进行转换，事实上，真正的对外转换方法应该是<code>yy_modelWithDictionary</code>，所有对集合内部模型的转换，最终都使用了这个方法。<br>
 这里有一个小技巧，就是对方法的命名，对内方法/函数添加'_&lsquo;前缀，对外去处此前缀，这种做法在CoreFoundation里面也比较常见。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">yy_modelWithDictionary:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">dictionary</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dictionary</span> <span class="o">||</span> <span class="n">dictionary</span> <span class="o">==</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCFNull</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">dictionary</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSDictionary</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">cls</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="k">class</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_YYModelMeta</span> <span class="o">*</span><span class="n">modelMeta</span> <span class="o">=</span> <span class="p">[</span><span class="n">_YYModelMeta</span> <span class="nl">metaWithClass</span><span class="p">:</span><span class="n">cls</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_hasCustomClassFromDictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cls</span> <span class="o">=</span> <span class="p">[</span><span class="n">cls</span> <span class="nl">modelCustomClassForDictionary</span><span class="p">:</span><span class="n">dictionary</span><span class="p">]</span> <span class="o">?:</span> <span class="n">cls</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSObject</span> <span class="o">*</span><span class="n">one</span> <span class="o">=</span> <span class="p">[</span><span class="n">cls</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">one</span> <span class="nl">yy_modelSetWithDictionary</span><span class="p">:</span><span class="n">dictionary</span><span class="p">])</span> <span class="k">return</span> <span class="n">one</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取字典之后，就可以生成调用实例所属类信息了。这里关于类<code>_YYModelMeta</code>作者注释的已经非常详细了:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">_YYModelMeta</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">@</span><span class="n">package</span>  <span class="c1">// 表示在同一个包内可见，这个倒是比较少用</span>
</span><span class='line'>    <span class="n">YYClassInfo</span> <span class="o">*</span><span class="n">_classInfo</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">/// Key:mapped key and key path, Value:_YYModelPropertyMeta.</span>
</span><span class='line'>    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">_mapper</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">/// Array&lt;_YYModelPropertyMeta&gt;, all property meta of this model.</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">_allPropertyMetas</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">/// Array&lt;_YYModelPropertyMeta&gt;, property meta which is mapped to a key path.</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">_keyPathPropertyMetas</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">/// Array&lt;_YYModelPropertyMeta&gt;, property meta which is mapped to multi keys.</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">_multiKeysPropertyMetas</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">/// The number of mapped key (and key path), same to _mapper.count.</span>
</span><span class='line'>    <span class="bp">NSUInteger</span> <span class="n">_keyMappedCount</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">/// Model class type.</span>
</span><span class='line'>    <span class="n">YYEncodingNSType</span> <span class="n">_nsType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 这几个布尔用来纪录用户是否实现了对应的自定义方法</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">_hasCustomWillTransformFromDictionary</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">_hasCustomTransformFromDictionary</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">_hasCustomTransformToDictionary</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">_hasCustomClassFromDictionary</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>_mapper</code>为所有映射信息，以key为键(最原始的)，以<code>_YYModelPropertyMeta</code>实例为值;要注意的是这里的key还没有被拆分成keyPath数组，还是原始的形式:@&ldquo;key1.key2"，而且在属性映射到一个数组时，这里的key便是一个数组<br>
<code>_allPropertyMetas</code>为当前模型所有属性的信息<br>
<code>_keyPathPropertyMetas</code>为映射到keyPath属性的信息<br>
<code>_multiKeysPropertyMetas</code>为映射到一个数组的属性信息<br>
<code>_YYModelMeta</code>只存储到属性<code>_YYModelPropertyMeta</code>层面的信息，更加细化的信息，比如拆分成数组的keyPath，属性映射到的数组等信息，都是交由<code>_YYModelPropertyMeta</code>进行存储，<code>_YYModelMeta</code>存储的只是最原始的key信息。<br>
关于<code>_YYModelPropertyMeta</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">_YYModelPropertyMeta</span> : <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">@</span><span class="n">package</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">_name</span><span class="p">;</span>             <span class="c1">///&lt; property&#39;s name</span>
</span><span class='line'>    <span class="n">YYEncodingType</span> <span class="n">_type</span><span class="p">;</span>        <span class="c1">///&lt; property&#39;s type</span>
</span><span class='line'>    <span class="n">YYEncodingNSType</span> <span class="n">_nsType</span><span class="p">;</span>    <span class="c1">///&lt; property&#39;s Foundation type</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">_isCNumber</span><span class="p">;</span>             <span class="c1">///&lt; is c number type</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">_cls</span><span class="p">;</span>                  <span class="c1">///&lt; property&#39;s class, or nil</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">_genericCls</span><span class="p">;</span>           <span class="c1">///&lt; container&#39;s generic class, or nil if threr&#39;s no generic class</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">_getter</span><span class="p">;</span>                 <span class="c1">///&lt; getter, or nil if the instances cannot respond</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">_setter</span><span class="p">;</span>                 <span class="c1">///&lt; setter, or nil if the instances cannot respond</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">_isKVCCompatible</span><span class="p">;</span>       <span class="c1">///&lt; YES if it can access with key-value coding</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">_isStructAvailableForKeyedArchiver</span><span class="p">;</span> <span class="c1">///&lt; YES if the struct can encoded with keyed archiver/unarchiver</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">_hasCustomClassFromDictionary</span><span class="p">;</span> <span class="c1">///&lt; class/generic class implements +modelCustomClassForDictionary:</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     property-&gt;key:       _mappedToKey:key     _mappedToKeyPath:nil            _mappedToKeyArray:nil</span>
</span><span class='line'><span class="cm">     property-&gt;keyPath:   _mappedToKey:keyPath _mappedToKeyPath:keyPath(array) _mappedToKeyArray:nil</span>
</span><span class='line'><span class="cm">     property-&gt;keys:      _mappedToKey:keys[0] _mappedToKeyPath:nil/keyPath    _mappedToKeyArray:keys(array)</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">_mappedToKey</span><span class="p">;</span>      <span class="c1">///&lt; the key mapped to</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">_mappedToKeyPath</span><span class="p">;</span>   <span class="c1">///&lt; the key path mapped to (nil if the name is not key path)</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">_mappedToKeyArray</span><span class="p">;</span>  <span class="c1">///&lt; the key(NSString) or keyPath(NSArray) array (nil if not mapped to multiple keys)</span>
</span><span class='line'>    <span class="n">YYClassPropertyInfo</span> <span class="o">*</span><span class="n">_info</span><span class="p">;</span>  <span class="c1">///&lt; property&#39;s info</span>
</span><span class='line'>    <span class="n">_YYModelPropertyMeta</span> <span class="o">*</span><span class="n">_next</span><span class="p">;</span> <span class="c1">///&lt; next meta if there are multiple properties mapped to the same key.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>_mappedToKey</code>映射到的key(@{property : key})<br>
<code>_mappedToKeyPath</code>映射到的keyPath(@{property : key1.key2})<br>
<code>_mappedToKeyArray</code>映射到的数组(@{property : @[key1, key2]})<br>
每个<code>_YYModelPropertyMeta</code>中，这三者只有其中一个会有值。有了这三个属性，就可以获取需要转化的对应字典的value了。<br>
这里记录下<code>_YYModelMeta</code>的init方法执行流程:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">1</span><span class="err">、根据</span><span class="kt">Class</span><span class="err">获取</span><span class="n">YYClassInfo</span><span class="err">实例</span>
</span><span class='line'><span class="mi">2</span><span class="err">、获取需要被忽略的属性（用户提供）</span>
</span><span class='line'><span class="mi">3</span><span class="err">、获取白名单（除了白名单，其它属性都被忽略，用户提供）</span>
</span><span class='line'><span class="mi">4</span><span class="err">、获取类型为集合的属性中存储的类类型（用户提供）</span>
</span><span class='line'><span class="mi">5</span><span class="err">、循环获取所有的属性信息，并生成`</span><span class="n">_YYModelPropertyMeta</span><span class="err">`实例，存储至</span><span class="n">allPropertyMetas</span><span class="err">、</span><span class="n">keyPathPropertyMetas</span><span class="err">、</span><span class="n">multiKeysPropertyMetas</span>
</span><span class='line'><span class="mi">6</span><span class="err">、设置属性映射关系</span><span class="n">_mapper</span><span class="err">（用户提供）</span>
</span><span class='line'><span class="mi">7</span><span class="err">、设置属性映射关系</span><span class="n">_mapper</span><span class="err">（原生属性，非用户自定义映射）</span>
</span><span class='line'><span class="mi">8</span><span class="err">、设置用户是否实现转换相关自定义方法布尔属性</span>
</span></code></pre></td></tr></table></div></figure>


<p>一些基本的信息类设置完成后，就开始设置实例的属性了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 设置前对传入的字典进行更改</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_hasCustomWillTransformFromDictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dic</span> <span class="o">=</span> <span class="p">[((</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">YYModel</span><span class="o">&gt;</span><span class="p">)</span><span class="nb">self</span><span class="p">)</span> <span class="nl">modelCustomWillTransformFromDictionary</span><span class="p">:</span><span class="n">dic</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">dic</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSDictionary</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 集合上下文</span>
</span><span class='line'><span class="n">ModelSetContext</span> <span class="n">context</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'><span class="n">context</span><span class="p">.</span><span class="n">modelMeta</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">modelMeta</span><span class="p">);</span>
</span><span class='line'><span class="n">context</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="nb">self</span><span class="p">);</span>
</span><span class='line'><span class="n">context</span><span class="p">.</span><span class="n">dictionary</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">dic</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_keyMappedCount</span> <span class="o">&gt;=</span> <span class="n">CFDictionaryGetCount</span><span class="p">((</span><span class="n">CFDictionaryRef</span><span class="p">)</span><span class="n">dic</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CFDictionaryApplyFunction</span><span class="p">((</span><span class="n">CFDictionaryRef</span><span class="p">)</span><span class="n">dic</span><span class="p">,</span> <span class="n">ModelSetWithDictionaryFunction</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_keyPathPropertyMetas</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CFArrayApplyFunction</span><span class="p">((</span><span class="n">CFArrayRef</span><span class="p">)</span><span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_keyPathPropertyMetas</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">CFRangeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">CFArrayGetCount</span><span class="p">((</span><span class="n">CFArrayRef</span><span class="p">)</span><span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_keyPathPropertyMetas</span><span class="p">)),</span>
</span><span class='line'>                             <span class="n">ModelSetWithPropertyMetaArrayFunction</span><span class="p">,</span>
</span><span class='line'>                             <span class="o">&amp;</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_multiKeysPropertyMetas</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CFArrayApplyFunction</span><span class="p">((</span><span class="n">CFArrayRef</span><span class="p">)</span><span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_multiKeysPropertyMetas</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">CFRangeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">CFArrayGetCount</span><span class="p">((</span><span class="n">CFArrayRef</span><span class="p">)</span><span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_multiKeysPropertyMetas</span><span class="p">)),</span>
</span><span class='line'>                             <span class="n">ModelSetWithPropertyMetaArrayFunction</span><span class="p">,</span>
</span><span class='line'>                             <span class="o">&amp;</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CFArrayApplyFunction</span><span class="p">((</span><span class="n">CFArrayRef</span><span class="p">)</span><span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_allPropertyMetas</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">CFRangeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_keyMappedCount</span><span class="p">),</span>
</span><span class='line'>                         <span class="n">ModelSetWithPropertyMetaArrayFunction</span><span class="p">,</span>
</span><span class='line'>                         <span class="o">&amp;</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 设置后对实例的属性进行更改</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">modelMeta</span><span class="o">-&gt;</span><span class="n">_hasCustomTransformFromDictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[((</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">YYModel</span><span class="o">&gt;</span><span class="p">)</span><span class="nb">self</span><span class="p">)</span> <span class="nl">modelCustomTransformFromDictionary</span><span class="p">:</span><span class="n">dic</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当<code>modelMeta-&gt;_keyMappedCount</code>大于等于<code>CFDictionaryGetCount((CFDictionaryRef)dic)</code>时，
执行以下步骤：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">1</span><span class="err">、遍历字典，并以字典为基准，设置模型中与字典相对应的属性</span>
</span><span class='line'><span class="mi">2</span><span class="err">、通过</span><span class="n">_keyPathPropertyMetas</span><span class="err">，设置映射到</span><span class="n">keyPath</span><span class="err">的属性</span>
</span><span class='line'><span class="mi">3</span><span class="err">、通过</span><span class="n">_multiKeysPropertyMetas</span><span class="err">，设置映射到数组的属性</span>
</span></code></pre></td></tr></table></div></figure>


<p>否则直接通过<code>_allPropertyMetas</code>设置所有属性。<br>
字典回调函数的如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">ModelSetWithDictionaryFunction</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_key</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_value</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ModelSetContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="n">_context</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__unsafe_unretained</span> <span class="n">_YYModelMeta</span> <span class="o">*</span><span class="n">meta</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">_YYModelMeta</span> <span class="o">*</span><span class="p">)(</span><span class="n">context</span><span class="o">-&gt;</span><span class="n">modelMeta</span><span class="p">);</span>
</span><span class='line'>    <span class="n">__unsafe_unretained</span> <span class="n">_YYModelPropertyMeta</span> <span class="o">*</span><span class="n">propertyMeta</span> <span class="o">=</span> <span class="p">[</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">_mapper</span> <span class="nl">objectForKey</span><span class="p">:(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)(</span><span class="n">_key</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">__unsafe_unretained</span> <span class="kt">id</span> <span class="n">model</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)(</span><span class="n">context</span><span class="o">-&gt;</span><span class="n">model</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">propertyMeta</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 映射到同个key之后，这里循环赋给属性相同的值</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_setter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ModelSetValueForProperty</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">__unsafe_unretained</span> <span class="kt">id</span><span class="p">)</span><span class="n">_value</span><span class="p">,</span> <span class="n">propertyMeta</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">propertyMeta</span> <span class="o">=</span> <span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在遍历字典时，回调函数会根据字典的key从<code>_mapper</code>中获取对应的<code>_YYModelPropertyMeta</code>，
然后通过<code>ModelSetValueForProperty</code>设置属性值。如果<code>propertyMeta</code>的<code>_next</code>不为空，即表示有多个属性被映射到了同一个key。<br>
这样做的好处是只需要从字典中取一次value，就可以设置被映射到同一个key的所有属性；而通过<code>_allPropertyMetas</code>设置时，则需要对每个属性
都对字典做一次取值操作。作者在<a href="http://blog.ibireme.com/2015/10/23/ios_model_framework_benchmark/">优化Tip</a>的第8点中也提到：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mf">8.</span> <span class="err">减少遍历的循环次数</span>
</span><span class='line'><span class="err">在</span> <span class="n">JSON</span> <span class="err">和</span> <span class="n">Model</span> <span class="err">转换前，</span><span class="n">Model</span> <span class="err">的属性个数和</span> <span class="n">JSON</span> <span class="err">的属性个数都是已知的，这时选择数量较少的那一方进行遍历，会节省很多时间。</span>
</span></code></pre></td></tr></table></div></figure>


<p>数组的回调函数如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">ModelSetWithPropertyMetaArrayFunction</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_propertyMeta</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ModelSetContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="n">_context</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__unsafe_unretained</span> <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">dictionary</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)(</span><span class="n">context</span><span class="o">-&gt;</span><span class="n">dictionary</span><span class="p">);</span>
</span><span class='line'>    <span class="n">__unsafe_unretained</span> <span class="n">_YYModelPropertyMeta</span> <span class="o">*</span><span class="n">propertyMeta</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">_YYModelPropertyMeta</span> <span class="o">*</span><span class="p">)(</span><span class="n">_propertyMeta</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_setter</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_mappedToKeyArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 映射到多个key</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="n">YYValueForMultiKeys</span><span class="p">(</span><span class="n">dictionary</span><span class="p">,</span> <span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_mappedToKeyArray</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_mappedToKeyPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 映射到keyPath</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="n">YYValueForKeyPath</span><span class="p">(</span><span class="n">dictionary</span><span class="p">,</span> <span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_mappedToKeyPath</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 映射到一个key</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">dictionary</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_mappedToKey</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">__unsafe_unretained</span> <span class="kt">id</span> <span class="n">model</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)(</span><span class="n">context</span><span class="o">-&gt;</span><span class="n">model</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ModelSetValueForProperty</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">propertyMeta</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>YYValueForMultiKeys</code>代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">force_inline</span> <span class="kt">id</span> <span class="nf">YYValueForMultiKeys</span><span class="p">(</span><span class="n">__unsafe_unretained</span> <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">dic</span><span class="p">,</span> <span class="n">__unsafe_unretained</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">multiKeys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">key</span> <span class="k">in</span> <span class="n">multiKeys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 只要对上了dic中的一个key，就退出</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">key</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSString</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// key不是NSString，为NSArray，使用keyPath取值</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="n">YYValueForKeyPath</span><span class="p">(</span><span class="n">dic</span><span class="p">,</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在一个属性被映射到多个key时，只取第一个匹配成功的key，后续的key将会被略过。
<code>YYValueForKeyPath</code>的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">force_inline</span> <span class="kt">id</span> <span class="nf">YYValueForKeyPath</span><span class="p">(</span><span class="n">__unsafe_unretained</span> <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">dic</span><span class="p">,</span> <span class="n">__unsafe_unretained</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">keyPaths</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSUInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="n">keyPaths</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="n">keyPaths</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSDictionary</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">dic</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>作者为了优化代码性能，将映射的<code>keyPath</code>以<code>.</code>为分隔符拆分成多个字符串，并以数组的形式存储，最终用循环获取<code>value</code>的方式代替<code>valueForKeyPath:</code>，也解决了从非字典取<code>value</code>时的崩溃问题。当然在不考虑性能的情况下，也可以用以下方式实现:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">keyPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">keyPaths</span> <span class="nl">componentsJoinedByString</span><span class="p">:</span><span class="s">@&quot;.&quot;</span><span class="p">];</span>
</span><span class='line'><span class="k">@try</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">dic</span> <span class="nl">valueForKeyPath</span><span class="p">:</span><span class="n">keyPath</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="k">@catch</span> <span class="p">(</span><span class="bp">NSException</span> <span class="o">*</span><span class="n">exception</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>YYModel采用<code>objc_msgSend</code>直接调用<code>Getter/Setter</code>，替代了使用KVC对属性进行取值/设置。作者的优化Tip3就说明了避免 KVC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mf">3.</span> <span class="err">避免</span> <span class="n">KVC</span>
</span><span class='line'><span class="n">Key</span><span class="o">-</span><span class="n">Value</span> <span class="n">Coding</span> <span class="err">使用起来非常方便，但性能上要差于直接调用</span> <span class="n">Getter</span><span class="o">/</span><span class="n">Setter</span><span class="err">，所以如果能避免</span> <span class="n">KVC</span> <span class="err">而用</span> <span class="n">Getter</span><span class="o">/</span><span class="n">Setter</span> <span class="err">代替，性能会有较大提升。</span>
</span></code></pre></td></tr></table></div></figure>


<p>设置属性值通过方法<code>ModelSetValueForProperty</code>实现。首先，函数把属性分为了三类类型进行处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">C</span><span class="err">数值类型</span>
</span><span class='line'><span class="n">NS</span><span class="err">系统自带基本类类型</span>
</span><span class='line'><span class="err">非常规类型</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>C数值类型</code>判断如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">force_inline</span> <span class="kt">BOOL</span> <span class="nf">YYEncodingTypeIsCNumber</span><span class="p">(</span><span class="n">YYEncodingType</span> <span class="n">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">type</span> <span class="o">&amp;</span> <span class="n">YYEncodingTypeMask</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeBool</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeInt8</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeUInt8</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeInt16</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeUInt16</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeInt32</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeUInt32</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeInt64</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeUInt64</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeFloat</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeDouble</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeLongDouble</span><span class="p">:</span> <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span> <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NS系统自带类类型</code>判断如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">force_inline</span> <span class="n">YYEncodingNSType</span> <span class="nf">YYClassGetNSType</span><span class="p">(</span><span class="kt">Class</span> <span class="n">cls</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cls</span><span class="p">)</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSUnknown</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSMutableString</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSMutableString</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSString</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSString</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSDecimalNumber</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSDecimalNumber</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSNumber</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSNumber</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSValue</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSValue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSMutableData</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSMutableData</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSData</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSData</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSDate</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSDate</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSURL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSMutableArray</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSMutableArray</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSArray</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSArray</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSMutableDictionary</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSMutableDictionary</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSDictionary</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSDictionary</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSMutableSet</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSMutableSet</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">cls</span> <span class="nl">isSubclassOfClass</span><span class="p">:[</span><span class="bp">NSSet</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">YYEncodingTypeNSSet</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YYEncodingTypeNSUnknown</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是<code>mutable</code>类型一般都继承于<code>immutable</code>类型，所以需要先判断是否为<code>mutable</code>。由于类簇的原因，我们是无法在<code>runtime</code>时获取属性是否是<code>mutable</code>的，所以只能进行静态判断，这也是<code>_YYModelPropertyMeta</code>的<code>_nsType</code>存在的意义。(PS: 在函数<code>ModelSetValueForProperty</code>中，关于类簇的问题似乎还没有从YYModel主线合入到YYKit的YYModel中。YYKit的YYModel版本，使用了<code>isKindOfClass</code>来分区分<code>NSMutableString</code>和<code>NSString</code>，导致属性类型是<code>NSMutableString</code>的情况下，获得的还是<code>immutable</code>版本)<br>
更多关于类簇的资料可以参考:<a href="http://blog.sunnyxx.com/2014/12/18/class-cluster/">从NSArray看类簇</a>、<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html">ClassClusters</a>。<br></p>

<p>当属性为集合类型时，赋值稍微要麻烦些。比如针对<code>YYEncodingTypeNSArray</code>，有如下处理代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">_genericCls</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">valueArr</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSArray</span> <span class="k">class</span><span class="p">]])</span> <span class="n">valueArr</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSSet</span> <span class="k">class</span><span class="p">]])</span> <span class="n">valueArr</span> <span class="o">=</span> <span class="p">((</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span><span class="p">).</span><span class="n">allObjects</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">valueArr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">objectArr</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">one</span> <span class="k">in</span> <span class="n">valueArr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 已经是所要对象了</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">one</span> <span class="nl">isKindOfClass</span><span class="p">:</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">_genericCls</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">objectArr</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">one</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">one</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSDictionary</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 给的是字典，要自己构造</span>
</span><span class='line'>                <span class="kt">Class</span> <span class="n">cls</span> <span class="o">=</span> <span class="n">meta</span><span class="o">-&gt;</span><span class="n">_genericCls</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">_hasCustomClassFromDictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 由字典返回对应的类(透传) &lt;&lt;&lt; 由开发者实现</span>
</span><span class='line'>                    <span class="n">cls</span> <span class="o">=</span> <span class="p">[</span><span class="n">cls</span> <span class="nl">modelCustomClassForDictionary</span><span class="p">:</span><span class="n">one</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cls</span><span class="p">)</span> <span class="n">cls</span> <span class="o">=</span> <span class="n">meta</span><span class="o">-&gt;</span><span class="n">_genericCls</span><span class="p">;</span> <span class="c1">// for xcode code coverage</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="bp">NSObject</span> <span class="o">*</span><span class="n">newOne</span> <span class="o">=</span> <span class="p">[</span><span class="n">cls</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>                <span class="c1">// 根据获得的类，创建实例</span>
</span><span class='line'>                <span class="p">[</span><span class="n">newOne</span> <span class="nl">yy_modelSetWithDictionary</span><span class="p">:</span><span class="n">one</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">newOne</span><span class="p">)</span> <span class="p">[</span><span class="n">objectArr</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">newOne</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">,</span> <span class="kt">id</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">model</span><span class="p">,</span> <span class="n">meta</span><span class="o">-&gt;</span><span class="n">_setter</span><span class="p">,</span> <span class="n">objectArr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSArray</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">_nsType</span> <span class="o">==</span> <span class="n">YYEncodingTypeNSArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">,</span> <span class="kt">id</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">model</span><span class="p">,</span> <span class="n">meta</span><span class="o">-&gt;</span><span class="n">_setter</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">,</span> <span class="kt">id</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">model</span><span class="p">,</span>
</span><span class='line'>                                                           <span class="n">meta</span><span class="o">-&gt;</span><span class="n">_setter</span><span class="p">,</span>
</span><span class='line'>                                                           <span class="p">((</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span><span class="p">).</span><span class="n">mutableCopy</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSSet</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">_nsType</span> <span class="o">==</span> <span class="n">YYEncodingTypeNSArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">,</span> <span class="kt">id</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">model</span><span class="p">,</span> <span class="n">meta</span><span class="o">-&gt;</span><span class="n">_setter</span><span class="p">,</span> <span class="p">((</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span><span class="p">).</span><span class="n">allObjects</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">,</span> <span class="kt">id</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">model</span><span class="p">,</span>
</span><span class='line'>                                                           <span class="n">meta</span><span class="o">-&gt;</span><span class="n">_setter</span><span class="p">,</span>
</span><span class='line'>                                                           <span class="p">((</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span><span class="p">).</span><span class="n">allObjects</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在使用者没有通过<code>modelContainerPropertyGenericClass</code>或者和<a href="https://github.com/ibireme/YYModel/issues/79">类型同名的<code>protocols</code></a>指定集合中元素的类型时，<code>_genericCls</code>是为nil的，所以如果<code>value</code>是NSArray或者NSSet类型，那么YYModel将<code>value</code>直接赋给属性，并没有做多余的解析。<br>
在使用者已经指定了集合中元素类型的情况下，第一个分支就会对每个元素进行解析并构造成相应的实例。如果集合元素依然是一个字典，那么就会调用<code>yy_modelSetWithDictionary</code>嵌套解析。
<br>
YYModel给使用者提供了极强的扩展性。在解析的过程中，使用者可以根据在<code>modelCustomClassForDictionary:</code>方法中传入的字典，决定想要生成实例的类型。</p>

<h4>model->json</h4>

<p>model->json的入口方法为<code>yy_modelToJSONObject</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">yy_modelToJSONObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     Apple said:</span>
</span><span class='line'><span class="cm">     The top level object is an NSArray or NSDictionary.</span>
</span><span class='line'><span class="cm">     All objects are instances of NSString, NSNumber, NSArray, NSDictionary, or NSNull.</span>
</span><span class='line'><span class="cm">     All dictionary keys are instances of NSString.</span>
</span><span class='line'><span class="cm">     Numbers are not NaN or infinity.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">jsonObject</span> <span class="o">=</span> <span class="n">ModelToJSONObjectRecursive</span><span class="p">(</span><span class="nb">self</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">jsonObject</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSArray</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">jsonObject</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">jsonObject</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSDictionary</span> <span class="k">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">jsonObject</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要是利用<code>ModelToJSONObjectRecursive</code>对model进行嵌套包装，最终生成只包含<code>NSArray/NSDictionary/NSString/NSNumber/NSNull</code>的JSON对象。<code>ModelToJSONObjectRecursive</code>的执行逻辑如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">1</span><span class="err">、如果是基本类型</span><span class="o">:</span><span class="n">kCFNull</span><span class="err">、</span><span class="bp">NSString</span><span class="err">、</span><span class="bp">NSNumber</span><span class="err">或者</span><span class="nb">nil</span><span class="err">，直接返回</span>
</span><span class='line'><span class="mi">2</span><span class="err">、如果是</span><span class="bp">NSDictionary</span><span class="err">，能</span><span class="n">JSON</span><span class="err">化就直接返回，否则调用</span><span class="n">ModelToJSONObjectRecursive</span><span class="err">嵌套解析，最后添加到字典中</span>
</span><span class='line'><span class="mi">3</span><span class="err">、如果是</span><span class="bp">NSSet</span><span class="err">、</span><span class="bp">NSArray</span><span class="err">，并且元素是基本类型就直接添加到数组中，否则调用</span><span class="n">ModelToJSONObjectRecursive</span><span class="err">嵌套解析成基本类型，然后添加到数组中</span>
</span><span class='line'><span class="mi">4</span><span class="err">、如果是</span><span class="bp">NSURL</span><span class="err">、</span><span class="bp">NSAttributedString</span><span class="err">、</span><span class="bp">NSDate</span><span class="err">类型，转成字符串返回。是</span><span class="bp">NSData</span><span class="err">就返回</span><span class="nb">nil</span>
</span><span class='line'><span class="mi">5</span><span class="err">、剩下的基本就是自定义的类了，需要遍历对应的</span><span class="n">_mapper</span><span class="err">进行处理</span>
</span></code></pre></td></tr></table></div></figure>


<p>第五步遍历_mapper的代码主要由两部分组成：1、获取属性值；2、构造字典<br>
获取属性值的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_getter</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 这里是获取属性对应的值(转化成NSString或者NSNumber的)</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_isCNumber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="n">ModelCreateNumberFromProperty</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">propertyMeta</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_nsType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">v</span> <span class="o">=</span> <span class="p">((</span><span class="kt">id</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">model</span><span class="p">,</span> <span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_getter</span><span class="p">);</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="n">ModelToJSONObjectRecursive</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_type</span> <span class="o">&amp;</span> <span class="n">YYEncodingTypeMask</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeObject</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">id</span> <span class="n">v</span> <span class="o">=</span> <span class="p">((</span><span class="kt">id</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">model</span><span class="p">,</span> <span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_getter</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// 属性是自定义的对象，嵌套解析</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="n">ModelToJSONObjectRecursive</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCFNull</span><span class="p">)</span> <span class="n">value</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeClass</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">Class</span> <span class="n">v</span> <span class="o">=</span> <span class="p">((</span><span class="kt">Class</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">model</span><span class="p">,</span> <span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_getter</span><span class="p">);</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="n">v</span> <span class="o">?</span> <span class="n">NSStringFromClass</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">:</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YYEncodingTypeSEL</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">SEL</span> <span class="n">v</span> <span class="o">=</span> <span class="p">((</span><span class="kt">SEL</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">objc_msgSend</span><span class="p">)((</span><span class="kt">id</span><span class="p">)</span><span class="n">model</span><span class="p">,</span> <span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_getter</span><span class="p">);</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="n">v</span> <span class="o">?</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">:</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">value</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>总体来说和<code>ModelSetValueForProperty</code>的处理较为类似，也是分的三种大类。<br>
构造字典的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 这里是根据map构造字典</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_mappedToKeyPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">superDic</span> <span class="o">=</span> <span class="n">dic</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSMutableDictionary</span> <span class="o">*</span><span class="n">subDic</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSUInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_mappedToKeyPath</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_mappedToKeyPath</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// end  { ext = { d = Apple; }; }, 最后的key才赋值, 即superDic[@&quot;d&quot;] = @&quot;Apple&quot;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">superDic</span><span class="p">[</span><span class="n">key</span><span class="p">])</span> <span class="n">superDic</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">subDic</span> <span class="o">=</span> <span class="n">superDic</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">subDic</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 说明这一层字典已经有键值对了</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">subDic</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSDictionary</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 拷贝成可变的（没这一句也可，因为刚开始时创建的都是NSMutableDictionary), 方便i + 1 == max时进行赋值</span>
</span><span class='line'>                <span class="n">subDic</span> <span class="o">=</span> <span class="n">subDic</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>                <span class="n">superDic</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">subDic</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// key下没有value，创建可变字典赋给当前的key</span>
</span><span class='line'>            <span class="n">subDic</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableDictionary</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>            <span class="n">superDic</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">subDic</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 最顶层的字典(@{@&quot;a&quot; : @{@&quot;b&quot; : @&quot;c&quot;}}，即字典@{@&quot;b&quot; : @&quot;c&quot;})</span>
</span><span class='line'>        <span class="n">superDic</span> <span class="o">=</span> <span class="n">subDic</span><span class="p">;</span>
</span><span class='line'>        <span class="n">subDic</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dic</span><span class="p">[</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_mappedToKey</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dic</span><span class="p">[</span><span class="n">propertyMeta</span><span class="o">-&gt;</span><span class="n">_mappedToKey</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>小结</h3>

<p>很粗略地记录下部分阅读过程。YYModel有不少值得学习的地方，不管是代码风格还是考虑问题的全面性，这些都需要通过阅读源码来了解。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MQTT使用小记]]></title>
    <link href="http://triplecc.github.io/blog/2016-05-12-mqttshi-yong-xiao-ji/"/>
    <updated>2016-05-12T17:12:43+08:00</updated>
    <id>http://triplecc.github.io/blog/mqttshi-yong-xiao-ji</id>
    <content type="html"><![CDATA[<p>MQTT全称Message Queue Telemetry Transport，是一个针对轻量级的发布/订阅式消息传输场景的协议，同时也是被推崇的物联网传输协议。MQTT详细的介绍文章可以从<a href="http://mqtt.org/">官方网站</a>获得，所以这里就不进行详细的展开了，而是针对这些天的使用经历与感受做一番纪录。</p>

<p>MQTT开源的iOS客户端有以下几种：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|MQTTKit  |Marquette|Moscapsule|Musqueteer|MQTT-Client|MqttSDK|CocoaMQTT|
</span><span class='line'>|---------|---------|----------|----------|-----------|-------|---------|
</span><span class='line'>|Obj-C    |Obj-C    |Swift     |Obj-C     |Obj-C      |Obj-C  |Swift    |
</span><span class='line'>|Mosquitto|Mosquitto|Mosquitto |Mosquitto |native     |native |native   |</span></code></pre></td></tr></table></div></figure>


<p>以上开源库我只看过部分MQTTKit、MQTT-Client、CocoaMQTT的开源代码，总体来说MQTT-Client支持的功能更多全面一些。如果只是对协议本身进行学习不考虑功能的话，可以阅读CocoaMQTT，也可以阅读我重写的<a href="https://github.com/tripleCC/SwiftMQTT">SwiftMQTT</a>，因为代码量相对前面两个库少了很多。</p>

<p>而MQTT的broker一般选择<a href="http://mosquitto.org/">Mosquitto</a>，Mosquitto是一个由C编写的集客户端和服务端为一体的开源项目，所以相对来说风格较为友好，可以无障碍地阅读并调试源码（<a href="https://github.com/eclipse/mosquitto">开源地址</a>）。可以看到，以上客户端开源库中的前四种就是基于Mosquitto的一层封装。</p>

<!--more-->


<h4>Mosquitto的安装和使用</h4>

<p>Mosquitto在Linux下的安装相对比Mac-OS简单很多，主要是因为openssl的一些路径问题，后者需要多一些步骤。Mac-OS下可以通过两种方法运行Mosquitto，一种是通过brew命令安装Mosquitto:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">brew</span> <span class="n">install</span> <span class="n">mosquitto</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装完成后就可以在mosquitto.conf文件中更改相应的配置了。接着进入根目录（也可以指定$PATH到mosquitto可执行文件的目录），执行以下命令运行mosquitto：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// -c 读取配置</span>
</span><span class='line'><span class="c1">// -d 后台运行</span>
</span><span class='line'><span class="c1">// -v 打印详细日志</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">mosquitto</span> <span class="o">-</span><span class="n">c</span> <span class="n">etc</span><span class="o">/</span><span class="n">mosquitto</span><span class="o">/</span><span class="n">mosquitto</span><span class="p">.</span><span class="n">conf</span> <span class="o">-</span><span class="n">d</span> <span class="o">-</span><span class="n">v</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要重启mosquitto服务，可以先kill掉，再重启：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="nl">tripleCC</span><span class="p">:</span><span class="mf">1.4.8</span> <span class="n">songruiwang</span><span class="err">$</span> <span class="n">ps</span> <span class="o">-</span><span class="n">A</span> <span class="o">|</span> <span class="n">grep</span> <span class="n">mosquitto</span>
</span><span class='line'><span class="mi">55417</span> <span class="o">??</span>         <span class="mi">0</span><span class="o">:</span><span class="mf">00.05</span> <span class="p">.</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">mosquitto</span> <span class="o">-</span><span class="n">c</span> <span class="n">etc</span><span class="o">/</span><span class="n">mosquitto</span><span class="o">/</span><span class="n">mosquitto</span><span class="p">.</span><span class="n">conf</span> <span class="o">-</span><span class="n">d</span> <span class="o">-</span><span class="n">v</span>
</span><span class='line'><span class="nl">tripleCC</span><span class="p">:</span><span class="mf">1.4.8</span> <span class="n">songruiwang</span><span class="err">$</span> <span class="n">kill</span> <span class="o">-</span><span class="mi">9</span> <span class="mi">55417</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在要说明的是第二种方式，通过源码编译生成mosquitto可执行文件（好处是可以通过lldb对mosquitto进行调试，能更好地熟悉运行机制）。</p>

<p>下载mosquitto源码后进入根目录，然后执行以下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 禁用TLS_PSK，并且声称Debug版本（后续lldb调试需要用到符号表）</span>
</span><span class='line'><span class="c1">// 如果openssl是通过brew进行安装，就需要手动指定OPENSSL_ROOT_DIR和OPENSSL_INCLUDE_DIR环境变量</span>
</span><span class='line'><span class="c1">// 但是后来发现即使指定了，在编译时符号表中还是找不到TLS_PSK相关的函数</span>
</span><span class='line'><span class="n">cmake</span> <span class="o">-</span><span class="n">DWITH_TLS_PSK</span><span class="o">=</span><span class="n">OFF</span> <span class="o">-</span><span class="n">DWITH_TLS</span><span class="o">=</span><span class="n">OFF</span> <span class="o">-</span><span class="n">DCMAKE_BUILD_TYPE</span><span class="o">=</span><span class="n">Debug</span>
</span><span class='line'><span class="n">make</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>终端会提示无法拷贝可执行文件mosquitto，这个问题无伤大雅。可以手动拷贝到$PATH指定的目录下，也可以直接进入mosquitto所在目录运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="nl">tripleCC</span><span class="p">:</span><span class="n">src</span> <span class="n">songruiwang</span><span class="err">$</span> <span class="n">lldb</span> <span class="n">mosquitto</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">target</span> <span class="n">create</span> <span class="s">&quot;mosquitto&quot;</span>
</span><span class='line'><span class="n">Current</span> <span class="n">executable</span> <span class="kr">set</span> <span class="n">to</span> <span class="err">&#39;</span><span class="n">mosquitto</span><span class="err">&#39;</span> <span class="p">(</span><span class="n">x86_64</span><span class="p">).</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">b</span> <span class="n">mqtt3_packet_handle</span>
</span><span class='line'><span class="n">Breakpoint</span> <span class="mi">1</span><span class="o">:</span> <span class="k">where</span> <span class="o">=</span> <span class="n">mosquitto</span><span class="err">`</span><span class="n">mqtt3_packet_handle</span> <span class="o">+</span> <span class="mi">16</span> <span class="n">at</span> <span class="n">read_handle</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span><span class="mi">36</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="mh">0x0000000100018eb0</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">r</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样当客户端连接到broker时，就可以对mosquitto进行逐行调试了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">Process</span> <span class="mi">57680</span> <span class="nl">launched</span><span class="p">:</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">songruiwang</span><span class="o">/</span><span class="n">Desktop</span><span class="o">/</span><span class="n">mosquitto</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">mosquitto</span><span class="err">&#39;</span> <span class="p">(</span><span class="n">x86_64</span><span class="p">)</span>
</span><span class='line'><span class="mi">1463049645</span><span class="o">:</span> <span class="n">mosquitto</span> <span class="n">version</span> <span class="mf">1.4.8</span> <span class="p">(</span><span class="n">build</span> <span class="n">date</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">05</span><span class="o">-</span><span class="mi">12</span> <span class="mi">18</span><span class="o">:</span><span class="mi">36</span><span class="o">:</span><span class="mi">15</span><span class="o">+</span><span class="mi">0800</span><span class="p">)</span> <span class="n">starting</span>
</span><span class='line'><span class="mi">1463049645</span><span class="o">:</span> <span class="n">Using</span> <span class="k">default</span> <span class="n">config</span><span class="p">.</span>
</span><span class='line'><span class="mi">1463049645</span><span class="o">:</span> <span class="n">Opening</span> <span class="n">ipv4</span> <span class="n">listen</span> <span class="n">socket</span> <span class="n">on</span> <span class="n">port</span> <span class="mf">1883.</span>
</span><span class='line'><span class="mi">1463049645</span><span class="o">:</span> <span class="n">Opening</span> <span class="n">ipv6</span> <span class="n">listen</span> <span class="n">socket</span> <span class="n">on</span> <span class="n">port</span> <span class="mf">1883.</span>
</span><span class='line'><span class="mi">1463049659</span><span class="o">:</span> <span class="n">New</span> <span class="n">connection</span> <span class="n">from</span> <span class="mf">127.0.0.1</span> <span class="n">on</span> <span class="n">port</span> <span class="mf">1883.</span>
</span><span class='line'><span class="n">Process</span> <span class="mi">57680</span> <span class="n">stopped</span>
</span><span class='line'><span class="o">*</span> <span class="kr">thread</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="n">tid</span> <span class="o">=</span> <span class="mh">0xba449</span><span class="p">,</span> <span class="mh">0x0000000100018eb0</span> <span class="n">mosquitto</span><span class="err">`</span><span class="n">mqtt3_packet_handle</span><span class="p">(</span><span class="n">db</span><span class="o">=</span><span class="mh">0x000000010002f4f0</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="mh">0x0000000100201990</span><span class="p">)</span> <span class="o">+</span> <span class="mi">16</span> <span class="n">at</span> <span class="n">read_handle</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span><span class="mi">36</span><span class="p">,</span> <span class="n">queue</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">main</span><span class="o">-</span><span class="kr">thread</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">stop</span> <span class="n">reason</span> <span class="o">=</span> <span class="n">breakpoint</span> <span class="mf">1.1</span>
</span><span class='line'>    <span class="n">frame</span> <span class="err">#</span><span class="mi">0</span><span class="o">:</span> <span class="mh">0x0000000100018eb0</span> <span class="n">mosquitto</span><span class="err">`</span><span class="n">mqtt3_packet_handle</span><span class="p">(</span><span class="n">db</span><span class="o">=</span><span class="mh">0x000000010002f4f0</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="mh">0x0000000100201990</span><span class="p">)</span> <span class="o">+</span> <span class="mi">16</span> <span class="n">at</span> <span class="n">read_handle</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span><span class="mi">36</span>
</span><span class='line'>   <span class="mi">33</span>     
</span><span class='line'>   <span class="mi">34</span>     <span class="kt">int</span> <span class="n">mqtt3_packet_handle</span><span class="p">(</span><span class="k">struct</span> <span class="n">mosquitto_db</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mosquitto</span> <span class="o">*</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>   <span class="mi">35</span>     <span class="p">{</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="mi">36</span>       <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">context</span><span class="p">)</span> <span class="k">return</span> <span class="n">MOSQ_ERR_INVAL</span><span class="p">;</span>
</span><span class='line'>   <span class="mi">37</span>     
</span><span class='line'>   <span class="mi">38</span>         <span class="nf">switch</span><span class="p">((</span><span class="n">context</span><span class="o">-&gt;</span><span class="n">in_packet</span><span class="p">.</span><span class="n">command</span><span class="p">)</span><span class="o">&amp;</span><span class="mh">0xF0</span><span class="p">){</span>
</span><span class='line'>   <span class="mi">39</span>             <span class="k">case</span> <span class="nl">PINGREQ</span><span class="p">:</span>
</span><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">p</span> <span class="o">*</span><span class="n">context</span>
</span><span class='line'><span class="p">(</span><span class="n">mosquitto</span><span class="p">)</span> <span class="err">$</span><span class="mi">0</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">sock</span> <span class="o">=</span> <span class="mi">6</span>
</span><span class='line'>  <span class="k">protocol</span> <span class="o">=</span> <span class="n">mosq_p_invalid</span>
</span><span class='line'>  <span class="n">address</span> <span class="o">=</span> <span class="mh">0x0000000100200db0</span> <span class="s">&quot;127.0.0.1&quot;</span>
</span><span class='line'>  <span class="kt">id</span> <span class="o">=</span> <span class="mh">0x0000000000000000</span> <span class="o">&lt;</span><span class="n">no</span> <span class="n">value</span> <span class="n">available</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">username</span> <span class="o">=</span> <span class="mh">0x0000000000000000</span> <span class="o">&lt;</span><span class="n">no</span> <span class="n">value</span> <span class="n">available</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">password</span> <span class="o">=</span> <span class="mh">0x0000000000000000</span> <span class="o">&lt;</span><span class="n">no</span> <span class="n">value</span> <span class="n">available</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">keepalive</span> <span class="o">=</span> <span class="mi">60</span>
</span><span class='line'>  <span class="n">last_mid</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">state</span> <span class="o">=</span> <span class="n">mosq_cs_new</span>
</span><span class='line'>  <span class="n">last_msg_in</span> <span class="o">=</span> <span class="mi">39584</span>
</span><span class='line'>  <span class="n">last_msg_out</span> <span class="o">=</span> <span class="mi">39584</span>
</span><span class='line'>  <span class="p">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里安利一款代码阅读器Understand（和window下的SourceInsight很相似，都很强大！）<br>
lldb很多命令和gdb相似，具体更多命令可以在lldb中执行help进行查看。
更加详细的使用教程可以参考<a href="http://blog.csdn.net/shagoo/article/details/7910598">Mosquitto简要教程（安装/使用/测试）</a></p>

<h4>使用Wireshark抓取报文</h4>

<p>测试时使用的host一般为lo0，即本地回环地址，所以选择对应的过滤器：</p>

<p><img src="http://triplecc.github.io/images/Snip20160512_2.png" alt="" /></p>

<p>对端口进行过滤（这里使用的是1883端口）：</p>

<p><img src="http://triplecc.github.io/images/Snip20160512_3.png" alt="" /></p>

<p>然后连接客户端和服务端，就可以看见对应的MQTT报文了：</p>

<p><img src="http://triplecc.github.io/images/Snip20160512_4.png" alt="" /></p>

<p>在一些linux嵌入式环境下，无法通过Wireshark抓取报文，可以使用tcpdump抓取生成pcap文件，然后使用ftp等协议将文件传回到电脑，再使用Wireshark打开：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 这里还是用回环地址举例</span>
</span><span class='line'><span class="n">tcpdump</span> <span class="o">-</span><span class="n">i</span> <span class="n">lo0</span> <span class="err">&#39;</span><span class="n">tcp</span> <span class="n">port</span> <span class="mi">1883</span><span class="err">&#39;</span> <span class="o">-</span><span class="n">s</span> <span class="mi">65535</span> <span class="o">-</span><span class="n">w</span> <span class="n">packet</span><span class="p">.</span><span class="n">pcap</span>
</span></code></pre></td></tr></table></div></figure>


<h4>MQTT协议的实践</h4>

<h5>MQTT协议消息类型</h5>

<p>为了能够更好地熟悉协议，我用struct+protocol的方式重写了CocoaMQTT的代码（<a href="https://github.com/tripleCC/SwiftMQTT">SwiftMQTT</a>）。CocoaMQTT库使用的是传统的面相对象编程方式，所以阅读起来并没有什么障碍，只不过小小吐槽下代码风格。<br></p>

<p>MQTT协议总共有14种消息类型，使用枚举表示如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="nl">SwiftMQTTMessageType</span> <span class="p">:</span> <span class="kt">UInt8</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Connect</span>        <span class="o">=</span> <span class="mh">0x10</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">ConnAck</span>        <span class="o">=</span> <span class="mh">0x20</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Publish</span>        <span class="o">=</span> <span class="mh">0x30</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">PubAck</span>         <span class="o">=</span> <span class="mh">0x40</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">PubRec</span>         <span class="o">=</span> <span class="mh">0x50</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">PubRel</span>         <span class="o">=</span> <span class="mh">0x60</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">PubComp</span>        <span class="o">=</span> <span class="mh">0x70</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Subscribe</span>      <span class="o">=</span> <span class="mh">0x80</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">SubAck</span>         <span class="o">=</span> <span class="mh">0x90</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Unsubscribe</span>    <span class="o">=</span> <span class="mh">0xA0</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">UnsubBack</span>      <span class="o">=</span> <span class="mh">0xB0</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">PingReq</span>        <span class="o">=</span> <span class="mh">0xC0</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">PingResp</span>       <span class="o">=</span> <span class="mh">0xD0</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Disconnect</span>     <span class="o">=</span> <span class="mh">0xE0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上消息可由"固定报头"+&ldquo;可变报头&rdquo;+&ldquo;有效载荷"三部分组成。<br></p>

<p>固定报头由"类型+标志位"+&ldquo;剩余长度"组成，可以使用protocol表示第一部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="n">SwiftMQTTCommandProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">command</span><span class="p">:</span> <span class="kt">UInt8</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">messageType</span><span class="p">:</span> <span class="n">SwiftMQTTMessageType</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">dupFlag</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">qosLevel</span><span class="p">:</span> <span class="n">SwiftMQTTQosLevel</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="k">retain</span><span class="o">:</span> <span class="n">Bool</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">SwiftMQTTCommandProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * +---------------+----------+-----------+--------+</span>
</span><span class='line'><span class="cm">     * |    7 6 5 4    |     3    |    2 1    |   0    |</span>
</span><span class='line'><span class="cm">     * |  Message Type | DUP flag | QoS level | RETAIN |</span>
</span><span class='line'><span class="cm">     * +---------------+----------+-----------+--------+</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">messageType</span><span class="p">:</span> <span class="n">SwiftMQTTMessageType</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">SwiftMQTTMessageType</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">command</span> <span class="o">&amp;</span> <span class="mh">0xF0</span><span class="p">)</span> <span class="o">??</span> <span class="p">.</span><span class="n">Connect</span> <span class="p">}</span>
</span><span class='line'>        <span class="kr">set</span> <span class="p">{</span> <span class="n">command</span> <span class="o">=</span> <span class="n">newValue</span><span class="p">.</span><span class="n">rawValue</span> <span class="o">|</span> <span class="p">(</span><span class="n">command</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">dupFlag</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Bool</span><span class="p">((</span><span class="n">command</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x01</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="kr">set</span> <span class="p">{</span> <span class="n">command</span> <span class="o">=</span> <span class="p">(</span><span class="kt">UInt8</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">command</span> <span class="o">&amp;</span> <span class="mh">0xF7</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">qosLevel</span><span class="p">:</span> <span class="n">SwiftMQTTQosLevel</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">SwiftMQTTQosLevel</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="p">(</span><span class="n">command</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x03</span><span class="p">)</span> <span class="o">??</span> <span class="p">.</span><span class="n">AtMostOnce</span> <span class="p">}</span>
</span><span class='line'>        <span class="kr">set</span> <span class="p">{</span> <span class="n">command</span> <span class="o">=</span> <span class="n">newValue</span><span class="p">.</span><span class="n">rawValue</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="o">|</span> <span class="p">(</span><span class="n">command</span> <span class="o">&amp;</span> <span class="mh">0xF9</span> <span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="k">retain</span><span class="o">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Bool</span><span class="p">(</span><span class="n">command</span> <span class="o">&amp;</span> <span class="mh">0x01</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="kr">set</span> <span class="p">{</span> <span class="n">command</span> <span class="o">=</span> <span class="kt">UInt8</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">command</span> <span class="o">&amp;</span> <span class="mh">0xFE</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>剩余长度等于"可变报头"+&ldquo;有效载荷"各自的长度相加，这两者表示如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="n">SwiftMQTTVariableHeaderProtocol</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">var</span> <span class="nl">variableHeader</span><span class="p">:</span> <span class="bp">NSData</span> <span class="p">{</span><span class="kr">get</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">SwiftMQTTVariableHeaderProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">variableHeader</span><span class="p">:</span> <span class="bp">NSData</span> <span class="p">{</span> <span class="k">return</span> <span class="bp">NSData</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="n">SwiftMQTTPayloadProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">payload</span><span class="p">:</span> <span class="bp">NSData</span> <span class="p">{</span><span class="kr">get</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">SwiftMQTTPayloadProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">payload</span><span class="p">:</span> <span class="bp">NSData</span> <span class="p">{</span> <span class="k">return</span> <span class="bp">NSData</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了减少没有这两个部分的消息结构体的代码量，所以协议扩展中先返回空数据。<br>
然后就可以定义并实现一个固定报头的总协议了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="nl">SwiftMQTTFixedHeaderProtocol</span> <span class="p">:</span> <span class="n">SwiftMQTTCommandProtocol</span><span class="p">,</span> <span class="n">SwiftMQTTVariableHeaderProtocol</span><span class="p">,</span> <span class="n">SwiftMQTTPayloadProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">remainingLength</span><span class="p">:</span> <span class="kt">UInt32</span> <span class="p">{</span><span class="kr">get</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">SwiftMQTTFixedHeaderProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">remainingLength</span><span class="p">:</span> <span class="kt">UInt32</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">remainingLength</span> <span class="o">=</span> <span class="n">variableHeader</span><span class="p">.</span><span class="n">length</span> <span class="o">+</span> <span class="n">payload</span><span class="p">.</span><span class="n">length</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">remainingLength</span> <span class="o">&lt;=</span> <span class="n">kSwiftMQTTMaxRemainingLength</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">SMPrint</span><span class="p">(</span><span class="s">&quot;the size of remaining length field should be below \(kSwiftMQTTMaxRemainingLength).&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="kt">UInt32</span><span class="p">(</span><span class="n">kSwiftMQTTMaxRemainingLength</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kt">UInt32</span><span class="p">(</span><span class="n">remainingLength</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了所有发送消息的组成部分之后，就可以对数据进行编码了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="nl">SwiftMQTTMessageProtocol</span> <span class="p">:</span> <span class="n">SwiftMQTTFixedHeaderProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">data</span><span class="p">:</span> <span class="bp">NSData</span> <span class="p">{</span><span class="kr">get</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">SwiftMQTTMessageProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">data</span><span class="p">:</span> <span class="bp">NSData</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="bp">NSMutableData</span><span class="p">()</span>
</span><span class='line'>        <span class="n">data</span><span class="p">.</span><span class="n">appendByte</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>        <span class="n">data</span><span class="p">.</span><span class="n">appendData</span><span class="p">(</span><span class="n">remainingLength</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="n">data</span><span class="p">.</span><span class="n">appendData</span><span class="p">(</span><span class="n">variableHeader</span><span class="p">)</span>
</span><span class='line'>        <span class="n">data</span><span class="p">.</span><span class="n">appendData</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里以Connect报文为例，结合以上协议，构成一个有效的消息结构体。<br>
首先让SwiftMQTTConnectMessage遵守SwiftMQTTMessageProtocol协议，以此获得固定报头解析以及编码等能力：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">SwiftMQTTConnectMessage</span> <span class="p">:</span> <span class="n">SwiftMQTTMessageProtocol</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">public</span> <span class="k">var</span> <span class="n">command</span> <span class="o">=</span> <span class="kt">UInt8</span><span class="p">(</span><span class="mh">0x00</span><span class="p">)</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于command是固定报头类型和标志的必要载体，所以必须在结构体中实现。那么问题来了，MQTT协议的消息有14种，于是就需要在14种结构体种都实现一次这个成员变量，如果使用面向对象的方式，在公共子类中呈现这个成员变量就行了。这里是第一个让我感觉面向协议方式在实现MQTT不顺手的地方。<br>
Connect报文的可变报头中分为四个部分:协议名，协议级别，连接标志和保持连接。这几个部分可以使用两个协议来实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="n">SwiftMQTTConnectFlagProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">connectFlag</span><span class="p">:</span> <span class="kt">UInt8</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">usernameFlag</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">passwordFlag</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">willRetain</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">willQos</span><span class="p">:</span> <span class="n">SwiftMQTTQosLevel</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">willFlag</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">cleanSession</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span><span class="kr">get</span> <span class="kr">set</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">SwiftMQTTConnectFlagProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * +----------+----------+------------+---------+----------+--------------+----------+</span>
</span><span class='line'><span class="cm">     * |     7    |    6     |      5     |  4  3   |     2    |       1      |     0    |</span>
</span><span class='line'><span class="cm">     * | username | password | willretain | willqos | willflag | cleansession | reserved |</span>
</span><span class='line'><span class="cm">     * +----------+----------+------------+---------+----------+--------------+----------+</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">usernameFlag</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Bool</span><span class="p">((</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0x80</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">7</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="kr">set</span> <span class="p">{</span> <span class="n">connectFlag</span> <span class="o">=</span> <span class="p">(</span><span class="kt">UInt8</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0x7F</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">passwordFlag</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Bool</span><span class="p">((</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0x40</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="kr">set</span> <span class="p">{</span> <span class="n">connectFlag</span> <span class="o">=</span> <span class="p">(</span><span class="kt">UInt8</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0xBF</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">willRetain</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Bool</span><span class="p">((</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0x20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="kr">set</span> <span class="p">{</span> <span class="n">connectFlag</span> <span class="o">=</span> <span class="p">(</span><span class="kt">UInt8</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0xDF</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">willQos</span><span class="p">:</span> <span class="n">SwiftMQTTQosLevel</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">SwiftMQTTQosLevel</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="p">(</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0x18</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">??</span> <span class="p">.</span><span class="n">AtMostOnce</span> <span class="p">}</span>
</span><span class='line'>        <span class="kr">set</span> <span class="p">{</span> <span class="n">connectFlag</span> <span class="o">=</span> <span class="p">(</span><span class="kt">UInt8</span><span class="p">(</span><span class="n">newValue</span><span class="p">.</span><span class="n">rawValue</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0xE7</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">willFlag</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Bool</span><span class="p">((</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0x08</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="kr">set</span> <span class="p">{</span> <span class="n">connectFlag</span> <span class="o">=</span> <span class="p">(</span><span class="kt">UInt8</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0xFA</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">cleanSession</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Bool</span><span class="p">((</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0x04</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="kr">set</span> <span class="p">{</span> <span class="n">connectFlag</span> <span class="o">=</span> <span class="p">(</span><span class="kt">UInt8</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">connectFlag</span> <span class="o">&amp;</span> <span class="mh">0xFD</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protocol</span> <span class="n">SwiftMQTTClientProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">protocolName</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span><span class="kr">get</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">protocolLevel</span><span class="p">:</span> <span class="kt">UInt8</span> <span class="p">{</span><span class="kr">get</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">keepalive</span><span class="p">:</span> <span class="kt">UInt16</span> <span class="p">{</span><span class="kr">get</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">clientId</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span><span class="kr">get</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">account</span><span class="p">:</span> <span class="n">SwiftMQTTAccount</span><span class="o">?</span> <span class="p">{</span><span class="kr">get</span><span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">will</span><span class="p">:</span> <span class="n">SwiftMQTTWill</span><span class="o">?</span> <span class="p">{</span><span class="kr">get</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">SwiftMQTTClientProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">protocolName</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&quot;MQTT&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">protocolLevel</span><span class="p">:</span> <span class="kt">UInt8</span> <span class="p">{</span> <span class="k">return</span> <span class="mh">0x04</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">keepalive</span><span class="p">:</span> <span class="kt">UInt16</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">60</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样Connect报文结构体已经有了所有需要的协议，接下来主要的工作就是实现真正的variableHeader和payload了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">var</span> <span class="nl">variableHeader</span><span class="p">:</span> <span class="bp">NSData</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">variableHeader</span> <span class="o">=</span> <span class="bp">NSMutableData</span><span class="p">()</span>
</span><span class='line'>    <span class="n">variableHeader</span><span class="p">.</span><span class="n">appendMQTTString</span><span class="p">(</span><span class="n">protocolName</span><span class="p">)</span>
</span><span class='line'>    <span class="n">variableHeader</span><span class="p">.</span><span class="n">appendByte</span><span class="p">(</span><span class="n">protocolLevel</span><span class="p">)</span>
</span><span class='line'>    <span class="n">variableHeader</span><span class="p">.</span><span class="n">appendByte</span><span class="p">(</span><span class="n">connectFlag</span><span class="p">)</span>
</span><span class='line'>    <span class="n">variableHeader</span><span class="p">.</span><span class="n">appendUInt16</span><span class="p">(</span><span class="n">keepalive</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">variableHeader</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="k">var</span> <span class="nl">payload</span><span class="p">:</span> <span class="bp">NSData</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">payload</span> <span class="o">=</span> <span class="bp">NSMutableData</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// 客户端标识符-&gt;遗嘱主题-&gt;遗嘱消息-&gt;用户名-&gt;密码</span>
</span><span class='line'>    <span class="n">payload</span><span class="p">.</span><span class="n">appendMQTTString</span><span class="p">(</span><span class="n">clientId</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">willTopic</span> <span class="o">=</span> <span class="n">will</span><span class="o">?</span><span class="p">.</span><span class="n">willTopic</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">payload</span><span class="p">.</span><span class="n">appendMQTTString</span><span class="p">(</span><span class="n">willTopic</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">willMessage</span> <span class="o">=</span> <span class="n">will</span><span class="o">?</span><span class="p">.</span><span class="n">willMessage</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">payload</span><span class="p">.</span><span class="n">appendMQTTString</span><span class="p">(</span><span class="n">willMessage</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">username</span> <span class="o">=</span> <span class="n">account</span><span class="o">?</span><span class="p">.</span><span class="n">username</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">payload</span><span class="p">.</span><span class="n">appendMQTTString</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">password</span> <span class="o">=</span> <span class="n">account</span><span class="o">?</span><span class="p">.</span><span class="n">password</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">payload</span><span class="p">.</span><span class="n">appendMQTTString</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">payload</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，Connect的主要部分都已经构建完成。接下来以ConAck报文为例，实现从broker中返回的报文。<br>
由于需要解析从broker中返回的报文，所以定义一个返回消息类型协议：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="nl">SwiftMQTTAckMessageProtocol</span><span class="p">:</span> <span class="n">SwiftMQTTCommandProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">_</span> <span class="nl">bytes</span><span class="p">:</span> <span class="p">[</span><span class="kt">UInt8</span><span class="p">],</span> <span class="nl">command</span><span class="p">:</span> <span class="kt">UInt8</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终SwiftMQTTConnAckMessage结构体如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">struct</span> <span class="nl">SwiftMQTTConnAckMessage</span> <span class="p">:</span> <span class="n">SwiftMQTTAckMessageProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="n">command</span> <span class="o">=</span> <span class="kt">UInt8</span><span class="p">(</span><span class="mh">0x00</span><span class="p">)</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">sessionPresent</span><span class="p">:</span> <span class="n">Bool</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">var</span> <span class="nl">connectReturnCode</span><span class="p">:</span> <span class="n">SwiftMQTTConnectReturnCode</span>
</span><span class='line'>    <span class="n">public</span> <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">_</span> <span class="nl">bytes</span><span class="p">:</span> <span class="p">[</span><span class="kt">UInt8</span><span class="p">],</span> <span class="nl">command</span><span class="p">:</span> <span class="kt">UInt8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">bytes</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">2</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">sessionPresent</span> <span class="o">=</span> <span class="n">Bool</span><span class="p">(</span><span class="n">bytes</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>        <span class="n">connectReturnCode</span> <span class="o">=</span> <span class="n">SwiftMQTTConnectReturnCode</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">bytes</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">??</span> <span class="p">.</span><span class="n">Accepted</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">command</span> <span class="o">=</span> <span class="n">command</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里又产生了第二个让我不是很舒服的地方：在protocol extension中实现有效的init非常麻烦（暂且不论在protocol extension中实现init的必要性）。下面是一个不完全的实现方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">protocol</span> <span class="n">MessageProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">messageId</span> <span class="p">:</span> <span class="kt">UInt16</span> <span class="p">{</span> <span class="kr">get</span> <span class="kr">set</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">init</span><span class="p">()</span>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">_</span> <span class="nl">bytes</span><span class="p">:</span> <span class="p">[</span><span class="kt">UInt8</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="n">Message</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="n">_</span> <span class="nl">bytes</span><span class="p">:</span> <span class="p">[</span><span class="kt">UInt8</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="n">bytes</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">2</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">messageId</span> <span class="o">=</span> <span class="kt">UInt16</span><span class="p">(</span><span class="n">bytes</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span> <span class="o">+</span> <span class="kt">UInt16</span><span class="p">(</span><span class="n">bytes</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">Message</span><span class="p">:</span> <span class="n">MessageProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">messageId</span><span class="p">:</span> <span class="kt">UInt16</span>
</span><span class='line'>    <span class="k">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">messageId</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了能在protocol extension实现一个默认的init?(_ bytes: [UInt8])方法，就必须要多定义一个没什么意义的init()方法。这让我直接放弃了这个念头，转而直接在每个消息类型的struct中实现对应的解析init方法，虽然这样会让部分代码重复。<br>
至此，MQTT协议的消息类型实现差不多完成了，因为后续的12种消息和前面这2种大同小异。<br></p>

<h5>MQTT协议消息解析</h5>

<p>和CocoaMQTT一样，SwiftMQTT也是使用GCDAsyncSocket来进行socket通信。在调用GCDAsyncSocket实例的readData系列方法并读取到数据后，便可以从以下代理方法中解析读取到的数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">socket:</span><span class="p">(</span><span class="n">GCDAsyncSocket</span> <span class="o">*</span><span class="p">)</span><span class="nv">sock</span> <span class="nf">didReadData:</span><span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="nf">withTag:</span><span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="nv">tag</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，如果使用的是按照缓存排列每次读取固定子节的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">readDataToLength:</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="nv">length</span> <span class="nf">withTimeout:</span><span class="p">(</span><span class="n">NSTimeInterval</span><span class="p">)</span><span class="nv">timeout</span> <span class="nf">tag:</span><span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="nv">tag</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么只要有一次读取错误，就会影响到后续所有数据的读取。<br>
解析返回报文的主要方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">mutating</span> <span class="k">func</span> <span class="nf">unpackData</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="bp">NSData</span><span class="p">,</span> <span class="nl">part</span><span class="p">:</span> <span class="n">SwiftMQTTMessagePart</span><span class="p">,</span> <span class="nl">nextReader</span><span class="p">:</span><span class="n">SwiftMQTTMessageDecoderNextReader</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">bytesArray</span>
</span><span class='line'>    <span class="k">switch</span> <span class="n">part</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">Header</span><span class="p">:</span>
</span><span class='line'>        <span class="n">messageHeader</span> <span class="o">=</span> <span class="n">unpackHeader</span><span class="p">(</span><span class="n">bytes</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// 读取一个字节的剩余长度</span>
</span><span class='line'>        <span class="n">nextReader</span><span class="p">(</span><span class="nl">length</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nl">part</span><span class="p">:</span> <span class="p">.</span><span class="n">Length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">Length</span><span class="p">:</span>
</span><span class='line'>        <span class="n">messageLengthBytes</span><span class="p">.</span><span class="n">appendContentsOf</span><span class="p">(</span><span class="n">bytes</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// 如果最高位为0，则剩余长度已确定</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">Bool</span><span class="p">(</span><span class="n">bytes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x80</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 继续读取一个字节的剩余长度</span>
</span><span class='line'>            <span class="n">nextReader</span><span class="p">(</span><span class="nl">length</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nl">part</span><span class="p">:</span> <span class="p">.</span><span class="n">Length</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 获取剩余长度</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">messageLength</span> <span class="o">=</span> <span class="n">unpackLength</span><span class="p">(</span><span class="n">messageLengthBytes</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">messageLength</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 读取可变报头和payload</span>
</span><span class='line'>                <span class="n">nextReader</span><span class="p">(</span><span class="nl">length</span><span class="p">:</span> <span class="n">messageLength</span><span class="p">,</span> <span class="nl">part</span><span class="p">:</span> <span class="p">.</span><span class="n">Content</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 没有可变报头和payload，不需要再进行读取操作，直接解包</span>
</span><span class='line'>                <span class="n">unpackContent</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// 重置长度缓存</span>
</span><span class='line'>            <span class="n">messageLengthBytes</span><span class="p">.</span><span class="n">removeAll</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">Content</span><span class="p">:</span>
</span><span class='line'>        <span class="c1">// 解析可变报头和payload</span>
</span><span class='line'>        <span class="n">unpackContent</span><span class="p">(</span><span class="n">bytes</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>报文分三个部分进行读取。需要注意的是读取剩余长度时，需要循环读取一个字节，以便确定剩余长度的最高字节。</p>

<h4>小结</h4>

<p>最后对比各个协议库，如果需要使用到MQTT的大部分功能，那么阅读Mosquitto源码会是个不错的选择，毕竟其实现的功能还是相对完善的。<br>
而对于这次实践，总感觉有些地方使用面向协议没有面向对象来的更加简洁，不过这也是利弊的权衡吧，还是在可以接受的范围。</p>

<h4>参考链接</h4>

<p><a href="http://mosquitto.org/documentation/">MosquittoDocumentation</a><br>
<a href="https://mcxiaoke.gitbooks.io/mqtt-cn/content/">MQTT中文文档</a><br>
<a href="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html">MQTT英文文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更加快速地设置Frame]]></title>
    <link href="http://triplecc.github.io/blog/2016-04-23-geng-jia-kuai-su-di-she-zhi-frame/"/>
    <updated>2016-04-23T13:14:55+08:00</updated>
    <id>http://triplecc.github.io/blog/geng-jia-kuai-su-di-she-zhi-frame</id>
    <content type="html"><![CDATA[<p>由于现在手头上的项目是基于frame开发的，没有xib或者storyboard，没有使用自动布局，所以排布界面时总是显得很繁琐。<br></p>

<h4>令人蛋疼的frame布局</h4>

<p>老代码对界面的坐标尺寸设置都是通过下面的方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>UIView * mainView = [[UIView alloc] initWithFrame:CGRectMake(0, self.height, self.width, MAIN_HEIGHT)];
</span><span class='line'>[mainView setBackgroundColor:[UIColor whiteColor]];
</span><span class='line'>[self addSubview:mainView];
</span><span class='line'>self.mainView = mainView;
</span><span class='line'>
</span><span class='line'>UIView * opertionMenu = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.width, 45)];
</span><span class='line'>[opertionMenu setBackgroundColor:[UIColor whiteColor]];
</span><span class='line'>[mainView addSubview:opertionMenu];
</span><span class='line'>
</span><span class='line'>UIView * line = [[UIView alloc] initWithFrame:CGRectMake(0, 44, self.width, 1)];
</span><span class='line'>[line setBackgroundColor:[UIColor colorWithHex:0xe9e9e9]];
</span><span class='line'>[opertionMenu addSubview:line];
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>这些坐标设置工作都是在初始化，也就是init系列方法中完成的。这样做的弊端很明显，复用性很差，如果还是按照这种方式的话，每扩展一种界面类型，就要新增一个init方法。久而久之，冗余代码会越来越多，新增特性想重用这块控件的话，需要做比较多的无用功。<br></p>

<!--more-->


<p>由于上面代码很多针对坐标尺寸的设置都是在init系列方法中完成的，所以很少有单独修改frame中的某个成员的操作，不过旧代码还是提供了快速设置某个成员的方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface UIView (Size)
</span><span class='line'>...
</span><span class='line'>- (CGFloat)width;
</span><span class='line'>- (CGFloat)height;
</span><span class='line'>- (CGFloat)minX;
</span><span class='line'>- (CGFloat)midX;
</span><span class='line'>- (CGFloat)maxX;
</span><span class='line'>- (CGFloat)minY;
</span><span class='line'>- (CGFloat)midY;
</span><span class='line'>- (CGFloat)maxY;
</span><span class='line'>...
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>很明显地看出，这种分类命名是有问题的（这也是直接导致我后续没有引入masonry的诱因之一，旧代码中过多的使用了以上分类，和简易的masonry用法即没有mas前缀的方法产生的冲突过多）。<br></p>

<p>于是我新增了一些快速设置的坐标的分类方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface UIView (Size)
</span><span class='line'>...
</span><span class='line'>@property (assign, nonatomic) CGFloat bq_y;
</span><span class='line'>@property (assign, nonatomic) CGFloat bq_x;
</span><span class='line'>@property (assign, nonatomic) CGFloat bq_width;
</span><span class='line'>@property (assign, nonatomic) CGFloat bq_height;
</span><span class='line'>@property (assign, nonatomic) CGFloat bq_centerX;
</span><span class='line'>@property (assign, nonatomic) CGFloat bq_centerY;
</span><span class='line'>@property (assign, nonatomic) CGPoint bq_origin;
</span><span class='line'>@property (assign, nonatomic) CGSize bq_size;
</span><span class='line'>@property (assign, nonatomic) CGFloat bq_maxX;
</span><span class='line'>@property (assign, nonatomic) CGFloat bq_maxY;
</span><span class='line'>@property (assign, nonatomic, readonly) CGPoint bq_subCenter;
</span><span class='line'>@property (assign, nonatomic, readonly) CGFloat bq_subCenterX;
</span><span class='line'>@property (assign, nonatomic, readonly) CGFloat bq_subCenterY;
</span><span class='line'>- (instancetype)bq_sizeToFit;
</span><span class='line'>...
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>于是代码中就多了另外一种设置frame的书写格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)adjustSubviewFrame {
</span><span class='line'>    ...
</span><span class='line'>    if (!_timeLabel.hidden) {
</span><span class='line'>        [_timeLabel sizeToFit];
</span><span class='line'>        CGFloat timeLabelLRMargin = 5;
</span><span class='line'>        CGFloat timeLabelTopMaigin = BQMessageCommonMargin;
</span><span class='line'>        _timeLabel.bq_size = CGSizeMake(_timeLabel.bq_width + 2 * timeLabelLRMargin, BQMessageTimeHeight);
</span><span class='line'>        _timeLabel.center = CGPointMake(self.contentView.bq_centerX, timeLabelTopMaigin + _timeLabel.bq_height * 0.5);
</span><span class='line'>    } else {
</span><span class='line'>        _timeLabel.frame = CGRectZero;
</span><span class='line'>    }
</span><span class='line'>    CGFloat headImageEdgeMargin = BQMessageCommonMargin;
</span><span class='line'>    CGFloat headImageViewX = _isSelf ? self.contentView.bq_width - _headIconImageView.bq_width - headImageEdgeMargin : headImageEdgeMargin;
</span><span class='line'>    CGFloat headImageViewY = CGRectGetMaxY(_timeLabel.frame) + headImageEdgeMargin;
</span><span class='line'>    _headIconImageView.bq_origin = CGPointMake(headImageViewX, headImageViewY);
</span><span class='line'>    if (!_identityButton.hidden) {
</span><span class='line'>        CGFloat identifyButtonTopMargin = BQMessageHeaderBottomMargin;
</span><span class='line'>        CGFloat identifyButtonY = CGRectGetMaxY(_headIconImageView.frame) + identifyButtonTopMargin;
</span><span class='line'>        _identityButton.bq_y = identifyButtonY;
</span><span class='line'>        _identityButton.bq_centerX = _headIconImageView.bq_centerX;
</span><span class='line'>    }
</span><span class='line'>    CGFloat nameLabelToHeadImageTopMargin = 0;
</span><span class='line'>    if (!_nameLabel.hidden) {
</span><span class='line'>        [_nameLabel sizeToFit];
</span><span class='line'>        CGFloat nameLabelX = CGRectGetMaxX(_headIconImageView.frame) + headImageEdgeMargin;
</span><span class='line'>        CGFloat nameLabelY = _headIconImageView.bq_y + nameLabelToHeadImageTopMargin;
</span><span class='line'>        _nameLabel.bq_origin = CGPointMake(nameLabelX, nameLabelY);
</span><span class='line'>    }
</span><span class='line'>    ...
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>把设置可变坐标的代码独立出来放进一个方法中增强的控件的复用性，但是也无形中增加了布局代码代码量，而且估计第二个人来看这个计算过程也会很头大。<br></p>

<p>能不能采用链式的方式简化对界面进行frame布局的代码？于是我借鉴了masonry的实现方式，弄了一套快速设置frame的代码。最终使用的效果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIView *v1 = [UIView new];
</span><span class='line'>v1.tpc_quickAttribute
</span><span class='line'>.referToView(self.view)
</span><span class='line'>.addToView(self.view)
</span><span class='line'>.alignOrigin(CGPointMake(10, 20))
</span><span class='line'>.alignSize(CGSizeMake(-200, -400))
</span><span class='line'>.backgroundColor([UIColor redColor]);
</span><span class='line'>
</span><span class='line'>UIView *v2 = [UIView new];
</span><span class='line'>v2.tpc_quickAttribute
</span><span class='line'>.referToView(v1)
</span><span class='line'>.addToView(v1)
</span><span class='line'>.size(CGSizeMake(20, 20))
</span><span class='line'>.alignCenter(pzero)
</span><span class='line'>.backgroundColor([UIColor orangeColor]);
</span><span class='line'>
</span><span class='line'>UIView *v3 = [UIView new];
</span><span class='line'>v3.tpc_quickAttribute
</span><span class='line'>.addToView(self.view)
</span><span class='line'>.referToView(v1)
</span><span class='line'>.alignSize(CGSizeMake(20, 20))
</span><span class='line'>.referToView(self.view)
</span><span class='line'>.alignRightToRight(20)
</span><span class='line'>.alignBottomToBottom(20)
</span><span class='line'>.backgroundColor([[UIColor grayColor] colorWithAlphaComponent:0.4]);</span></code></pre></td></tr></table></div></figure>


<p>顿时感觉整个世界又变清新了。。。<br></p>

<h4>实现的思路<br></h4>

<p>首先，给UIView绑定一个布局实例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;UIView+TPCQuickAttribute.m&gt;
</span><span class='line'>
</span><span class='line'>- (TPCQuickAttribute *)tpc_quickAttribute {
</span><span class='line'>    TPCQuickAttribute *quickAttribute = objc_getAssociatedObject(self, _cmd);
</span><span class='line'>    if (!quickAttribute) {
</span><span class='line'>        quickAttribute = [[TPCQuickAttribute alloc] initWithView:self];
</span><span class='line'>        objc_setAssociatedObject(self, _cmd, quickAttribute, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
</span><span class='line'>    }
</span><span class='line'>    return quickAttribute;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这个TPCQuickAttribute就是进行快速设置frame的关键：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;TPCQuickAttribute.h&gt;
</span><span class='line'>
</span><span class='line'>#if TPC_OPEN_LOG == 1
</span><span class='line'>#ifdef DEBUG
</span><span class='line'>#define TPCLayoutLog(s, ... ) NSLog( @"&lt;%s:(%d)&gt; %@", __FUNCTION__, __LINE__, [NSString stringWithFormat:(s), ##__VA_ARGS__] ) 
</span><span class='line'>#else
</span><span class='line'>#define TPCLayoutLog(s, ... )
</span><span class='line'>#endif
</span><span class='line'>#else
</span><span class='line'>#define TPCLayoutLog(s, ... )
</span><span class='line'>#endif
</span><span class='line'>@interface TPCQuickAttribute : NSObject &lt;TPCQuickProtcol&gt;
</span><span class='line'>- (instancetype)initWithView:(UIView *)view;
</span><span class='line'>@property (weak, nonatomic, readonly) UIView *view;
</span><span class='line'>@property (weak, nonatomic) UIView *referView;
</span><span class='line'>@property (assign, nonatomic, readonly) BOOL referViewIsSuperview;
</span><span class='line'>
</span><span class='line'>- (TPCQuickAttribute *(^)(UIView * view))referToView;
</span><span class='line'>- (TPCQuickAttribute *(^)(UIView *))addToView;
</span><span class='line'>- (void)end;
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>这个类包含了要进行布局的view对象，还有进行参考的referView。<br>
一旦设置好了这两者，就可以进行下一步操作了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;TPCQuickAttribute+Frame.m&gt;
</span><span class='line'>...
</span><span class='line'>- (TPCQuickAttribute *(^)(CGFloat))alignLeftToLeft {
</span><span class='line'>    return ^TPCQuickAttribute *(CGFloat offset) {
</span><span class='line'>        return self.x(self.referViewX + offset);
</span><span class='line'>    };
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (TPCQuickAttribute *(^)(CGFloat))alignLeftToRight {
</span><span class='line'>    return ^TPCQuickAttribute *(CGFloat offset) {
</span><span class='line'>        return self.alignLeftToLeft(self.referView.frame.size.width + offset);
</span><span class='line'>    };
</span><span class='line'>}
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>上面代码参考referView，对view的x坐标进行设置。对于这种链式的实现原理，就是利用了返回的block是一个无名函数，可以通过( )执行，这样对上面的方法进行调用，产生以下效果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xxx.alignLeftToLeft(0)</span></code></pre></td></tr></table></div></figure>


<p>了解了block的使用方式就没什么复杂的了。<br>
既然可以快速设置frame，那么常用属性呢？再增加一个分类：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;TPCQuickAttribute+Appearance.m&gt;
</span><span class='line'>...
</span><span class='line'>- (TPCQuickAttribute *(^)(UIColor *))backgroundColor {
</span><span class='line'>    return ^TPCQuickAttribute *(UIColor *backgroundColor) {
</span><span class='line'>        self.view.backgroundColor = backgroundColor;
</span><span class='line'>        return self;
</span><span class='line'>    };
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (TPCQuickAttribute *(^)(UIViewContentMode))contentMode {
</span><span class='line'>    return ^TPCQuickAttribute *(UIViewContentMode contentMode) {
</span><span class='line'>        self.view.contentMode = contentMode;
</span><span class='line'>        return self;
</span><span class='line'>    };
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>同理，综合上面的代码，就可以链式地写出设置frame的代码了。<br></p>

<h4>小结</h4>

<p>当然，现在有了自动布局，一般界面已经不需要使用frame进行布局了，代码的自动布局可以使用masonry，我私下也喜欢用storyboard+xib的方式写一些小demo。<br>
所以以上代码纯属玩票＝＝。<br>
<a href="https://github.com/tripleCC/TPCQuickAttribute">代码链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SDWebImage设置大尺寸图片崩溃问题]]></title>
    <link href="http://triplecc.github.io/blog/2016-03-17-sdwebimageshe-zhi-da-chi-cun-tu-pian-beng-kui-wen-ti/"/>
    <updated>2016-03-17T18:41:01+08:00</updated>
    <id>http://triplecc.github.io/blog/sdwebimageshe-zhi-da-chi-cun-tu-pian-beng-kui-wen-ti</id>
    <content type="html"><![CDATA[<p>昨天产品在teambition上提了一个bug：点击特定的页面app闪退。<br>
我很是纳闷，因为通过其它类型索引进入的详情页面都不会出现这样的情况，为什么偏偏是这个页面？还是因为memory warning而闪退？而且内存不是慢慢增加，而是从80M左右激增到600M＋<br>
接着我查看了进入这个页面时获取的json，仔细观察后，发现并没有特别的地方。于是我决定使用instruments的Allocations查看到底是什么操作占用了如此庞大的内存。<br>
进入界面之后，展示的界面如下图：</p>

<!--more-->


<p><img src="http://triplecc.github.io/images/Snip20160317_2.png" alt="" /></p>

<p>追踪到底是哪个函数调用申请了这么多内存：</p>

<p><img src="http://triplecc.github.io/images/Snip20160317_4.png" alt="" /></p>

<p>根据经验，考虑到SDWebImage是直接使用原图进行渲染，所以初步可以断定是图片渲染导致内存的问题。<br>
于是我查看了这个界面唯一的图片：</p>

<p><img src="http://triplecc.github.io/images/Snip20160317_1.png" alt="" /></p>

<p><img src="http://triplecc.github.io/images/Snip20160317_5.png" alt="" /></p>

<p>&hellip;WTF&hellip;<br>
问了后台，这个图片是企业上传的，最大不超过2M，而且给App的图片并没有经过压缩处理。接着我又查看了安卓端，发现他们并没有显示出这一张logo。。。<br></p>

<p><a href="http://cv.qiaobutang.com//uploads//company_logos//2014//12//12//20//548ae4240cf23e379a82db93//original.png">图片链接</a></p>

<p>虽然图片只有1.8M，但是像素为15497*10166，iOS解压到内存并显示所需要的内存通过以下公式计算出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define bytesPerMB 1048576.0f </span>
</span><span class='line'><span class="c1">// 这里针对32色来说 (32 / 8)</span>
</span><span class='line'><span class="cp">#define bytesPerPixel 4.0f</span>
</span><span class='line'><span class="cp">#define pixelsPerMB ( bytesPerMB / bytesPerPixel )</span>
</span><span class='line'>
</span><span class='line'> <span class="n">Width</span> <span class="n">x</span> <span class="n">Height</span> <span class="o">/</span> <span class="n">pixelsPerMB</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以大概可以计算出这张图片需要600M左右的内存进行解码显示。</p>

<p>google了下，最多的解决方式是利用UIGraphicsBeginImageContext对图片进行裁剪后渲染：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'><span class="n">CGContextClearRect</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGContextSetInterpolationQuality</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">drawInRect</span><span class="p">:</span><span class="n">drawRect</span> <span class="nl">blendMode</span><span class="p">:</span><span class="n">kCGBlendModeNormal</span> <span class="nl">alpha</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然这样做最终会让内存稳定在80M左右，但是在回落之前，内存会有一小段时间上升至300M左右。也就是说，这种方法在处理10000*10000px的图片时，还是有崩溃的危险的。<br></p>

<p>然后我又尝试了苹果提供的使用ImageIO进行缩小图片的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CGImageRef</span> <span class="nf">MyCreateThumbnailImageFromData</span> <span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span> <span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">imageSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CGImageRef</span>        <span class="n">myThumbnailImage</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGImageSourceRef</span>  <span class="n">myImageSource</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CFDictionaryRef</span>   <span class="n">myOptions</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CFStringRef</span>       <span class="n">myKeys</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CFTypeRef</span>         <span class="n">myValues</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CFNumberRef</span>       <span class="n">thumbnailSize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create an image source from NSData; no options.</span>
</span><span class='line'>    <span class="n">myImageSource</span> <span class="o">=</span> <span class="n">CGImageSourceCreateWithData</span><span class="p">((</span><span class="n">CFDataRef</span><span class="p">)</span><span class="n">data</span><span class="p">,</span>
</span><span class='line'>                                                <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Make sure the image source exists before continuing.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">myImageSource</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Image source is NULL.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span>  <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Package the integer as a  CFNumber object. Using CFTypes allows you</span>
</span><span class='line'>    <span class="c1">// to more easily create the options dictionary later.</span>
</span><span class='line'>    <span class="n">thumbnailSize</span> <span class="o">=</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kCFNumberIntType</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">imageSize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set up the thumbnail options.</span>
</span><span class='line'>    <span class="n">myKeys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">kCGImageSourceCreateThumbnailWithTransform</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myValues</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFTypeRef</span><span class="p">)</span><span class="n">kCFBooleanTrue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myKeys</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">kCGImageSourceCreateThumbnailFromImageIfAbsent</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myValues</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFTypeRef</span><span class="p">)</span><span class="n">kCFBooleanTrue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myKeys</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">kCGImageSourceThumbnailMaxPixelSize</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myValues</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFTypeRef</span><span class="p">)</span><span class="n">thumbnailSize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">myOptions</span> <span class="o">=</span> <span class="n">CFDictionaryCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">**</span><span class="p">)</span> <span class="n">myKeys</span><span class="p">,</span>
</span><span class='line'>                                   <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">**</span><span class="p">)</span> <span class="n">myValues</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                                   <span class="o">&amp;</span><span class="n">kCFTypeDictionaryKeyCallBacks</span><span class="p">,</span>
</span><span class='line'>                                   <span class="o">&amp;</span> <span class="n">kCFTypeDictionaryValueCallBacks</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create the thumbnail image using the specified options.</span>
</span><span class='line'>    <span class="n">myThumbnailImage</span> <span class="o">=</span> <span class="n">CGImageSourceCreateThumbnailAtIndex</span><span class="p">(</span><span class="n">myImageSource</span><span class="p">,</span>
</span><span class='line'>                                                           <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                                           <span class="n">myOptions</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Release the options dictionary and the image source</span>
</span><span class='line'>    <span class="c1">// when you no longer need them.</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">thumbnailSize</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">myOptions</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">myImageSource</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Make sure the thumbnail image exists before continuing.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">myThumbnailImage</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Thumbnail image not created from image source.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">myThumbnailImage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果和使用UIGraphicsBeginImageContext一样，会有一个内存波峰。<br></p>

<p>最终还是通过苹果找到了对应的解决方案：
<a href="https://developer.apple.com/library/ios/samplecode/LargeImageDownsizing/">LargeImageDownsizing</a>(最终尝试后只对jpg有效)<br>
在stackoverflow上用蹩脚的书面英文也获取了对应的方案：
<a href="http://stackoverflow.com/questions/36031808/app-crashed-when-i-display-a-large-image-by-uiimageview/36032154#36032154">App crashed when I display a large image by UIImageView</a></p>

<p>不过最终我还是采用了和安卓端一样的处理方法（考虑到后台以后会进行图片裁剪）。因为是针对所有显示图片的地方，所以我给UIImageView添加了一个分类来对图片大小进行限制：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="bp">UIImageView</span> <span class="nl">(Extension)</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="kt">Class</span> <span class="k">class</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="k">class</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">SEL</span> <span class="n">origionSel</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">setImage</span><span class="p">:);</span>
</span><span class='line'>        <span class="kt">SEL</span> <span class="n">swizzlingSel</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">bq_setImage</span><span class="p">:);</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">origionMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">origionSel</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">swizzlingMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">swizzlingSel</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">BOOL</span> <span class="n">hasAdded</span> <span class="o">=</span> <span class="n">class_addMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">origionSel</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">swizzlingMethod</span><span class="p">),</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">swizzlingMethod</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">hasAdded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">class_replaceMethod</span><span class="p">(</span><span class="k">class</span><span class="p">,</span> <span class="n">swizzlingSel</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">origionMethod</span><span class="p">),</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">origionMethod</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">origionMethod</span><span class="p">,</span> <span class="n">swizzlingMethod</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">bq_setImage:</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">maxImageWH</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="n">maxImageWH</span> <span class="o">||</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">&gt;</span> <span class="n">maxImageWH</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">image</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">placeholder</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">bq_setImage</span><span class="p">:</span><span class="n">image</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setPlaceholder:</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">placeholder</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">placeholder</span><span class="p">),</span> <span class="n">placeholder</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">placeholder</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在宽度或者高度可能超过3000的地方，提前设置placeholder，否则显示的将是一个空白UIImageView。<br>
对于苹果提供的那种方法，后面再继续研究下，和<a href="https://github.com/ibireme/YYWebImage">YYWebImage</a>的显示方式有点像，都是进行逐步显示，而不是直接对整个原图进行渲染。</p>

<h2>2016-9-12 新动态</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'><span class="n">CGContextClearRect</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGContextSetInterpolationQuality</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">drawInRect</span><span class="p">:</span><span class="n">drawRect</span> <span class="nl">blendMode</span><span class="p">:</span><span class="n">kCGBlendModeNormal</span> <span class="nl">alpha</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码针对jpg是有效的，针对png会出现原来说的那种情况。</p>

<h2>2016-9-23 新动态＝＝，我傻逼了！</h2>

<p>嗯，苹果提供的方法是可行的，下面代码创建字典的时候漏了一个限定图片大小的键值对。＝＝|</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CGImageRef</span> <span class="nf">MyCreateThumbnailImageFromData</span> <span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span> <span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">imageSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CGImageRef</span>        <span class="n">myThumbnailImage</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGImageSourceRef</span>  <span class="n">myImageSource</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CFDictionaryRef</span>   <span class="n">myOptions</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CFStringRef</span>       <span class="n">myKeys</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CFTypeRef</span>         <span class="n">myValues</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CFNumberRef</span>       <span class="n">thumbnailSize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create an image source from NSData; no options.</span>
</span><span class='line'>    <span class="n">myImageSource</span> <span class="o">=</span> <span class="n">CGImageSourceCreateWithData</span><span class="p">((</span><span class="n">CFDataRef</span><span class="p">)</span><span class="n">data</span><span class="p">,</span>
</span><span class='line'>                                                <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Make sure the image source exists before continuing.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">myImageSource</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Image source is NULL.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span>  <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Package the integer as a  CFNumber object. Using CFTypes allows you</span>
</span><span class='line'>    <span class="c1">// to more easily create the options dictionary later.</span>
</span><span class='line'>    <span class="n">thumbnailSize</span> <span class="o">=</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kCFNumberIntType</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">imageSize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set up the thumbnail options.</span>
</span><span class='line'>    <span class="n">myKeys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">kCGImageSourceCreateThumbnailWithTransform</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myValues</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFTypeRef</span><span class="p">)</span><span class="n">kCFBooleanTrue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myKeys</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">kCGImageSourceCreateThumbnailFromImageIfAbsent</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myValues</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFTypeRef</span><span class="p">)</span><span class="n">kCFBooleanTrue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myKeys</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">kCGImageSourceThumbnailMaxPixelSize</span><span class="p">;</span>
</span><span class='line'>    <span class="n">myValues</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFTypeRef</span><span class="p">)</span><span class="n">thumbnailSize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 就是这里，numValues应该是3，不是2。＝＝</span>
</span><span class='line'>    <span class="n">myOptions</span> <span class="o">=</span> <span class="n">CFDictionaryCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">**</span><span class="p">)</span> <span class="n">myKeys</span><span class="p">,</span>
</span><span class='line'>                                   <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">**</span><span class="p">)</span> <span class="n">myValues</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>                                   <span class="o">&amp;</span><span class="n">kCFTypeDictionaryKeyCallBacks</span><span class="p">,</span>
</span><span class='line'>                                   <span class="o">&amp;</span> <span class="n">kCFTypeDictionaryValueCallBacks</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create the thumbnail image using the specified options.</span>
</span><span class='line'>    <span class="n">myThumbnailImage</span> <span class="o">=</span> <span class="n">CGImageSourceCreateThumbnailAtIndex</span><span class="p">(</span><span class="n">myImageSource</span><span class="p">,</span>
</span><span class='line'>                                                           <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                                           <span class="n">myOptions</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Release the options dictionary and the image source</span>
</span><span class='line'>    <span class="c1">// when you no longer need them.</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">thumbnailSize</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">myOptions</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">myImageSource</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Make sure the thumbnail image exists before continuing.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">myThumbnailImage</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Thumbnail image not created from image source.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">myThumbnailImage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一篇关于这个的文章<a href="http://pulkitgoyal.in/resizing-high-resolution-images-on-ios-without-memory-issues/">resizing-high-resolution-images-on-ios-without-memory-issues</a>。</p>

<p>大体的意思就是有以下几点:</p>

<ul>
<li>解码PNG占用了高内存</li>
<li>CoreGraphic缩放图片时，还是会对图片进行解码</li>
<li>需要在不解码的情况下对图片进行缩放</li>
<li>ImageIO的ImageSource可以满足这一点，不解码并可以缩放</li>
</ul>


<p>代码差不多是这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CGImageRef</span> <span class="nf">thumbnailImageWithData</span><span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="bp">NSInteger</span> <span class="n">imageSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CGImageSourceRef</span> <span class="n">imageSource</span> <span class="o">=</span> <span class="n">CGImageSourceCreateWithData</span><span class="p">((</span><span class="n">CFDataRef</span><span class="p">)</span><span class="n">data</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFDictionaryRef</span> <span class="n">options</span> <span class="o">=</span>
</span><span class='line'>        <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFDictionaryRef</span><span class="p">)</span> <span class="l">@{</span>
</span><span class='line'>                                     <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nl">kCGImageSourceCreateThumbnailWithTransform</span> <span class="p">:</span> <span class="m">@YES</span><span class="p">,</span>
</span><span class='line'>                                     <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nl">kCGImageSourceCreateThumbnailFromImageAlways</span> <span class="p">:</span> <span class="m">@YES</span><span class="p">,</span>
</span><span class='line'>                                     <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nl">kCGImageSourceThumbnailMaxPixelSize</span> <span class="p">:</span> <span class="l">@(</span><span class="n">imageSize</span><span class="l">)</span>
</span><span class='line'>                                     <span class="l">}</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGImageRef</span> <span class="n">thumbnail</span> <span class="o">=</span> <span class="n">CGImageSourceCreateThumbnailAtIndex</span><span class="p">(</span><span class="n">imageSource</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">options</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">imageSource</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">thumbnail</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的话，最终的解决方案差不多可以是这样的：</p>

<ul>
<li>用MethodSwizzling替换UIImageView的setImage方法</li>
<li>然后判断当前图片大小，如果大于某个限制，就用上面的函数缩放图片</li>
</ul>


<p>嗯，就酱紫。还是要理解原理，然后细心点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识碎片五]]></title>
    <link href="http://triplecc.github.io/blog/2016-03-09-ioszhi-shi-sui-pian-wu/"/>
    <updated>2016-03-09T15:31:32+08:00</updated>
    <id>http://triplecc.github.io/blog/ioszhi-shi-sui-pian-wu</id>
    <content type="html"><![CDATA[<p>1、iOS中文斜体<br>
2、Swift中替代#ifdef以及关于Target管理<br>
3、UIRefreshControl下拉抖动<br>
4、聊天界面输入框换行抖动<br>
5、UITapGestureRecognizer与tableView:didSelectRowAtIndexPath:<br></p>

<!--more-->


<h2>iOS中文斜体</h2>

<p>iOS系统UIFont中的斜体对中文并不支持，所以需要用另一种方式实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">CGAffineTransform</span> <span class="n">matrix</span> <span class="o">=</span> <span class="n">CGAffineTransformMake</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tanf</span><span class="p">(</span><span class="mi">15</span> <span class="o">*</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">M_PI</span> <span class="o">/</span> <span class="mi">180</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="bp">UIFontDescriptor</span> <span class="o">*</span><span class="n">desc</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIFontDescriptor</span> <span class="nl">fontDescriptorWithName</span><span class="p">:</span><span class="s">@&quot;Heiti SC Medium&quot;</span> <span class="nl">matrix</span><span class="p">:</span><span class="n">matrix</span><span class="p">];</span>
</span><span class='line'><span class="n">textView</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">fontWithDescriptor</span><span class="p">:</span><span class="n">desc</span> <span class="nl">size</span><span class="p">:</span><span class="mi">17</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>答案来自：
<a href="http://stackoverflow.com/questions/21009957/italic-font-not-work-for-chinese-japanese-korean-on-ios-7">italic-font-not-work-for-chinese-japanese-korean-on-ios-7</a></p>

<p>另外，使用富文本属性<code>NSObliquenessAttributeName</code>也可以改变倾斜度，不过<code>TTTAttributeLabel</code>并不支持，所以只能用第一种方法。</p>

<h2>Swift中替代#ifdef以及关于Target管理</h2>

<p><a href="http://stackoverflow.com/questions/24003291/ifdef-replacement-in-swift-language">ifdef-replacement-in-swift-language</a></p>

<p>复制Target：</p>

<p><a href="http://stackoverflow.com/questions/27283716/xcode-6-how-to-rename-copied-target">xcode-6-how-to-rename-copied-target</a></p>

<h2>UIRefreshControl下拉抖动</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Because</span> <span class="n">the</span> <span class="n">refresh</span> <span class="n">control</span> <span class="n">is</span> <span class="n">specifically</span> <span class="n">designed</span> <span class="k">for</span> <span class="n">use</span> <span class="k">in</span> <span class="n">a</span> <span class="n">table</span> <span class="n">view</span> <span class="n">that</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">managed</span> <span class="n">by</span> <span class="n">a</span> <span class="n">table</span> <span class="n">view</span> <span class="n">controller</span><span class="p">,</span> <span class="n">using</span> <span class="n">it</span> <span class="k">in</span> <span class="n">a</span> <span class="n">different</span> <span class="n">context</span> <span class="n">can</span> <span class="n">result</span> <span class="k">in</span> <span class="n">undefined</span> <span class="n">behavior</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上是文档中对UIRefreshControl的部分描述，可见其是专门针对UITableViewController的，用在其它地方容易出现不可知的问题。</p>

<p>错误情况：<br>
在UIViewController中添加UIScrollView(或者任何子类)，再把UIRefreshControl作为其子控件。<br>
AppCoda上面有篇关于<a href="http://www.appcoda.com/custom-pull-to-refresh/">自定义PullRefresh的文章</a>，因为其实现原理和以下一致，最终的效果也会有这种问题。当然，我的<a href="https://github.com/tripleCC/GanHuoCode">干货</a>下拉参考的就是这篇文章，所以也会存在这种瑕疵。让我比较郁闷的是TestFlight，苹果自家的App也会出现这种情况。<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="n">var</span> <span class="nl">scrollView</span><span class="p">:</span> <span class="bp">UIScrollView</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="n">rride</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">refresh</span> <span class="o">=</span> <span class="bp">UIRefreshControl</span><span class="p">()</span>
</span><span class='line'>    <span class="n">refresh</span><span class="p">.</span><span class="n">addTarget</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">refreshAction</span><span class="p">),</span> <span class="nl">forControlEvents</span><span class="p">:</span> <span class="p">.</span><span class="n">ValueChanged</span><span class="p">)</span>
</span><span class='line'>    <span class="n">scrollView</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">refresh</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">refreshAction</span><span class="p">(</span><span class="nl">sender</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="n">Int64</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">*</span> <span class="n">Double</span><span class="p">(</span><span class="n">NSEC_PER_SEC</span><span class="p">))),</span> <span class="n">dispatch_get_main_queue</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">(</span><span class="n">sender</span> <span class="n">as</span><span class="o">?</span> <span class="bp">UIRefreshControl</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">endRefreshing</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://triplecc.github.io/images/pull_refreshing_error.gif" alt="" /><br></p>

<p>正确情况：<br>
在UITableViewController中将UIRefreshControl赋给refreshControl</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">refreshControl</span> <span class="o">=</span> <span class="bp">UIRefreshControl</span><span class="p">()</span>
</span><span class='line'>  <span class="n">refreshControl</span><span class="o">?</span><span class="p">.</span><span class="n">addTarget</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">refreshAction</span><span class="p">),</span> <span class="nl">forControlEvents</span><span class="p">:</span> <span class="p">.</span><span class="n">ValueChanged</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="nf">refreshAction</span><span class="p">(</span><span class="nl">sender</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="n">Int64</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">*</span> <span class="n">Double</span><span class="p">(</span><span class="n">NSEC_PER_SEC</span><span class="p">))),</span> <span class="n">dispatch_get_main_queue</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">(</span><span class="n">sender</span> <span class="n">as</span><span class="o">?</span> <span class="bp">UIRefreshControl</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">endRefreshing</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://triplecc.github.io/images/pull_refreshing_right.gif" alt="" /><br></p>

<h3>2016-9-25补充</h3>

<p>iOS10之后，苹果似乎修复了这个问题。UIScrollView也有refreshControl属性了。</p>

<h2>聊天界面输入框换行抖动</h2>

<p>以下是错误演示，分别为boss直聘、刷脸：<br>
<img src="http://triplecc.github.io/images/boss_zhi_pin.gif" alt="" /><br>
<img src="http://triplecc.github.io/images/shua_lian.gif" alt="" /><br></p>

<p>以下是微信效果：<br>
<img src="http://triplecc.github.io/images/wei_xin.gif" alt="" /><br></p>

<p>可以看出前面两者在换行时有明显的抖动情况，结合自身项目的开发情况，前两者应该是<code>监听UITextViewTextDidChangeNotification</code>或者<code>使用UITextView代理方法</code>的方式实现UITextView以及输入框frame的改变。<br>
正确做法：使用观察者监听UITextView的<code>contentSize</code>，利用contentSize的改变设置UITextView以及输入框的frame。</p>

<h2>UITapGestureRecognizer与tableView:didSelectRowAtIndexPath:</h2>

<p>假设以下View层级关系(->表示右边为左边的子控件)：<br>
- UIView(1)->UIView(2)->UITabelView(3)</p>

<p>那么，当给控件1/2添加<code>UITapGestureRecognizer</code>后，3的<code>tableView:didSelectRowAtIndexPath:</code>将无法响应点击事件。<br>
解决方式：</p>

<ul>
<li>方式1、将<code>tapGesture</code>的<code>cancelsTouchesInView</code>设置为NO

<ul>
<li>这样做<code>tableView:didSelectRowAtIndexPath:</code>和<code>tapGesture的回调</code>都会调用</li>
</ul>
</li>
<li>方式2、设置<code>tapGesture</code>的代理，实现以下方法：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizer:</span><span class="p">(</span><span class="bp">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span> <span class="nf">shouldReceiveTouch:</span><span class="p">(</span><span class="bp">UITouch</span> <span class="o">*</span><span class="p">)</span><span class="nv">touch</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>  <span class="o">!</span><span class="p">[</span><span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">touch</span><span class="p">.</span><span class="n">view</span> <span class="k">class</span><span class="p">])</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;UITableViewCellContentView&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>stackoverflow上的解决方式：<a href="http://stackoverflow.com/questions/8192480/uitapgesturerecognizer-breaks-uitableview-didselectrowatindexpath">uitapgesturerecognizer-breaks-uitableview-didselectrowatindexpath</a><br></p>

<p>另：关于子控件拦截父控件的<code>UIGestureRecognizer</code>事件<br>
子控件在可以接收交互事件的前提下(比如UIView)，默认无法拦截父控件的<code>UIGestureRecognizer</code>事件(和touchxxxx系列不一样，后者是可以被拦截的)。<br></p>

<p>需要进行拦截，有两种方法：</p>

<ul>
<li>在子控件中添加和父控件相同的手势</li>
<li>在父控件中的实现以下代理方法，如果点击点在子控件范围内，就不接收事件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizer:</span><span class="p">(</span><span class="bp">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span> <span class="nf">shouldReceiveTouch:</span><span class="p">(</span><span class="bp">UITouch</span> <span class="o">*</span><span class="p">)</span><span class="nv">touch</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizer:</span><span class="p">(</span><span class="bp">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span> <span class="nf">shouldReceivePress:</span><span class="p">(</span><span class="n">UIPress</span> <span class="o">*</span><span class="p">)</span><span class="nv">press</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于keychain封装库Locksmith]]></title>
    <link href="http://triplecc.github.io/blog/2016-02-05-locksmithmian-xiang-xie-yi-ku/"/>
    <updated>2016-02-05T14:57:48+08:00</updated>
    <id>http://triplecc.github.io/blog/locksmithmian-xiang-xie-yi-ku</id>
    <content type="html"><![CDATA[<p>Locksmith是一个面向协议编程的keychain封装库，也是我见过的对面向协议贯彻最彻底的一个第三方库。<br></p>

<h2>Locksmith基本实现</h2>

<p>iOS系统中有5种keychain类型：generic passwords, internet passwords, certificates, keys,以及 identities。并且针对每个类型都有4种操作：create, read, update,以及 delete。<br></p>

<p>对于以上复杂的逻辑关系，Cocoa采用了一系列字符串常量以及对应的key/value进行操作。只是对于Swift来说，这种方式过于冗余而且难以记忆，并没有充分利用到其语言特性。<br></p>

<p>Locksmith作者采用了protocol来解决原生方案过于复杂的问题。就像乐高玩具一样，可以随意组装不同的组件来达到不同的视觉效果，Locksmith可以让使用者遵守特定的protocol来获取对应的功能，比如需要delete功能，那么就遵循DeleteableSecureStorable协议；需要read功能，那么就遵守ReadableSecureStorable协议。而在对应的模型中，不需要额外添加函数，协议内部通过extension已经实现了对应的功能函数。开发者直接调用deleteFromKeychain或者readFromKeychain即可实现想要的功能。</p>

<!--more-->


<p>并且，Locksmith还通过protocol提供了更加友好的Result类型。通过遵守GenericPasswordSecureStorable或者InternetPasswordSecureStorable，就可以
读取不同的结果类型GenericPasswordResult或者InternetPasswordResult，而后面这两个结构体又分别遵守了GenericPasswordSecureStorableResultType和InternetPasswordSecureStorableResultType协议，这两个协议又针对结构体中的结果分别进行了以下处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// InternetPasswordSecureStorableResultType</span>
</span><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="nl">InternetPasswordSecureStorableResultType</span><span class="p">:</span> <span class="n">AccountBasedSecureStorableResultType</span><span class="p">,</span> <span class="n">DescribableSecureStorableResultType</span><span class="p">,</span> <span class="n">CommentableSecureStorableResultType</span><span class="p">,</span> <span class="n">CreatorDesignatableSecureStorableResultType</span><span class="p">,</span> <span class="n">TypeDesignatableSecureStorableResultType</span><span class="p">,</span> <span class="n">IsInvisibleAssignableSecureStorableResultType</span><span class="p">,</span> <span class="n">IsNegativeAssignableSecureStorableResultType</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">extension</span> <span class="n">InternetPasswordSecureStorableResultType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">func</span> <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="n">CFString</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resultDictionary</span><span class="p">[</span><span class="n">String</span><span class="p">(</span><span class="n">key</span><span class="p">)]</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">server</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="n">kSecAttrServer</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">port</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resultDictionary</span><span class="p">[</span><span class="n">String</span><span class="p">(</span><span class="n">kSecAttrPort</span><span class="p">)]</span> <span class="kt">as</span><span class="o">!</span> <span class="n">Int</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">internetProtocol</span><span class="p">:</span> <span class="n">LocksmithInternetProtocol</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">LocksmithInternetProtocol</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="n">kSecAttrProtocol</span><span class="p">)</span><span class="o">!</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">authenticationType</span><span class="p">:</span> <span class="n">LocksmithInternetAuthenticationType</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">LocksmithInternetAuthenticationType</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span>  <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="n">kSecAttrAuthenticationType</span><span class="p">)</span><span class="o">!</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">securityDomain</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="n">kSecAttrSecurityDomain</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">path</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stringFromResultDictionary</span><span class="p">(</span><span class="n">kSecAttrPath</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GenericPasswordSecureStorableResultType</span>
</span><span class='line'><span class="n">public</span> <span class="k">protocol</span> <span class="nl">GenericPasswordSecureStorableResultType</span><span class="p">:</span> <span class="n">GenericPasswordSecureStorable</span><span class="p">,</span> <span class="n">SecureStorableResultType</span><span class="p">,</span> <span class="n">AccountBasedSecureStorableResultType</span><span class="p">,</span> <span class="n">DescribableSecureStorableResultType</span><span class="p">,</span> <span class="n">CommentableSecureStorableResultType</span><span class="p">,</span> <span class="n">CreatorDesignatableSecureStorableResultType</span><span class="p">,</span> <span class="n">LabellableSecureStorableResultType</span><span class="p">,</span> <span class="n">TypeDesignatableSecureStorableResultType</span><span class="p">,</span> <span class="n">IsInvisibleAssignableSecureStorableResultType</span><span class="p">,</span> <span class="n">IsNegativeAssignableSecureStorableResultType</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">extension</span> <span class="n">GenericPasswordSecureStorableResultType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">service</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resultDictionary</span><span class="p">[</span><span class="n">String</span><span class="p">(</span><span class="n">kSecAttrService</span><span class="p">)]</span> <span class="kt">as</span><span class="o">!</span> <span class="n">String</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">generic</span><span class="p">:</span> <span class="bp">NSData</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resultDictionary</span><span class="p">[</span><span class="n">String</span><span class="p">(</span><span class="n">kSecAttrGeneric</span><span class="p">)]</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSData</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，最终的版本的协议遵守了很多组件协议。从上面代码块中，初步可见protocol extension的强大之处了。不过还没完，最后还要通过extension的where子句，完成读取结果的统一接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">extension</span> <span class="n">ReadableSecureStorable</span> <span class="k">where</span> <span class="nl">Self</span> <span class="p">:</span> <span class="n">GenericPasswordSecureStorable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">readFromSecureStore</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">GenericPasswordSecureStorableResultType</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">try</span> <span class="n">performSecureStorageAction</span><span class="p">(</span><span class="n">performReadRequestClosure</span><span class="p">,</span> <span class="nl">secureStoragePropertyDictionary</span><span class="p">:</span> <span class="n">asReadableSecureStoragePropertyDictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">GenericPasswordResult</span><span class="p">(</span><span class="nl">resultDictionary</span><span class="p">:</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">extension</span> <span class="n">ReadableSecureStorable</span> <span class="k">where</span> <span class="nl">Self</span> <span class="p">:</span> <span class="n">InternetPasswordSecureStorable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">readFromSecureStore</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">InternetPasswordSecureStorableResultType</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">try</span> <span class="n">performSecureStorageAction</span><span class="p">(</span><span class="n">performReadRequestClosure</span><span class="p">,</span> <span class="nl">secureStoragePropertyDictionary</span><span class="p">:</span> <span class="n">asReadableSecureStoragePropertyDictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">InternetPasswordResult</span><span class="p">(</span><span class="nl">resultDictionary</span><span class="p">:</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过以上实现方式，开发者最终面向的就是协议，不管是返回的查询结果还是遵循的增删改查组件协议。而结构体在这个框架中基本起数据中转作用，比如以下结构体：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 网络结果</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">InternetPasswordResult</span><span class="p">:</span> <span class="n">InternetPasswordSecureStorableResultType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">resultDictionary</span><span class="p">:</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 通用结果</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">GenericPasswordResult</span><span class="p">:</span> <span class="n">GenericPasswordSecureStorableResultType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">resultDictionary</span><span class="p">:</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面两个结构体给ReadableSecureStorable的readFromSecureStore做读取数据的存储中转，最终我们想要的数据还是需要分别到InternetPasswordSecureStorableResultType或者GenericPasswordSecureStorableResultType对应的属性中获取。<br></p>

<p>Locksmith中大量应用了protocol的extension特性，暂且不论其做法是否真的可取，但也算是面向协议编程强大之处的一种体现。</p>

<h2>参考文章</h2>

<p><a href="http://matthewpalmer.net/blog/2015/08/30/protocol-oriented-programming-in-the-real-world/">protocol-oriented-programming-in-the-real-world</a><br>
为现有类型添加新功能/解藕以增加灵活性与可测试性/方便同步快速发展的API/更少的代码更多的功能<br>
<a href="https://github.com/matthewpalmer/Locksmith">Locksmith源码－有更详细的使用说明</a></p>

<h2>一些其它关于面向协议编程应用文章</h2>

<p><a href="http://code.tutsplus.com/tutorials/protocol-oriented-programming-in-swift-2--cms-24979">Protocol-Oriented Programming in Swift 2</a><br>
解决多继承/协议扩展/Classes的重要性<br>
<a href="http://www.captechconsulting.com/blogs/ios-9-tutorial-series-protocol-oriented-programming-with-uikit">iOS 9 Tutorial Series: Protocol-Oriented Programming with UIKit</a><br>
现有文章示例代码大多为人为创造的情景下工作/面向协议真对UIKit 的应用/Swift协议的好处与限制/不能给Objective-C协议中的方法提供默认实现/可以给Objective-C协议添加新方法/协议for模型,数据格式,UI风格/协议及其扩展适合在添加共享、范性功能时使用，并不很切合UI<br>
<a href="http://www.capitalone.io/blog/improved-protocol-oriented-programming-untyped-type-aliases/">Improved Protocol-Oriented Programming with Untyped Type Aliases</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS知识碎片四]]></title>
    <link href="http://triplecc.github.io/blog/2016-02-02-ioszhi-shi-sui-pian-si/"/>
    <updated>2016-02-02T15:57:22+08:00</updated>
    <id>http://triplecc.github.io/blog/ioszhi-shi-sui-pian-si</id>
    <content type="html"><![CDATA[<p>1、显示CoreData执行的SQL语句<br>
2、监听UITextView键盘的发送按钮<br>
3、设置CoreData实体唯一约束<br>
4、iOS9关于canOpenURL不生效<br>
5、OC变参函数</p>

<!--more-->


<h2>显示CoreData执行的SQL语句</h2>

<p>设置步骤(<code>-com.apple.CoreData.SQLDebug 1</code>): <br>
<img src="http://triplecc.github.io/images/Snip20160202_1.png" alt="" /><br></p>

<p><img src="http://triplecc.github.io/images/Snip20160202_2.png" alt="" /><br>
打印结果：<br>
<img src="http://triplecc.github.io/images/Snip20160202_4.png" alt="" /><br></p>

<p>在获得对应的表后，可以通过sqlite3命令进行打印：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sqlite3 /Users/songruiwang/Desktop/1.sqlite </span></code></pre></td></tr></table></div></figure>


<p>执行help查询对应的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlite&gt; .help</span></code></pre></td></tr></table></div></figure>


<p>如果要显示表内容的话，可以执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlite&gt; .mode line
</span><span class='line'>sqlite&gt; select * from tbl1;
</span><span class='line'>  one = hello!
</span><span class='line'>  two = 10
</span><span class='line'>
</span><span class='line'>  one = hello!
</span><span class='line'>  two = 200
</span><span class='line'>sqlite&gt; </span></code></pre></td></tr></table></div></figure>


<p>更多详细的操作可以通过help查看。</p>

<h2>监听UITextView键盘的发送按钮</h2>

<p>UITextField有代理方法监听是否点击了发送按钮：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)textFieldShouldReturn:(UITextField *)textField;</span></code></pre></td></tr></table></div></figure>


<p>不过UITextView因为可以输入多行的关系，所以没有类似的代理方法。那么在作为聊天输入框的时候，就必须利用其它代理方法来实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {
</span><span class='line'>    if ([text isEqualToString:@"\n"]) {
</span><span class='line'>        [self publish];
</span><span class='line'>        return NO;
</span><span class='line'>    } else {
</span><span class='line'>        [self adjustSubviewsWithTextView:textView];
</span><span class='line'>    }
</span><span class='line'>    return YES;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面的代码块就是一种实现方式，只是需要去除输入换行的功能，不过作为聊天输入框，舍弃这个功能也是可以接受的。</p>

<h2>设置CoreData实体唯一约束</h2>

<p>在iOS9以前，不希望CoreData中出现相同的实体可以通过先查询后判断的形式实现。在iOS9以后，iOS提供了另外的设置，可以直接达到这个目的。设置步骤如下：</p>

<p>首先需要在CoreData配置实体属性中添加作为唯一标识的属性：</p>

<p><img src="http://triplecc.github.io/images/Snip20160222_1.png" alt="" /></p>

<p>然后在managedObjectContext上下文中添加合并策略，以便在遇到相同实体时进行更新：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">lazy</span> <span class="k">var</span> <span class="nl">managedObjectContext</span><span class="p">:</span> <span class="bp">NSManagedObjectContext</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.) This property is optional since there are legitimate error conditions that could cause the creation of the context to fail.</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">coordinator</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">persistentStoreCoordinator</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">managedObjectContext</span> <span class="o">=</span> <span class="bp">NSManagedObjectContext</span><span class="p">(</span><span class="nl">concurrencyType</span><span class="p">:</span> <span class="p">.</span><span class="n">MainQueueConcurrencyType</span><span class="p">)</span>
</span><span class='line'>    <span class="n">managedObjectContext</span><span class="p">.</span><span class="n">persistentStoreCoordinator</span> <span class="o">=</span> <span class="n">coordinator</span>
</span><span class='line'>    <span class="c1">// 添加合并策略（更新为内存中的属性值）</span>
</span><span class='line'>    <span class="n">managedObjectContext</span><span class="p">.</span><span class="n">mergePolicy</span> <span class="o">=</span> <span class="n">NSMergeByPropertyObjectTrumpMergePolicy</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">managedObjectContext</span>
</span><span class='line'><span class="p">}()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样当执行以下测试代码时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 模型</span>
</span><span class='line'><span class="k">class</span> <span class="nl">Person</span><span class="p">:</span> <span class="bp">NSManagedObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="k">var</span> <span class="nl">entityName</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">String</span><span class="p">(</span><span class="n">Person</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">context</span><span class="p">:</span> <span class="bp">NSManagedObjectContext</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">entity</span> <span class="o">=</span> <span class="bp">NSEntityDescription</span><span class="p">.</span><span class="n">entityForName</span><span class="p">(</span><span class="n">Person</span><span class="p">.</span><span class="n">entityName</span><span class="p">,</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span> <span class="n">context</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>            <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">entity</span><span class="p">:</span> <span class="n">entity</span><span class="p">,</span> <span class="nl">insertIntoManagedObjectContext</span><span class="p">:</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">@</span><span class="n">objc</span>
</span><span class='line'>    <span class="n">private</span> <span class="kr">override</span> <span class="k">init</span><span class="p">(</span><span class="nl">entity</span><span class="p">:</span> <span class="bp">NSEntityDescription</span><span class="p">,</span> <span class="n">insertIntoManagedObjectContext</span> <span class="nl">context</span><span class="p">:</span> <span class="bp">NSManagedObjectContext</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">entity</span><span class="p">:</span> <span class="n">entity</span><span class="p">,</span> <span class="nl">insertIntoManagedObjectContext</span><span class="p">:</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 控制器</span>
</span><span class='line'><span class="k">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">var</span> <span class="nl">persons</span><span class="p">:</span> <span class="p">[</span><span class="n">Person</span><span class="p">]</span><span class="o">!</span>
</span><span class='line'><span class="c1">// 按键回调</span>
</span><span class='line'><span class="k">func</span> <span class="n">add</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">delegate</span> <span class="o">=</span> <span class="bp">UIApplication</span><span class="p">.</span><span class="n">sharedApplication</span><span class="p">().</span><span class="n">delegate</span> <span class="kt">as</span><span class="o">!</span> <span class="n">AppDelegate</span>
</span><span class='line'>    <span class="n">delegate</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">.</span><span class="n">performBlock</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">context</span><span class="p">:</span> <span class="n">delegate</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">,</span> <span class="nl">name</span><span class="p">:</span> <span class="s">&quot;\(self.i++ % 4)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">person</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">i</span> <span class="o">%</span> <span class="mi">5</span>
</span><span class='line'>        <span class="n">delegate</span><span class="p">.</span><span class="n">saveContext</span><span class="p">()</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">request</span> <span class="o">=</span> <span class="bp">NSFetchRequest</span><span class="p">(</span><span class="nl">entityName</span><span class="p">:</span> <span class="n">Person</span><span class="p">.</span><span class="n">entityName</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">persons</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span> <span class="n">delegate</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">.</span><span class="n">executeFetchRequest</span><span class="p">(</span><span class="n">request</span><span class="p">)</span> <span class="kt">as</span><span class="o">!</span> <span class="p">[</span><span class="n">Person</span><span class="p">]</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">persons</span><span class="p">.</span><span class="n">last</span><span class="o">?</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">persons</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">persons</span><span class="p">.</span><span class="n">last</span><span class="o">?</span><span class="p">.</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>  
</span></code></pre></td></tr></table></div></figure>


<p>会输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">Optional</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="mi">4</span> <span class="n">Optional</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到最后一个实体在不断地更新，并没有添加新的实体到sqlite中。</p>

<p>不过需要注意的一点是当执行save操作后，<code>后面创建的约束值相同的实体会被清为default</code>，即除了第一个person，后面的person实体都会被清为default。</p>

<p>还有唯一约束一般结合NSFetchedResultsController使用，由NSFetchedResultsController来管理实体，就不用担心自己已经存储的有值的实体被清为defalut了（这里可以用先查后创建的方式避免，不过这样的话代码逻辑就和没有用这个约束一样了），因为在约束值相同的情况下，NSFetchedResultsController根本不会将其存入，进而不会触发对应的刷新代理方法。</p>

<h2>iOS9关于canOpenURL不生效</h2>

<p>系统在iOS9之后加强了隐私保护，需要在info.plist中设置<code>LSApplicationQueriesSchemes</code>来添加要跳转的对应URL scheme，canOpenURL才会生效。</p>

<p>详细地址:</p>

<p><a href="https://developer.apple.com/videos/play/wwdc2015/703/">session 703 privacy and your app</a></p>

<h2>OC变参函数</h2>

<p>一个项目中各个API的host可能并不一样，所以最好有一个方法能够预置对应API的host，除了宏，变参函数是个很好的选择，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">jobURLStringWithPath:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">format</span><span class="p">,</span> <span class="p">...</span> <span class="n">NS_FORMAT_FUNCTION</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">){</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">contents</span> <span class="o">=</span> <span class="n">JOB_HOST</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">va_list</span> <span class="n">args</span><span class="p">;</span>
</span><span class='line'>    <span class="n">va_start</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">format</span><span class="p">);</span>
</span><span class='line'>    <span class="n">contents</span> <span class="o">=</span> <span class="p">[</span><span class="n">contents</span> <span class="nl">stringByAppendingString</span><span class="p">:[[</span><span class="bp">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat</span><span class="p">:</span><span class="n">format</span> <span class="nl">arguments</span><span class="p">:</span><span class="n">args</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">va_end</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">contents</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以进行以下调用来获取url字符串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">[</span><span class="n">BaseAPI</span> <span class="nl">jobURLStringWithPath</span><span class="p">:</span><span class="s">@&quot;/deliveries.json&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="n">BaseAPI</span> <span class="nl">jobURLStringWithPath</span><span class="p">:</span><span class="s">@&quot;/user/%@/job.json&quot;</span><span class="p">,</span> <span class="n">userId</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>相对来说还是比较方便的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工具速查博客]]></title>
    <link href="http://triplecc.github.io/blog/2016-01-14-lldbchang-jian-ming-ling/"/>
    <updated>2016-01-14T20:16:07+08:00</updated>
    <id>http://triplecc.github.io/blog/lldbchang-jian-ming-ling</id>
    <content type="html"><![CDATA[<p>准备在这里记录一些常用开发工具的介绍博客，以备忘。</p>

<!--more-->


<h2>LLDB</h2>

<p><a href="http://www.jianshu.com/p/e89af3e9a8d7">小笨狼与LLDB的故事</a><br>
<a href="http://www.jianshu.com/p/afaaacc55460">小笨狼的LLDB技巧:chisel</a><br>
<a href="http://objccn.io/issue-19-2/">与调试器共舞 - LLDB 的华尔兹</a></p>

<h2>Git</h2>

<p><a href="https://schacon.github.io/gitbook/4_rebasing.html">git rebase的图示</a><br>
<a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow介绍</a><br>
<a href="https://github.com/git-game/git-game">通过命令行过关的git游戏</a><br>
<a href="https://github.com/tiimgreen/github-cheat-sheet">git奇技淫巧</a><br>
<a href="https://github.com/aanand/git-up">用git-up取代git pull</a><br>
<a href="https://github.com/nvie/gitflow">方便的进行git flow的流程</a><br>
<a href="http://pcottle.github.io/learnGitBranching/">动画展示git分支</a><br>
<a href="http://backlogtool.com/git-guide/en/stepup/stepup7_1.html">历史修改</a><br>
<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a><br>
<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">Git 工作流程</a><br>
<a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">Git Commit规范</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu下编译Swift]]></title>
    <link href="http://triplecc.github.io/blog/2016-01-05-zai-ubuntuxia-bian-yi-swift/"/>
    <updated>2016-01-05T22:00:18+08:00</updated>
    <id>http://triplecc.github.io/blog/zai-ubuntuxia-bian-yi-swift</id>
    <content type="html"><![CDATA[<p>哎，近半年没有在Ubuntu的字符终端下畅爽地码代码了（那种Ctrl+Alt+F1~F6然后只有不同颜色的字符在屏幕上跳跃的感觉现在想起来还是超爽啊！），今天恰好来试下在Ubuntu下编译Swift，因为要截图，所以只能在图形界面的虚拟终端下码了- -。</p>

<h5>下载工具包</h5>

<p>首先需要进这<a href="https://swift.org/download/">这里</a>下载对应的工具包，因为我的系统是去年安装的Ubuntu14.04所以选择最后一个。<br>
<img src="http://triplecc.github.io/images/Snip20160105_8.png" alt="" /><br></p>

<h5>解压工具包</h5>

<p>然后进入下载文件夹解压：<br>
<img src="http://triplecc.github.io/images/Snip20160105_9.png" alt="" /><br>
可以看到解压后，目录下有下面几个子目录：<br>
<img src="http://triplecc.github.io/images/Snip20160105_10.png" alt="" /><br>
主要说明三个子目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin   可执行文件
</span><span class='line'>lib   可执行文件动态库
</span><span class='line'>share man</span></code></pre></td></tr></table></div></figure>


<!--More-->


<h5>设置PATH路径</h5>

<p>接下来需要设置系统的PATH：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// root
</span><span class='line'>$ vim /etc/profile
</span><span class='line'>// 对应的user
</span><span class='line'>$ vim ~/.profile</span></code></pre></td></tr></table></div></figure>


<p>然后在文件的末尾添加以下表达式即可（Shift+g跳到最后一行；Shift+o添加一行）：<br>
<img src="http://triplecc.github.io/images/Snip20160105_12.png" alt="" /><br>
也可以在当前虚拟终端暂时性的设置PATH，不过退出这个终端在重新开启一个就恢复以前的PATH了：<br>
<img src="http://triplecc.github.io/images/Snip20160105_11.png" alt="" /><br>
这里我直接把工具包目录下的bin目录以及lib目录中的动态库和可执行文件直接移到/usr/local/bin和/usr/local/lib中，这样就不需要修改PATH路径了。</p>

<h5>下载Swift运行的依赖库</h5>

<p>因为上星期在运行Swift开源代码的时候，我基本把所有的依赖环境都安装了，所以不需要重新安装，如果没有安装过的话，可以执行以下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install clang libicu-dev</span></code></pre></td></tr></table></div></figure>


<h5>编写Swift程序</h5>

<p>上面步骤执行完成，就可以在Ubuntu上编写运行Swift代码了。
先试用下Swift的REPL，效果如下：<br>
<img src="http://triplecc.github.io/images/Snip20160105_15.png" alt="" /><br>
然后就可以正式编写Swift代码了，想想都有点小激动＝＝。<br>
新建一个Swift目录，然后创建第一个程序目录HelloWorld。<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/Study
</span><span class='line'>$ mkdir -p Swift/HelloWorld
</span><span class='line'>$ cd Swift/HelloWorld</span></code></pre></td></tr></table></div></figure>


<p>因为每个包都需要有Package.swift文件，所以执行以下命令进行创建：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch package.swift</span></code></pre></td></tr></table></div></figure>


<p>最后需要创建一个包含main.swift的Sources文件夹：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir Sources
</span><span class='line'>$ touch Sources/main.swift</span></code></pre></td></tr></table></div></figure>


<p>接着开始编辑main.swift：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim main.swift
</span><span class='line'>// 插入以下代码
</span><span class='line'>print("Hello, world!")</span></code></pre></td></tr></table></div></figure>


<p>执行以下命令编译并运行文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ swift build
</span><span class='line'>$ .build/debug/Swift</span></code></pre></td></tr></table></div></figure>


<p>以下为运行结果 ：</p>

<p><img src="http://triplecc.github.io/images/Snip20160105_14.png" alt="" /><br></p>

<h5>THE END</h5>

<p>在Ubuntu下写Swift，感觉还是非常不错的，以后有时间可以多玩一玩。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift2.0中的case匹配]]></title>
    <link href="http://triplecc.github.io/blog/2015-12-29-if-case,-guard-case,-for-case/"/>
    <updated>2015-12-29T17:15:29+08:00</updated>
    <id>http://triplecc.github.io/blog/if-case,-guard-case,-for-case</id>
    <content type="html"><![CDATA[<p>Swift在2.0版本之后，对if、guard、for的匹配进行了一定的加强，其中case匹配模式感觉还是挺新奇的。</p>

<p>参照Swift官方手册，可以知道，这种模式在针对可选值进行处理时，可以获得额外的便利：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">someOptional</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'><span class="c1">// Match using an enumeration case pattern</span>
</span><span class='line'><span class="k">if</span> <span class="k">case</span> <span class="p">.</span><span class="n">Some</span><span class="p">(</span><span class="k">let</span> <span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">someOptional</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Match using an optional pattern</span>
</span><span class='line'><span class="k">if</span> <span class="k">case</span> <span class="k">let</span> <span class="n">x</span><span class="o">?</span> <span class="o">=</span> <span class="n">someOptional</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>x?是.Some(let x)的简写方式。单从以上代码段，可能还看不出有什么特别之处，相反还比以前的实现繁琐：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">someOptional</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过官方手册体现其便利的是for关键字，if还需要另一种场景来体现其带来的便利：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">arrayOfOptionalInts</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="o">?</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nb">nil</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="c1">// Match only non-nil values</span>
</span><span class='line'><span class="k">for</span> <span class="k">case</span> <span class="k">let</span> <span class="n">number</span><span class="o">?</span> <span class="k">in</span> <span class="n">arrayOfOptionalInts</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Found a \(number)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 输出</span>
</span><span class='line'><span class="c1">// Found a 2</span>
</span><span class='line'><span class="c1">// Found a 3</span>
</span><span class='line'><span class="c1">// Found a 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在遍历可选值数组的场景下，这种方式确实减少了一些代码，要是以前，我可能会这样实现：</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 1</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">arrayOfOptionalInts</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2</span>
</span><span class='line'><span class="n">arrayOfOptionalInts</span><span class="p">.</span><span class="n">flatMap</span><span class="p">{</span><span class="err">$</span><span class="mi">0</span><span class="p">}.</span><span class="n">map</span><span class="p">{</span> <span class="n">print</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kingfisher、Alarmfire以及Swift开源Foundation的NSSet类中，都使用到了这个特性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Kingfisher</span>
</span><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">transitionItem</span> <span class="o">=</span> <span class="n">optionsInfo</span><span class="o">?</span><span class="p">.</span><span class="n">kf_firstMatchIgnoringAssociatedValue</span><span class="p">(.</span><span class="n">Transition</span><span class="p">(.</span><span class="n">None</span><span class="p">)),</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">Transition</span><span class="p">(</span><span class="k">let</span> <span class="n">transition</span><span class="p">)</span> <span class="o">=</span> <span class="n">transitionItem</span> <span class="k">where</span> <span class="n">cacheType</span> <span class="o">==</span> <span class="p">.</span><span class="n">None</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">UIView</span><span class="p">.</span><span class="n">transitionWithView</span><span class="p">(</span><span class="n">sSelf</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[],</span>
</span><span class='line'>            <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">indicator</span><span class="o">?</span><span class="p">.</span><span class="n">stopAnimating</span><span class="p">()</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nl">completion</span><span class="p">:</span> <span class="p">{</span> <span class="n">finished</span> <span class="k">in</span>
</span><span class='line'>                <span class="bp">UIView</span><span class="p">.</span><span class="n">transitionWithView</span><span class="p">(</span><span class="n">sSelf</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">transition</span><span class="p">.</span><span class="n">duration</span><span class="p">,</span>
</span><span class='line'>                    <span class="nl">options</span><span class="p">:</span> <span class="n">transition</span><span class="p">.</span><span class="n">animationOptions</span><span class="p">,</span>
</span><span class='line'>                    <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">transition</span><span class="p">.</span><span class="n">animations</span><span class="o">?</span><span class="p">(</span><span class="n">sSelf</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="nl">completion</span><span class="p">:</span> <span class="p">{</span> <span class="n">finished</span> <span class="k">in</span>
</span><span class='line'>                        <span class="n">transition</span><span class="p">.</span><span class="n">completion</span><span class="o">?</span><span class="p">(</span><span class="n">finished</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">completionHandler</span><span class="o">?</span><span class="p">(</span><span class="nl">image</span><span class="p">:</span> <span class="n">image</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="n">error</span><span class="p">,</span> <span class="nl">cacheType</span><span class="p">:</span> <span class="n">cacheType</span><span class="p">,</span> <span class="nl">imageURL</span><span class="p">:</span> <span class="n">imageURL</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">indicator</span><span class="o">?</span><span class="p">.</span><span class="n">stopAnimating</span><span class="p">()</span>
</span><span class='line'>    <span class="n">sSelf</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span>
</span><span class='line'>    <span class="n">completionHandler</span><span class="o">?</span><span class="p">(</span><span class="nl">image</span><span class="p">:</span> <span class="n">image</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="n">error</span><span class="p">,</span> <span class="nl">cacheType</span><span class="p">:</span> <span class="n">cacheType</span><span class="p">,</span> <span class="nl">imageURL</span><span class="p">:</span> <span class="n">imageURL</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Alarmfire</span>
</span><span class='line'><span class="n">public</span> <span class="k">enum</span> <span class="n">ValidationResult</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Success</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Failure</span><span class="p">(</span><span class="bp">NSError</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">validate</span><span class="p">(</span><span class="nl">validation</span><span class="p">:</span> <span class="n">Validation</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Self</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delegate</span><span class="p">.</span><span class="n">queue</span><span class="p">.</span><span class="n">addOperationWithBlock</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span>
</span><span class='line'>            <span class="n">response</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">response</span> <span class="k">where</span> <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">.</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>            <span class="k">case</span> <span class="k">let</span> <span class="p">.</span><span class="n">Failure</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="o">=</span> <span class="n">validation</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">.</span><span class="n">error</span> <span class="o">=</span> <span class="n">error</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NSSet </span>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">isSubsetOfSet</span><span class="p">(</span><span class="nl">otherSet</span><span class="p">:</span> <span class="n">Set</span><span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="k">case</span> <span class="k">let</span> <span class="n">obj</span> <span class="kt">as</span> <span class="bp">NSObject</span> <span class="k">in</span> <span class="n">allObjects</span> <span class="k">where</span> <span class="o">!</span><span class="n">otherSet</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照我的思路编写的话，在老版本中，我会这样实现后面两个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Alarmfire</span>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="nf">wvalidate</span><span class="p">(</span><span class="nl">validation</span><span class="p">:</span> <span class="n">Validation</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Self</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delegate</span><span class="p">.</span><span class="n">queue</span><span class="p">.</span><span class="n">addOperationWithBlock</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">response</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">response</span> <span class="k">where</span> <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">.</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">switch</span> <span class="n">validation</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="k">let</span> <span class="p">.</span><span class="n">Failure</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">.</span><span class="n">error</span> <span class="o">=</span> <span class="n">error</span>
</span><span class='line'>            <span class="k">default</span> <span class="o">:</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NSSet</span>
</span><span class='line'><span class="n">public</span> <span class="k">func</span> <span class="n">isSubsetOfSet</span><span class="p">(</span><span class="nl">otherSet</span><span class="p">:</span> <span class="n">Set</span><span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">obj</span> <span class="k">in</span> <span class="n">allObjects</span> <span class="k">where</span> <span class="o">!</span><span class="n">otherSet</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">obj</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSObject</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在第一个实现中，我不得不添加了default分支，即使在这个分支里面不进行任何操作，从而可见case匹配模式可以在这类场景下简化switch语句（如果只需要确认enum中的一个类型，就可以选择性地用if-case替换switch）。<br>
在第二个实现中，因为编译器的原因，我不得不将一般转换as改成可选转换as?，然后增加if语句进行判断。(针对类型转换，if-case可以缩减代码量)<br></p>

<p>case匹配模式在针对<code>值绑定</code>，<code>元组</code>，<code>类型转换</code>都带来了一定便利，<a href="http://appventure.me/2015/08/20/swift-pattern-matching-in-detail/#sec-9">Match Me if you can: Swift Pattern Matching in Detail.</a>这篇文章中，对这几种情况进行了非常详细的讲解，并列举了一些实际应用的例子，推荐阅读。</p>
]]></content>
  </entry>
  
</feed>
